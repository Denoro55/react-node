{"version":3,"sources":["components/cart/index.jsx","store/actions/index.jsx","socket/index.js","components/header/index.jsx","components/home/index.jsx","components/store/index.jsx","components/private-route/index.jsx","components/context/apiService.js","components/hoc/withApiService.jsx","components/login/index.jsx","components/register/index.jsx","components/messages/MessagesList.jsx","components/spinner/index.jsx","store/actions/messageActions.jsx","store/actions/chatActions.jsx","components/messages/Chat.jsx","components/messages/index.jsx","components/me/index.jsx","components/app/index.jsx","serviceWorker.js","errors/UnauthorizedError.js","service/ApiService.jsx","store/reducer/userReducer.jsx","store/reducer/messageReducer.jsx","store/reducer/chatReducer.jsx","store/reducer/index.jsx","store/sagas/index.jsx","store/index.jsx","index.jsx"],"names":["Cart","console","log","this","props","React","Component","getUserData","apiService","token","dispatch","type","then","res","data","auth","name","id","avatarUrl","payload","catch","err","socket","openSocket","connect","state","isAuthenticated","user","actionUnauthorize","localStorage","removeItem","logout","e","preventDefault","emit","className","to","exact","isAuth","map","link","idx","key","activeClassName","onClick","greeting","Store","ChildComponent","component","rest","createContext","ApiServiceProvider","Provider","ApiServiceConsumer","Consumer","withApiService","Wrapped","Login","form","email","password","message","color","text","login","actionAuthorize","actionGetUserData","errors","setState","history","push","onInputChange","target","value","feedback","style","onSubmit","onChange","placeholder","setItem","Register","register","checkAuth","withRouter","messagesList","openChat","item","updated","Spinner","actionFetchMessages","getListMessages","fetchMessagesSuccess","messages","updateMessageInList","updateMessagesList","list","sortMessagesList","fetchChat","receiverId","getChatMessages","sort","actionUpdateChatStatus","inChat","chatId","addChatMessage","actionSendMessage","companion","date","params","method","headers","body","JSON","stringify","senderId","getRequest","bindActionCreators","backToMessages","chatLoading","companionId","useState","setMessage","chatMessages","useSelector","chat","listContainer","useRef","useEffect","current","scrollTop","scrollHeight","ref","msg","companionData","newMessage","Date","now","toId","fromId","sendMessage","queryParams","queryString","parse","location","search","showChat","setChat","loading","messagesLoading","currentContent","show","avatarFileInput","avatarFormActive","setAvatarFormStatus","avatarPreviewImage","setAvatarPreviewImage","resetAvatarForm","avatarClasses","cn","backgroundImage","FormData","append","files","uploadAvatar","file","reader","FileReader","readAsDataURL","onloadend","previewImage","result","aria-hidden","cols","rows","src","alt","App","prevProps","prevState","snapshot","on","getUser","mine","toString","window","M","toast","html","updateChatTime","path","Home","Me","Messages","render","getNewMessage","Boolean","hostname","match","UnauthorizedError","args","status","Error","ApiService","URL","url","Promise","resolve","reject","fetch","json","formData","initialState","userReducer","action","createMessage","messagesReducer","index","findIndex","m","updatedMessages","filter","unshift","chatReducer","reducer","combineReducers","sagaMiddleware","createSagaMiddleware","reduxDevTools","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","compose","applyMiddleware","reduxThunk","next","getItem","renderDOM","ReactDOM","StrictMode","document","getElementById","getState","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"iSAeeA,E,kLAVPC,QAAQC,IAAIC,KAAKC,S,+BAIjB,OACI,yC,GAPOC,IAAMC,WCaZC,EAAc,SAACC,EAAYC,GAAb,OAAuB,kBAAM,SAACC,GAGrD,OAFAA,EAHoC,CAACC,KAAM,aAKpCH,EAAWD,YAAYE,GAAOG,MAAK,SAAAC,GACtC,IAAMC,EAAO,CAACC,MAAM,EAAMN,QAAOO,KAAMH,EAAIC,KAAKE,KAAMC,GAAIJ,EAAIC,KAAKG,GAAIC,UAAWL,EAAIC,KAAKI,WAC3F,OAAOR,EATuC,CAACC,KAAM,mBAAoBQ,QAShCL,OAC1CM,OAAM,SAAAC,GACLX,EAVuC,CAACC,KAAM,2B,gBCVvCW,E,MAFAC,GAAW,yBCoHXC,eAbS,SAACC,GACrB,MAAO,CACHC,gBAAiBD,EAAME,KAAKZ,KAC5BY,KAAMF,EAAME,SAIO,SAACjB,GACxB,MAAO,CACHkB,kBAAmB,kBAAMlB,GF1G7BmB,aAAaC,WAAW,YAEjB,CAACnB,KAAM,0BE4GHa,EA7GA,SAAC,GAAgD,IAA/CE,EAA8C,EAA9CA,gBAAiBE,EAA6B,EAA7BA,kBAAmBD,EAAU,EAAVA,KAC3CI,EAAS,SAACC,GACZA,EAAEC,iBACFX,EAAOY,KAAK,YAAa,CAACjB,GAAIU,EAAKV,KACnCW,KAiCJ,OACI,4BAAQO,UAAU,UACd,6BACI,yBAAKA,UAAU,eACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,WACX,kBAAC,IAAD,CAAMA,UAAU,oBAAoBC,GAAG,KAAvC,eACA,wBAAInB,GAAG,aAAakB,UAAU,6BAf5C,CACV,CAACE,OAAO,EAAMD,GAAI,IAAKpB,KAAM,OAAQsB,QAAQ,GAC7C,CAACD,OAAO,EAAMD,GAAI,MAAOpB,KAAM,KAAMsB,QAAQ,GAC7C,CAACD,OAAO,EAAOD,GAAI,SAAUpB,KAAM,QAASsB,QAAQ,GACpD,CAACD,OAAO,EAAOD,GAAI,aAAcpB,KAAM,WAAYsB,QAAQ,IAarBC,KAAI,SAACC,EAAMC,GACb,OAAKf,GAAmBc,EAAKF,OAClB,KAIP,wBAAII,IAAKD,EAAKN,UAAU,YACpB,kBAAC,IAAD,CAASQ,gBAAgB,SAASR,UAAU,WAAWE,MAAOG,EAAKH,MAAOD,GAAII,EAAKJ,IAAKI,EAAKxB,WA9CrIU,EAEI,wBAAIS,UAAU,yBACV,wBAAIA,UAAU,YACV,kBAAC,IAAD,CAASS,QAASb,EAAQY,gBAAgB,SAASR,UAAU,mBAAmBC,GAAG,WAAnF,YAMR,wBAAInB,GAAG,aAAakB,UAAU,8BAC1B,wBAAIA,UAAU,YACV,kBAAC,IAAD,CAASQ,gBAAgB,SAASR,UAAU,mBAAmBC,GAAG,UAAlE,UAEJ,wBAAID,UAAU,YACV,kBAAC,IAAD,CAASQ,gBAAgB,SAASR,UAAU,gBAAgBC,GAAG,aAA/D,uBCXTZ,eANS,SAACC,GACnB,MAAO,CACHE,KAAMF,EAAME,QAIPH,EAjBF,SAAC,GAAY,IAAXG,EAAU,EAAVA,KACLkB,EAAWlB,EAAKZ,KAAO,qCAAU,2BAAIY,EAAKX,OAAgB,4CAEhE,OACI,6BACI,wBAAImB,UAAU,QAAd,eACCU,MCKEC,E,oNANP,OACI,8C,GAPQzC,IAAMC,W,QCgBXkB,eANS,SAACC,GACrB,MAAO,CACHV,KAAMU,EAAME,KAAKZ,QAIVS,EAdM,SAAC,GAAgD,IAApCuB,EAAmC,EAA9CC,UAA2BjC,EAAmB,EAAnBA,KAASkC,EAAU,oCACjE,OACI,kBAAC,IAAD,KACMlC,EAAO,kBAACgC,EAAmBE,GAAW,kBAAC,IAAD,CAAUb,GAAG,e,UCF7D/B,IAAM6C,gBAFIC,E,EAAVC,SACUC,E,EAAVC,SCWWC,EAZQ,SAACC,GACpB,OAAO,SAACpD,GACJ,OAAO,kBAACiD,EAAD,MAEC,SAAC7C,GACG,OAAO,kBAACgD,EAAD,iBAAapD,EAAb,CAAoBI,WAAYA,UCDrDiD,E,4MACFhC,MAAQ,CACJiC,KAAM,CACFC,MAAO,GACPC,SAAU,IAEdC,QAAS,CACLC,MAAO,MACPC,KAAM,K,EAIdC,MAAQ,SAAChC,GACLA,EAAEC,iBADS,MAE8C,EAAK7B,MAAvDI,EAFI,EAEJA,WAAYyD,EAFR,EAEQA,gBAAiBC,EAFzB,EAEyBA,kBACpC1D,EAAWwD,MAAM,EAAKvC,MAAMiC,MAAM9C,MAAK,SAAAC,GACnC,GAAIA,EAAIsD,OACJ,EAAKC,SAAS,CACVP,QAAS,CAACC,MAAO,MAAOC,KAAMlD,EAAIgD,eAEnC,CACH,IAAMpD,EAAQI,EAAIJ,MACdA,IACAwD,EAAgB,CAAClD,MAAM,EAAMN,UAC7ByD,EAAkBzD,GAAOG,MAAK,SAACoB,GAC3BV,EAAOY,KAAK,YAAa,CAACjB,GAAIe,EAAEb,QAAQF,KACxC,EAAKb,MAAMiE,QAAQC,KAAK,gB,EAO5CC,cAAgB,SAACvC,GACb,EAAKoC,SAAS,CACVV,KAAK,eACE,EAAKjC,MAAMiC,KADd,eAEC1B,EAAEwC,OAAOxD,KAAOgB,EAAEwC,OAAOC,W,uDAK5B,IACCZ,EAAW1D,KAAKsB,MAAhBoC,QAEDa,EAAWb,EAAQE,KACrB,yBAAK5B,UAAU,OAAOwC,MAAO,CAACb,MAAOD,EAAQC,QACxCD,EAAQE,MAEb,KAEJ,OACI,yBAAK5B,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,SACX,wBAAIA,UAAU,QAAd,SACA,0BAAMyC,SAAUzE,KAAK6D,OACjB,yBAAK7B,UAAU,QACX,yBAAKA,UAAU,cACX,2BAAOxB,KAAK,OAAOkE,SAAU1E,KAAKoE,cAAevD,KAAK,QAAQmB,UAAU,eAAe2C,YAAY,WAEvG,yBAAK3C,UAAU,cACX,2BAAOxB,KAAK,WAAWkE,SAAU1E,KAAKoE,cAAevD,KAAK,WAAWmB,UAAU,eAAe2C,YAAY,eAGjHJ,EACD,4BAAQ/D,KAAK,SAASwB,UAAU,mBAAhC,mB,GAlER9B,IAAMC,WAwFXiD,IAAe/B,aAbN,SAACC,GACrB,MAAO,CACHhB,MAAOgB,EAAME,KAAKlB,UAIC,SAACC,EAAD,GAAoC,IAAxBF,EAAuB,EAAvBA,WAAuB,EAAXC,MAC/C,MAAO,CACHyD,kBAAmB,SAACzD,GAAD,OAAWC,EAASH,EAAYC,EAAYC,EAAxBF,KACvC0D,gBAAiB,SAAC9C,GAAD,OAAaT,ER3FP,SAAC,GAAmB,IAAlBK,EAAiB,EAAjBA,KAAMN,EAAW,EAAXA,MAGnC,OAFAoB,aAAakD,QAAQ,WAAYtE,GAE1B,CAACE,KAAM,iBAAkBQ,QAAS,CAACJ,OAAMN,UQwFLwD,CAAgB9C,QAIjCK,CAA6CiC,IC3FrEuB,E,4MACFvD,MAAQ,CACJiC,KAAM,CACF1C,KAAM,GACN2C,MAAO,GACPC,SAAU,IAEdC,QAAS,CACLC,MAAO,MACPC,KAAM,K,EAIdkB,SAAW,SAACjD,GACRA,EAAEC,iBACmB,EAAK7B,MAAnBI,WACIyE,SAAS,EAAKxD,MAAMiC,MAAM9C,MAAK,SAAAC,GACtC,IAAMiD,EAASjD,EAAIsD,OAAmB,MAAV,QACxBtD,EAAIsD,OACJ,EAAKC,SAAS,CACVP,QAAS,CAACC,QAAOC,KAAMlD,EAAIgD,WAG/B,EAAKO,SAAS,CACVP,QAAS,CAACC,QAAOC,KAAMlD,EAAIgD,SAC3BH,KAAM,CAAC1C,KAAM,GAAI2C,MAAO,GAAIC,SAAU,SAG/CxC,OAAM,SAAAY,GACL/B,QAAQC,IAAI8B,O,EAIpBuC,cAAgB,SAACvC,GACb,EAAKoC,SAAS,CACVV,KAAK,eACE,EAAKjC,MAAMiC,KADd,eAEC1B,EAAEwC,OAAOxD,KAAOgB,EAAEwC,OAAOC,W,uDAK5B,IACCZ,EAAW1D,KAAKsB,MAAhBoC,QAEDa,EAAWb,EAAQE,KACrB,yBAAK5B,UAAU,OAAOwC,MAAO,CAACb,MAAOD,EAAQC,QACxCD,EAAQE,MAEb,KAEJ,OACI,yBAAK5B,UAAU,OACX,yBAAKA,UAAU,SACX,wBAAIA,UAAU,QAAd,YACA,0BAAMyC,SAAUzE,KAAK8E,UACjB,yBAAK9C,UAAU,QACX,yBAAKA,UAAU,cACX,2BAAOxB,KAAK,OAAOkE,SAAU1E,KAAKoE,cAAevD,KAAK,OAAOmB,UAAU,eAAe2C,YAAY,OAAOL,MAAOtE,KAAKsB,MAAMiC,KAAK1C,QAEpI,yBAAKmB,UAAU,cACX,2BAAOxB,KAAK,OAAOkE,SAAU1E,KAAKoE,cAAevD,KAAK,QAAQmB,UAAU,eAAe2C,YAAY,QAAQL,MAAOtE,KAAKsB,MAAMiC,KAAKC,SAEtI,yBAAKxB,UAAU,cACX,2BAAOxB,KAAK,WAAWkE,SAAU1E,KAAKoE,cAAevD,KAAK,WAAWmB,UAAU,eAAe2C,YAAY,WAAWL,MAAOtE,KAAKsB,MAAMiC,KAAKE,aAGnJc,EACD,4BAAQ/D,KAAK,SAASwB,UAAU,mBAAhC,mB,GApED9B,IAAMC,WAsFdiD,IAAe/B,aAVN,SAACC,GACrB,MAAO,MAGgB,SAACf,GACxB,MAAO,CACHwE,UAAW,gBAIW1D,CAA6CwD,I,QCnD5DG,eApCM,SAAC/E,GAAW,IACtBgF,EAA0BhF,EAA1BgF,aAAcC,EAAYjF,EAAZiF,SAErB,OACI,wBAAIlD,UAAU,0BACTiD,EAAa7C,KAAI,SAAC+C,EAAM7C,GACrB,OACI,wBAAIC,IAAKD,EAAKN,UAAU,mBACpB,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,yBACX,yBAAKA,UAAU,wBACX,yBAAKA,UAAU,+BAEnB,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,sBAAqB,gCAASmD,EAAKtE,OAClD,yBAAKmB,UAAU,sBAAsBmD,EAAKvB,QAGlD,yBAAK5B,UAAU,yBACVmD,EAAKC,QACF,4BAAQ3C,QAAS,kBAAMyC,EAASC,EAAKrE,KAAKkB,UAAU,qCAChD,uBAAGA,UAAU,yBAEjB,KACJ,4BAAQS,QAAS,kBAAMyC,EAASC,EAAKrE,KAAKkB,UAAU,2CAChD,uBAAGA,UAAU,4BCRlCqD,EAlBC,WACZ,OACI,yBAAKrD,UAAU,gCACX,yBAAKA,UAAU,mCACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,YAEnB,yBAAKA,UAAU,aACX,yBAAKA,UAAU,YAEnB,yBAAKA,UAAU,wBACX,yBAAKA,UAAU,e,OCVtBsD,EAAsB,SAACjF,GAAD,OAAgB,SAACS,GAAD,OAAQ,SAACP,GAHxB,IAACS,EAIjCT,EAJ8C,CAACC,KAAM,iBAAkBQ,YAMvEX,EAAWkF,gBAAgBzE,GAAIL,MAAK,SAAAC,GAChCH,EAN4B,SAACS,GAAD,MAAc,CAACR,KAAM,yBAA0BQ,WAMlEwE,CAAqB9E,EAAI+E,iBAI7BC,EAAsB,SAAC1E,GAAD,MAAc,CAACR,KAAM,iBAAkBQ,YAC7D2E,EAAqB,SAACC,GAAD,MAAW,CAACpF,KAAM,uBAAwBQ,QAAS4E,IACxEC,EAAmB,SAAC,GAAD,MAAW,CAACrF,KAAM,qBAAsBQ,QAAxC,EAAEF,KCTrBgF,EAAY,SAACzF,GAAD,OAAgB,SAACS,EAAIiF,GAAL,OAAoB,SAACxF,GAG1D,OAFAA,EAH2C,CAACC,KAAM,eAK3CH,EAAW2F,gBAAgBlF,EAAIiF,GAAYtF,MAAK,SAAAC,GACnDH,EALsC,CAACC,KAAM,qBAAsBQ,QAKzCN,IAC1BH,EAASmF,EAAoB,CAAC5E,GAAIiF,EAAYX,SAAS,EAAOa,MAAM,WAI/DC,EAAyB,SAAC,GAAD,MAAuB,CAAC1F,KAAM,qBAAsBQ,QAAS,CAACmF,OAA9D,EAAEA,OAAoEC,OAAtE,EAAUA,UACnCC,EAAiB,SAAC,GAAD,MAAmB,CAAC7F,KAAM,mBAAoBQ,QAAS,CAACH,KAAxD,EAAEA,KAA4D+C,KAA9D,EAAQA,QAEzB0C,EAAoB,SAACjG,GAAD,OAAgB,SAACkG,EAAW/E,EAAMkC,EAAS8C,GAA3B,OAAoC,SAACjG,GAClF,IAAMwF,EAAaQ,EAAUzF,GAEvB2F,EAAS,CACXC,OAAQ,OACRC,QAAS,CACL,eAAgB,mBAChB,cAAgB,UAAhB,OAA2BnF,EAAKlB,QAEpCsG,KAAMC,KAAKC,UAAU,CAAChG,GAAIiF,EAAYgB,SAAUvF,EAAKV,GAAI4C,UAAS6C,YAAWC,UAGjF,OAAOnG,EAAW2G,WAAW,cAAeP,MC8EjCrD,IAAe/B,aAfN,SAACC,GACrB,MAAO,CACHE,KAAMF,EAAME,SAIO,SAACjB,EAAD,GAA6B,IAAjBF,EAAgB,EAAhBA,WACnC,OAAO4G,YAAmB,CACtBnB,UAAWA,EAAUzF,GACrB6F,yBACAG,iBACAC,kBAAmBA,EAAkBjG,IACtCE,KAGuBc,EAjGjB,SAACpB,GAAW,IACdiH,EACkFjH,EADlFiH,eAAgBC,EACkElH,EADlEkH,YAAa3F,EACqDvB,EADrDuB,KAChC4F,EAAqFnH,EAArFmH,YAAatB,EAAwE7F,EAAxE6F,UAAWI,EAA6DjG,EAA7DiG,uBAAwBI,EAAqCrG,EAArCqG,kBAFhC,GAEqErG,EAAlBoG,eAEzCgB,mBAAS,KAJnB,mBAIb3D,EAJa,KAIJ4D,EAJI,KAKdC,EAAeC,aAAY,SAAAlG,GAAK,OAAIA,EAAMmG,KAAKhC,YAC/Cc,EAAYiB,aAAY,SAAAlG,GAAK,OAAIA,EAAMmG,KAAKlB,aAC5CmB,EAAgBC,iBAAO,MAE7BC,qBAAU,WAIN,OAHA1B,EAAuB,CAACC,QAAQ,EAAMC,OAAQgB,IAC9CtB,EAAUtE,EAAKV,GAAIsG,GAEZ,WACHlB,EAAuB,CAACC,QAAQ,EAAOC,OAAQ,UAEpD,IAEHwB,qBAAU,WACNF,EAAcG,QAAQC,UAAYJ,EAAcG,QAAQE,eACzD,CAACR,IAiCJ,OACI,yBAAKvF,UAAU,QACX,yBAAKA,UAAU,cACX,4BAAQS,QAASyE,EAAgBlF,UAAU,mBAA3C,SAEJ,yBAAKA,UAAU,eACX,yBAAKA,UAAU,cACTmF,EAAc,kBAAC,EAAD,MAnBxB,yBAAKa,IAAKN,EAAe1F,UAAU,cAC7BuF,EAAanF,KAAI,SAAC6F,EAAK3F,GACrB,OACI,yBAAKC,IAAKD,EAAKN,UAAU,cACrB,gCAASiG,EAAIpH,MADjB,KACkCoH,EAAIrE,UAgB1C,yBAAK5B,UAAU,iBACX,0BAAMyC,SAjCP,SAAC5C,GAChBA,EAAEC,iBACF,IAAMoG,EAAgB,CAClBpH,GAAIsG,EACJvG,KAAM0F,EAAU1F,OAXJ,SAAC+C,EAAM2C,GACvB,IAAM4B,EAAa,CAACtH,KAAMW,EAAKX,KAAM+C,QAC/B4C,EAAO4B,KAAKC,MAClB/B,EAAkBC,EAAW/E,EAAM2G,EAAY3B,GAC/CrF,EAAOY,KAAK,cAAe,CAACuG,KAAMlB,EAAamB,OAAQ/G,EAAKV,GAAIyF,YAAWC,OAAM9C,QAASyE,IAS1FK,CAAY9E,EAASwE,GACrBZ,EAAW,KA0BiCtF,UAAU,gBAClC,yBAAKA,UAAU,sBACX,2BAAO0C,SAAU,SAAC7C,GAAD,OAAOyF,EAAWzF,EAAEwC,OAAOC,QAAQ9D,KAAK,OAAOwB,UAAU,eAAesC,MAAOZ,KAEpG,yBAAK1B,UAAU,uBACX,4BAAQA,UAAU,mBAAlB,YAKhB,yBAAKA,UAAU,eACX,yBAAKA,UAAU,mBACVuE,EAAU1F,MAAQ,kBAAC,EAAD,c,iBCG5BuC,G,OAAAA,EAAe/B,aAdN,SAACC,GACrB,MAAO,CACHE,KAAMF,EAAME,KACZiE,SAAUnE,EAAMmE,aAIG,SAAClF,EAAD,GAA6B,IAAjBF,EAAgB,EAAhBA,WACnC,OAAO4G,YAAmB,CACtB3B,oBAAqBA,EAAoBjF,GACzCsF,sBACDpF,KAGuBc,CAA6C2D,aAxE1D,SAAC/E,GAAW,IAClBuB,EAA6BvB,EAA7BuB,KAAM8D,EAAuBrF,EAAvBqF,oBACPmD,EAAcC,IAAYC,MAAM1I,EAAM2I,SAASC,QAEjDC,GAAW,EACXL,EAAYhB,OACZqB,GAAW,GANS,MAeAzB,mBAASyB,GAfT,mBAejBrB,EAfiB,KAeXsB,EAfW,KAgBlB5B,EAAcK,aAAY,SAAClG,GAAD,OAAWA,EAAMmG,KAAKuB,WAChDC,EAAkBzB,aAAY,SAAClG,GAAD,OAAWA,EAAMmE,SAASuD,WACxD/D,EAAeuC,aAAY,SAAClG,GAAD,OAAWA,EAAMmE,SAASA,YAE3DmC,qBAAU,WACNtC,EAAoB9D,EAAKV,MAC1B,IAEH,IAUMoI,EAAkBzB,EAKlB,kBAAC,EAAD,CAAMP,eAVW,WACnBjH,EAAMiE,QAAQC,KAAd,MACA4E,GAAQ,IASA3B,YAAaqB,EAAYhB,KACzBN,YAAaA,IANrB,kBAAC,EAAD,CACIjC,SAAU,SAACpE,GAAD,OAXdiI,EAAQ,CAACI,MAAM,EAAMpD,WADPA,EAYiBjF,SAV/Bb,EAAMiE,QAAQC,KAAd,gBAA4B4B,IAFf,IAACA,GAaVd,aAAcA,IAOtB,OACI,yBAAKjD,UAAU,aACX,wBAAIA,UAAU,QAAd,YACEiH,EAAkB,kBAAC,EAAD,MAChB,yBAAKjH,UAAU,YACX,yBAAKA,UAAU,kBACVkH,W,iBC8MV9F,G,OAAAA,EAAe/B,aANN,SAACC,GACrB,MAAO,CACHE,KAAMF,EAAME,QAIUH,EAxQnB,SAACpB,GAAW,IACZI,EAAcJ,EAAdI,WADW,EAEmBJ,EAAMuB,KAApCX,EAFW,EAEXA,KAAMC,EAFK,EAELA,GAAIR,EAFC,EAEDA,MAAOS,EAFN,EAEMA,UAClBqI,EAAkBzB,iBAAO,MAHb,EAK8BN,oBAAS,GALvC,mBAKXgC,EALW,KAKOC,EALP,OAMkCjC,mBAAS,MAN3C,mBAMXkC,EANW,KAMSC,EANT,KA0BZC,EAAkB,WACpBH,GAAoB,GACpBF,EAAgBvB,QAAQvD,MAAQ,MAgB9BoF,EAAgBC,IAAG,CACrB,wBAAwB,EACxB,OAAUN,IAGd,OACI,yBAAKrH,UAAU,WACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,sBAAsBwC,MAAO,CAACoF,gBAAiB,oEAG9D,yBAAK5H,UAAU,iBACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,uBAAf,KAGA,yBAAKA,UAAU,qBAAf,cAIJ,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,uBAAf,KAGA,yBAAKA,UAAU,qBAAf,cAIJ,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,uBAAf,KAGA,yBAAKA,UAAU,qBAAf,WAIJ,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,uBAAf,KAGA,yBAAKA,UAAU,qBAAf,cAQpB,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,wBAAwBwC,MAAO,CAACoF,gBAAgB,eAAD,OAAiB7I,EAAjB,OAC1D,yBAAKiB,UAAW0H,GACZ,0BAAMjF,SApEb,SAAC5C,GAClBA,EAAEC,iBAEF,IAAMnB,EAAO,IAAIkJ,SACjBlJ,EAAKmJ,OAAO,SAAUV,EAAgBvB,QAAQkC,MAAM,IACpDpJ,EAAKmJ,OAAO,KAAMhJ,GAElBT,EAAW2J,aAAarJ,EAAML,GAAOG,MAAK,SAAAoB,GACtC/B,QAAQC,IAAI,mBACZ0J,QA2DkDzH,UAAU,eACpC,2BAAOA,UAAU,sBAAjB,qBAEI,2BAAOgG,IAAKoB,EAAiB1E,SA9F5C,SAAC7C,GAClB,IAAMoI,EAAOpI,EAAEwC,OAAO0F,MAAM,GAC5B,GAAIE,EAAM,CACNX,GAAoB,GAEpB,IAAMY,EAAS,IAAIC,WACnBD,EAAOE,cAAcH,GAErBC,EAAOG,UAAY,WACf,IAAMC,EAAeJ,EAAOK,OAC5Bf,EAAsBc,SAI1BhB,GAAoB,IAgF6D9I,KAAK,UAE9D,yBAAKwB,UAAU,wBACX,yBAAKA,UAAU,uBAAuBwC,MAAO,CAACoF,gBAAgB,OAAD,OAASL,EAAT,QAG7D,yBAAKvH,UAAU,wBACX,yBAAKA,UAAU,sBACX,4BAAQxB,KAAK,SAASwB,UAAU,OAAhC,UAEJ,yBAAKA,UAAU,uBACX,yBAAKS,QAASgH,EAAiBzH,UAAU,kBAAzC,mBAUpC,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,iBAAiBnB,GAMhC,yBAAKmB,UAAU,iBACX,yBAAKA,UAAU,sBAGf,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,wBACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,qBACX,yBAAKA,UAAU,aACX,uBAAGA,UAAU,mBAAmBwI,cAAY,WAGpD,yBAAKxI,UAAU,qBACX,yBAAKA,UAAU,sBACf,8BAAU2C,YAAY,sBAAsB3C,UAAU,iBAAiBnB,KAAK,GAAGC,GAAG,GAAG2J,KAAK,KAAKC,KAAK,QAIpG,yBAAK1I,UAAU,wBACX,yBAAKA,UAAU,uBACX,4BAAQA,UAAU,OACd,uBAAGA,UAAU,kBACVwI,cAAY,WAGvB,yBAAKxI,UAAU,uBACX,4BAAQA,UAAU,OAAlB,aAMpB,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,6BACX,uBAAGA,UAAU,kBAAkBwI,cAAY,WAGnD,yBAAKxI,UAAU,sBACX,yBAAKA,UAAU,2BACX,0BAAMA,UAAU,sBAAhB,SADJ,mBAGA,yBAAKA,UAAU,4BAAf,eAIJ,yBAAKA,UAAU,uBACX,yBAAK2I,IAAI,8DAA8DC,IAAI,KAC3E,yBAAK5I,UAAU,aACX,yBAAKA,UAAU,uBACX,uBAAGA,UAAU,kBAAkBwI,cAAY,SAD/C,eAGA,yBAAKxI,UAAU,oBACX,uBAAGA,UAAU,gBAAgBwI,cAAY,SAD7C,iBAOhB,yBAAKxI,UAAU,sBACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,8BACX,uBAAGA,UAAU,eAAewI,cAAY,WAGhD,yBAAKxI,UAAU,sBACX,yBAAKA,UAAU,2BACX,0BAAMA,UAAU,sBAAhB,SADJ,sBAGA,yBAAKA,UAAU,4BAAf,eAIJ,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,yBAAf,+OAIJ,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,uBACX,uBAAGA,UAAU,kBAAkBwI,cAAY,SAD/C,gBAGA,yBAAKxI,UAAU,oBACX,uBAAGA,UAAU,gBAAgBwI,cAAY,SAD7C,6BC5M9CK,E,iLACiBC,EAAWC,EAAWC,GACrClL,QAAQC,IAAI+K,EAAW9K,KAAKC,S,gCAK5B,OADiBD,KAAKC,MAAduB,O,0CAIS,IAAD,SAC0CxB,KAAKC,MAAxDI,EADS,EACTA,WAAYqF,EADH,EACGA,oBAAqBW,EADxB,EACwBA,eAGxClF,EAAO8J,GAAG,cAAc,SAACtK,GACrB,IAAMa,EAAO,EAAK0J,UADY,EAEL,EAAKjL,MAAMwH,KAA7BtB,EAFuB,EAEvBA,OAAQC,EAFe,EAEfA,OACX+E,EAAOxK,EAAK4H,OAAO6C,aAAe5J,EAAKV,GAAGsK,WAGxC1H,EAAO,eAAO/C,EAAK+C,SAErByH,IACAzH,EAAQ7C,KAAOF,EAAK4F,UAAU1F,KAC9B6E,EAAoB,CAAC5E,GAAIH,EAAK2H,KAAMlD,SAAS,EAAO1B,UAASuC,MAAM,MAGnEE,GAAWC,EAAOgF,aAAezK,EAAK2H,KAAK8C,YAAchF,EAAOgF,aAAezK,EAAK4H,OAAO6C,WAQtFD,IACDE,OAAOC,EAAEC,MAAM,CAACC,KAAK,MAAD,OAAQ7K,EAAK+C,QAAQ7C,KAArB,iBAAkCF,EAAK+C,QAAQE,QACnE8B,EAAoB,CAAC5E,GAAIH,EAAK4H,OAAQnD,SAAS,EAAM1B,UAASuC,MAAM,MATxEI,EAAe1F,EAAK+C,SAEfyH,IACD9K,EAAWoL,eAAejK,EAAKV,GAAIH,EAAK4H,OAAQ5H,EAAK6F,MACrDd,EAAoB,CAAC5E,GAAIH,EAAK4H,OAAQnD,SAAS,EAAO1B,UAASuC,MAAM,W,mEA8CjF,OACI,yBAAKjE,UAAU,OACX,kBAAC,EAAD,MACA,yBAAKA,UAAU,gBACX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO0J,KAAK,IAAIxJ,OAAK,EAACW,UAAW8I,IACjC,kBAAC,EAAD,CAAczJ,OAAK,EAACwJ,KAAK,QAAQ7I,UAAWhD,IAC5C,kBAAC,IAAD,CAAO6L,KAAK,SAAS7I,UAAWF,IAChC,kBAAC,EAAD,CAAcT,OAAK,EAACwJ,KAAK,MAAM7I,UAAW+I,IAC1C,kBAAC,EAAD,CAAc1J,OAAK,EAACwJ,KAAK,aAAa7I,UAAWgJ,IACjD,kBAAC,IAAD,CAAOH,KAAK,SAAS7I,UAAWS,IAChC,kBAAC,IAAD,CAAOoI,KAAK,YAAY7I,UAAWgC,IACnC,kBAAC,IAAD,CAAO6G,KAAK,QAAQI,OAAQ,WACxB,OAAO,mD,GA3FjB5L,IAAMC,WAoHTiD,IAAe/B,aAhBN,SAACC,GACrB,MAAO,CACHyK,cAAezK,EAAMmE,SAASsG,cAC9BvK,KAAMF,EAAME,KACZiG,KAAMnG,EAAMmG,SAIO,SAAClH,GACxB,OAAO0G,YAAmB,CACtBvB,sBACAG,mBACAQ,kBACD9F,KAGuBc,CAA6CwJ,IC5HvDmB,QACW,cAA7BX,OAAOzC,SAASqD,UAEe,UAA7BZ,OAAOzC,SAASqD,UAEhBZ,OAAOzC,SAASqD,SAASC,MACvB,2D,aCXSC,G,kDANX,aAAsB,IAAD,iDAANC,EAAM,yBAANA,EAAM,uBACjB,+BAASA,KACJC,OAAS,IAFG,E,uBADOC,QCuFjBC,G,4DApFXC,IAAM,Q,KA2CNpM,YAAc,SAACE,GACX,OAAO,EAAK0G,WAAW,WAAY,CAC/BN,OAAQ,OACRC,QAAS,CACL,eAAgB,mBAChB,cAAgB,UAAhB,OAA2BrG,O,KAKvC0F,gBAAkB,SAAClF,EAAIiF,GACnB,OAAO,EAAKiB,WAAW,eAAgB,CACnCN,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CAAChG,KAAIiF,kB,KAIlCR,gBAAkB,SAACzE,GACf,OAAO,EAAKkG,WAAW,eAAgB,CACnCN,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CAAChG,U,uDAnEnB2L,GAAmB,IAAD,OAAbhG,EAAa,uDAAJ,GACrB,OAAO,IAAIiG,SAAQ,SAACC,EAASC,GACzBC,MAAM,GAAD,OAAI,EAAKL,KAAT,OAAeC,GAAOhG,GAAQhG,MAAK,SAAAC,GAEpC,OADmB,MAAfA,EAAI2L,QAAgBO,EAAO,IAAIT,IAC5BzL,EAAIoM,UACZrM,MAAK,SAAAC,GAAG,OAAIiM,EAAQjM,W,4BAIzBC,GACF,OAAOX,KAAKgH,WAAW,QAAS,CAC5BN,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUnG,O,+BAIpBA,GAEL,OADAb,QAAQC,IAAI8G,KAAKC,UAAUnG,IACpBX,KAAKgH,WAAW,WAAY,CAC/BN,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUnG,O,mCAIhBoM,EAAUzM,GACnB,OAAON,KAAKgH,WAAW,eAAgB,CACnCN,OAAQ,OACRC,QAAS,CAEL,cAAgB,UAAhB,OAA2BrG,IAE/BsG,KAAMmG,M,qCAkCCjM,EAAIiF,EAAYS,GAC3B,OAAOxG,KAAKgH,WAAW,OAAQ,CAC3BN,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CAAChG,KAAIiF,aAAYS,e,KClF5CwG,I,OAAe,CACjBnM,KAAM,KACND,MAAM,EACNN,MAAO,KACPQ,GAAI,KACJC,UAAW,OAqBAkM,GAlBK,WAAmC,IAAlC3L,EAAiC,uDAAzB0L,GAAcE,EAAW,uCAClD,OAAQA,EAAO1M,MACX,IAAK,mBACL,IAAK,qBACL,IAAK,iBACD,OAAO,eACAc,EADP,GAEO4L,EAAOlM,SAGlB,IAAK,mBACD,OAAO,eAAIgM,IAEf,QACI,OAAO1L,I,SCtBb0L,GAAe,CACjBhE,SAAS,EACTvD,SAAU,IAGR0H,GAAgB,SAACtM,EAAM+C,EAAM9C,EAAIsE,GAAjB,MAA8B,CAACvE,OAAM+C,OAAM9C,KAAIsE,YAmGtDgI,GAjGS,WAAmC,IAAlC9L,EAAiC,uDAAzB0L,GAAcE,EAAW,uCACtD,OAAQA,EAAO1M,MACX,IAAK,iBACD,MAAO,CACHwI,SAAS,EACTvD,SAAU,IAGlB,IAAK,yBACD,MAAO,CACHuD,SAAS,EACTvD,SAAUyH,EAAOlM,SAGzB,IAAK,iBAAmB,IAAD,EACyBkM,EAAOlM,QAA5CF,EADY,EACZA,GAAIsE,EADQ,EACRA,QAAS1B,EADD,EACCA,QADD,IACUuC,YADV,SAGboH,EAAQ/L,EAAMmE,SAAS6H,WAAU,SAAAC,GAAC,OAAIA,EAAEzM,KAAOA,KACjD0M,EAAe,aAAOlM,EAAMmE,UAEhC,GAAIQ,EAAM,CAEN,IAAIpF,EAAO6C,EAAQ7C,KACf+C,EAAOF,EAAQE,KAEfyJ,GAAS,IACTxM,EAAO2M,EAAgBH,GAAOxM,KAC9B2M,EAAkBA,EAAgBC,QAAO,SAAAF,GAAC,OAAIA,EAAEzM,KAAOA,MAE3D0M,EAAgBE,QAAQP,GAActM,EAAM+C,EAAM9C,EAAIsE,SAElDiI,GAAS,IACTG,EAAgBH,GAAOjI,QAAUA,GAIzC,OAAO,eACA9D,EADP,CAEImE,SAAU+H,IAgDlB,IAAK,uBACD,OAAO,eACAlM,EADP,CAEImE,SAAUyH,EAAOlM,UAGzB,QACI,OAAOM,ICpGb0L,GAAe,CACjBvH,SAAU,GACVuD,SAAS,EACT7C,QAAQ,EACRC,OAAQ,KACRG,UAAW,IAwCAoH,GArCK,WAAmC,IAAlCrM,EAAiC,uDAAzB0L,GAAcE,EAAW,uCAClD,OAAQA,EAAO1M,MACX,IAAK,aACD,OAAO,eACAc,EADP,CAEI0H,SAAS,IAGjB,IAAK,qBACD,OAAO,eACA1H,EADP,CAEImE,SAAUyH,EAAOlM,QAAQyE,SACzBc,UAAW,CACP1F,KAAMqM,EAAOlM,QAAQuF,UAAU1F,MAEnCmI,SAAS,IAGjB,IAAK,qBAAL,MAC4CkE,EAAOlM,QADnD,IACWmF,cADX,aAC2BC,cAD3B,MACoC,KADpC,EAEI,OAAO,eACA9E,EADP,CAEI6E,OAAQA,EACRC,OAAQA,IAGhB,IAAK,mBACD,OAAO,eACA9E,EADP,CAEImE,SAAS,GAAD,oBAAMnE,EAAMmE,UAAZ,CAAsByH,EAAOlM,YAG7C,QACI,OAAOM,IC9BJsM,GANCC,YAAgB,CAC5BrM,KAAMyL,GACNxH,SAAU2H,GACV3F,KAAMkG,K,8BCLS,IAAIpB,GCGvB,IAAMuB,GAAiBC,eAEjBC,GAAgB3C,OAAO4C,8BAAgC5C,OAAO4C,+BAWrDC,GAJDC,YAAYP,GAASQ,YAAQC,YAAgBC,KAAYR,IALjD,kBAAM,SAACS,GAAD,OAAU,SAACrB,GAEnC,OADApN,QAAQC,IAAImN,GACLqB,EAAKrB,QAGuFc,KCCjG3N,GAAa,IAAIkM,GAEjBjM,GAAQoB,aAAa8M,QAAQ,YAiBnC,SAASC,KACLC,IAAS5C,OACL,kBAAC,IAAM6C,WAAP,KACI,kBAAC,IAAD,CAAUT,MAAOA,IACb,kBAAClL,EAAD,CAAoBsB,MAAOjE,IACvB,kBAAC,IAAD,KACI,kBAAC,EAAD,UAKhBuO,SAASC,eAAe,SAvBhC1N,EAAO8J,GAAG,WAAW,WACb3K,GACA4N,GAAM3N,SAASH,EAAYC,GAAYC,GAAxBF,IAAkCK,MAAK,SAAAoB,GAClD4M,KACA,IAAM3N,EAAKoN,GAAMY,WAAWtN,KAAKV,GACjCK,EAAOY,KAAK,YAAa,CAACjB,UAG9B2N,QToGF,kBAAmBM,WACrBA,UAAUC,cAAcC,MACrBxO,MAAK,SAAAyO,GACJA,EAAaC,gBAEdlO,OAAM,SAAAmO,GACLtP,QAAQsP,MAAMA,EAAM1L,a","file":"static/js/main.30a845a1.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\nclass Cart extends React.Component {\r\n    componentDidMount() {\r\n        console.log(this.props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>cart</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Cart;\r\n","export const actionAuthorize = ({auth, token}) => {\r\n    localStorage.setItem('userData', token);\r\n\r\n    return {type: 'USER_AUTHORIZE', payload: {auth, token}};\r\n};\r\n\r\nexport const actionUnauthorize = () => {\r\n    localStorage.removeItem('userData');\r\n\r\n    return {type: 'USER_UNAUTHORIZE'};\r\n};\r\n\r\nexport const actionGetUserDataSuccess = (payload) => ({type: 'GET_USER_SUCCESS', payload});\r\nexport const actionGetUserDataFailure = () => ({type: 'GET_USER_FAILURE'});\r\nexport const actionGetUserData = () => ({type: 'GET_USER'});\r\n\r\nexport const getUserData = (apiService, token) => () => (dispatch) => {\r\n    dispatch(actionGetUserData());\r\n\r\n    return apiService.getUserData(token).then(res => {\r\n        const data = {auth: true, token, name: res.data.name, id: res.data.id, avatarUrl: res.data.avatarUrl};\r\n        return dispatch(actionGetUserDataSuccess(data));\r\n    }).catch(err => {\r\n        dispatch(actionGetUserDataFailure());\r\n    })\r\n};\r\n\r\nexport const auth = (isAuth) => ({type: 'AUTH', payload: isAuth});\r\n","import openSocket from 'socket.io-client';\r\nconst socket = openSocket('http://localhost:3000');\r\n\r\nexport default socket;\r\n","import React from 'react'\r\nimport {Link, NavLink} from 'react-router-dom'\r\nimport {connect} from 'react-redux'\r\nimport {actionUnauthorize} from \"../../store/actions\";\r\nimport './style.css'\r\n\r\nimport socket from \"../../socket\";\r\n\r\nconst Header = ({isAuthenticated, actionUnauthorize, user}) => {\r\n    const logout = (e) => {\r\n        e.preventDefault();\r\n        socket.emit('leaveRoom', {id: user.id});\r\n        actionUnauthorize();\r\n    };\r\n\r\n    const renderRight = () => {\r\n        if (isAuthenticated) {\r\n            return (\r\n                <ul className=\"navbar-nav ml-3 right\">\r\n                    <li className=\"nav-item\">\r\n                        <NavLink onClick={logout} activeClassName='active' className=\"nav-link ml-auto\" to=\"/logout\">Logout</NavLink>\r\n                    </li>\r\n                </ul>\r\n            )\r\n        } else {\r\n            return (\r\n                <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\r\n                    <li className=\"nav-item\">\r\n                        <NavLink activeClassName='active' className=\"nav-link ml-auto\" to=\"/login\">Login</NavLink>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <NavLink activeClassName='active' className=\"nav-link ml-2\" to=\"/register\">Register</NavLink>\r\n                    </li>\r\n                </ul>\r\n            )\r\n        }\r\n    };\r\n\r\n    const items = [\r\n        {exact: true, to: '/', name: 'Home', isAuth: false},\r\n        {exact: true, to: '/me', name: 'Me', isAuth: true},\r\n        {exact: false, to: '/store', name: 'Store', isAuth: false},\r\n        {exact: false, to: '/messages/', name: 'Messages', isAuth: true},\r\n    ];\r\n\r\n    return (\r\n        <header className=\"header\">\r\n            <nav>\r\n                <div className=\"nav-wrapper\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col s12\">\r\n                                <Link className=\"navbar-brand left\" to=\"/\">Art's Store</Link>\r\n                                <ul id=\"nav-mobile\" className=\"left hide-on-med-and-down\">\r\n                                    {\r\n                                        items.map((link, idx) => {\r\n                                            if (!isAuthenticated && link.isAuth) {\r\n                                                return null;\r\n                                            }\r\n\r\n                                            return (\r\n                                                <li key={idx} className=\"nav-item\">\r\n                                                    <NavLink activeClassName='active' className=\"nav-link\" exact={link.exact} to={link.to}>{link.name}</NavLink>\r\n                                                </li>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </ul>\r\n                                { renderRight() }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n            {/*<nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">*/}\r\n            {/*    <Link className=\"navbar-brand\" to=\"/\">Art's Store</Link>*/}\r\n            {/*    <ul className=\"navbar-nav ml-3 mr-auto\">*/}\r\n            {/*        {*/}\r\n            {/*            items.map((link, idx) => {*/}\r\n            {/*                if (!isAuthenticated && link.isAuth) {*/}\r\n            {/*                    return null;*/}\r\n            {/*                }*/}\r\n\r\n            {/*                return (*/}\r\n            {/*                    <li key={idx} className=\"nav-item\">*/}\r\n            {/*                        <NavLink activeClassName='active' className=\"nav-link\" exact={link.exact} to={link.to}>{link.name}</NavLink>*/}\r\n            {/*                    </li>*/}\r\n            {/*                )*/}\r\n            {/*            })*/}\r\n            {/*        }*/}\r\n\r\n            {/*        /!*<li className=\"nav-item ml-1\">*!/*/}\r\n            {/*        /!*    <NavLink activeClassName='active' className=\"nav-link\" to=\"/cart\">Cart</NavLink>*!/*/}\r\n            {/*        /!*</li>*!/*/}\r\n            {/*        /!*<li className=\"nav-item ml-1\">*!/*/}\r\n            {/*        /!*    <NavLink activeClassName='active' className=\"nav-link\" to=\"/test\">Test</NavLink>*!/*/}\r\n            {/*        /!*</li>*!/*/}\r\n            {/*    </ul>*/}\r\n            {/*    { renderRight() }*/}\r\n            {/*</nav>*/}\r\n        </header>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isAuthenticated: state.user.auth,\r\n        user: state.user\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        actionUnauthorize: () => dispatch(actionUnauthorize())\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header)\r\n","import React, {useCallback, useEffect, useState} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nconst Home = ({user}) => {\r\n    const greeting = user.auth ? <p>Hello, <b>{user.name}</b></p> : <p>Hello, Guest!</p>;\r\n\r\n    return (\r\n        <div>\r\n            <h3 className=\"mb-3\">Home page 2</h3>\r\n            {greeting}\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n      return {\r\n          user: state.user\r\n      }\r\n};\r\n\r\nexport default connect(mapStateToProps)(Home)\r\n","import React from 'react'\r\n\r\nclass Store extends React.Component {\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <h3>Store page</h3>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Store;\r\n","import React from \"react\"\r\nimport {Route, Redirect} from 'react-router-dom'\r\nimport {connect} from 'react-redux'\r\n\r\nconst PrivateRoute = ({component: ChildComponent, auth, ...rest}) => {\r\n    return (\r\n        <Route>\r\n            { auth ? <ChildComponent {...rest} /> : <Redirect to=\"/login\" />}\r\n        </Route>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        auth: state.user.auth\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute);\r\n","import React from \"react\";\r\n\r\nconst {\r\n    Provider: ApiServiceProvider,\r\n    Consumer: ApiServiceConsumer\r\n} = React.createContext();\r\n\r\nexport {\r\n    ApiServiceProvider,\r\n    ApiServiceConsumer\r\n}\r\n","import React from \"react\";\r\nimport {ApiServiceConsumer} from \"../context/apiService\";\r\n\r\nconst withApiService = (Wrapped) => {\r\n    return (props) => {\r\n        return <ApiServiceConsumer>\r\n            {\r\n                (apiService) => {\r\n                    return <Wrapped {...props} apiService={apiService}/>\r\n                }\r\n            }\r\n        </ApiServiceConsumer>\r\n    }\r\n};\r\n\r\nexport default withApiService;\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {withApiService} from '../hoc';\r\nimport {actionAuthorize, getUserData} from \"../../store/actions\";\r\n\r\nimport socket from \"../../socket\";\r\n\r\nclass Login extends React.Component {\r\n    state = {\r\n        form: {\r\n            email: '',\r\n            password: ''\r\n        },\r\n        message: {\r\n            color: 'red',\r\n            text: ''\r\n        }\r\n    };\r\n\r\n    login = (e) => {\r\n        e.preventDefault();\r\n        const {apiService, actionAuthorize, actionGetUserData} = this.props;\r\n        apiService.login(this.state.form).then(res => {\r\n            if (res.errors) {\r\n                this.setState({\r\n                    message: {color: 'red', text: res.message}\r\n                });\r\n            } else {\r\n                const token = res.token;\r\n                if (token) {\r\n                    actionAuthorize({auth: true, token});\r\n                    actionGetUserData(token).then((e) => {\r\n                        socket.emit('connected', {id: e.payload.id});\r\n                        this.props.history.push('/me');\r\n                    });\r\n                }\r\n            }\r\n        })\r\n    };\r\n\r\n    onInputChange = (e) => {\r\n        this.setState({\r\n            form: {\r\n                ...this.state.form,\r\n                [e.target.name]: e.target.value\r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const {message} = this.state;\r\n\r\n        const feedback = message.text ? (\r\n            <div className=\"mb-3\" style={{color: message.color}}>\r\n                {message.text}\r\n            </div>\r\n        ) : null;\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-4\">\r\n                        <h3 className=\"mb-4\">Login</h3>\r\n                        <form onSubmit={this.login}>\r\n                            <div className=\"mb-3\">\r\n                                <div className=\"form-group\">\r\n                                    <input type=\"text\" onChange={this.onInputChange} name=\"email\" className=\"form-control\" placeholder=\"Email\" />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <input type=\"password\" onChange={this.onInputChange} name=\"password\" className=\"form-control\" placeholder=\"Password\" />\r\n                                </div>\r\n                            </div>\r\n                            {feedback}\r\n                            <button type=\"submit\" className=\"btn btn-primary\">Sign in</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        token: state.user.token\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, {apiService, token}) => {\r\n    return {\r\n        actionGetUserData: (token) => dispatch(getUserData(apiService, token)()),\r\n        actionAuthorize: (payload) => dispatch(actionAuthorize(payload))\r\n    }\r\n};\r\n\r\nexport default withApiService(connect(mapStateToProps, mapDispatchToProps)(Login));\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {withApiService} from '../hoc';\r\n\r\nclass Register extends React.Component {\r\n    state = {\r\n        form: {\r\n            name: '',\r\n            email: '',\r\n            password: ''\r\n        },\r\n        message: {\r\n            color: 'red',\r\n            text: ''\r\n        }\r\n    };\r\n\r\n    register = (e) => {\r\n        e.preventDefault();\r\n        const {apiService} = this.props;\r\n        apiService.register(this.state.form).then(res => {\r\n            const color = !res.errors ? 'green' : 'red';\r\n            if (res.errors) {\r\n                this.setState({\r\n                    message: {color, text: res.message}\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    message: {color, text: res.message},\r\n                    form: {name: '', email: '', password: ''}\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            console.log(e);\r\n        })\r\n    };\r\n\r\n    onInputChange = (e) => {\r\n        this.setState({\r\n            form: {\r\n                ...this.state.form,\r\n                [e.target.name]: e.target.value\r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const {message} = this.state;\r\n\r\n        const feedback = message.text ? (\r\n            <div className=\"mb-3\" style={{color: message.color}}>\r\n                {message.text}\r\n            </div>\r\n        ) : null;\r\n\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-4\">\r\n                    <h3 className=\"mb-4\">Register</h3>\r\n                    <form onSubmit={this.register}>\r\n                        <div className=\"mb-3\">\r\n                            <div className=\"form-group\">\r\n                                <input type=\"text\" onChange={this.onInputChange} name=\"name\" className=\"form-control\" placeholder=\"Name\" value={this.state.form.name} />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <input type=\"text\" onChange={this.onInputChange} name=\"email\" className=\"form-control\" placeholder=\"Email\" value={this.state.form.email} />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <input type=\"password\" onChange={this.onInputChange} name=\"password\" className=\"form-control\" placeholder=\"Password\" value={this.state.form.password} />\r\n                            </div>\r\n                        </div>\r\n                        {feedback}\r\n                        <button type=\"submit\" className=\"btn btn-primary\">Register</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {}\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        checkAuth: () => {}\r\n    }\r\n};\r\n\r\nexport default withApiService(connect(mapStateToProps, mapDispatchToProps)(Register));\r\n","import React from \"react\";\r\nimport {withRouter} from 'react-router-dom'\r\n\r\nconst MessagesList = (props) => {\r\n    const {messagesList, openChat} = props;\r\n\r\n    return (\r\n        <ul className=\"collection with-header\">\r\n            {messagesList.map((item, idx) => {\r\n                return (\r\n                    <li key={idx} className=\"collection-item\">\r\n                        <div className=\"message-item\">\r\n                            <div className=\"message-item__content\">\r\n                                <div className=\"message-item__avatar\">\r\n                                    <div className=\"message-item__avatar-icon\"></div>\r\n                                </div>\r\n                                <div className=\"message-item__info\">\r\n                                    <div className=\"message-item__name\"><strong>{item.name}</strong></div>\r\n                                    <div className=\"message-item__text\">{item.text}</div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"message-item__actions\">\r\n                                {item.updated ? (\r\n                                    <button onClick={() => openChat(item.id)} className=\"btn btn-outline btn-danger btn-sm\">\r\n                                        <i className=\"fa fa-envelope-open\" />\r\n                                    </button>\r\n                                ) : null}\r\n                                <button onClick={() => openChat(item.id)} className=\"btn btn-outline btn-success btn-sm ml-3\">\r\n                                    <i className=\"fa fa-weixin\" />\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </li>\r\n                )\r\n            })}\r\n        </ul>\r\n    )\r\n};\r\n\r\nexport default withRouter(MessagesList)\r\n\r\n","import React from \"react\";\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <div className=\"preloader-wrapper big active\">\r\n            <div className=\"spinner-layer spinner-blue-only\">\r\n                <div className=\"circle-clipper left\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n                <div className=\"gap-patch\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n                <div className=\"circle-clipper right\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Spinner;\r\n","export const fetchMessagesRequest = (payload) => ({type: 'FETCH_MESSAGES', payload});\r\nexport const fetchMessagesSuccess = (payload) => ({type: 'FETCH_MESSAGES_SUCCESS', payload});\r\n\r\nexport const actionFetchMessages = (apiService) => (id) => (dispatch) => {\r\n    dispatch(fetchMessagesRequest());\r\n\r\n    apiService.getListMessages(id).then(res => {\r\n        dispatch(fetchMessagesSuccess(res.messages));\r\n    })\r\n};\r\n\r\nexport const updateMessageInList = (payload) => ({type: 'MESSAGE_UPDATE', payload});\r\nexport const updateMessagesList = (list) => ({type: 'MESSAGES_LIST_UPDATE', payload: list});\r\nexport const sortMessagesList = ({id}) => ({type: 'MESSAGES_LIST_SORT', payload: id});\r\n","import {updateMessageInList} from \"./messageActions\";\r\n\r\nexport const fetchChatMessagesRequest = () => ({type: 'FETCH_CHAT'});\r\nexport const fetchChatSuccess = (payload) => ({type: 'FETCH_CHAT_SUCCESS', payload});\r\nexport const fetchChat = (apiService) => (id, receiverId) => (dispatch) => {\r\n    dispatch(fetchChatMessagesRequest());\r\n\r\n    return apiService.getChatMessages(id, receiverId).then(res => {\r\n        dispatch(fetchChatSuccess(res));\r\n        dispatch(updateMessageInList({id: receiverId, updated: false, sort: false}));\r\n    })\r\n};\r\n\r\nexport const actionUpdateChatStatus = ({inChat, chatId}) => ({type: 'CHAT_STATUS_UPDATE', payload: {inChat, chatId}});\r\nexport const addChatMessage = ({name, text}) => ({type: 'CHAT_MESSAGE_ADD', payload: {name, text}});\r\n\r\nexport const actionSendMessage = (apiService) => (companion, user, message, date) => (dispatch) => {\r\n    const receiverId = companion.id;\r\n\r\n    const params = {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${user.token}`\r\n        },\r\n        body: JSON.stringify({id: receiverId, senderId: user.id, message, companion, date})\r\n    };\r\n\r\n    return apiService.getRequest('sendMessage', params);\r\n\r\n    // dispatch(addChatMessage(message));\r\n\r\n    // client messages list\r\n    // const clientMessage = {\r\n    //     ...message,\r\n    //     name: companion.name\r\n    // };\r\n    // dispatch(updateMessageInList({id: receiverId, updated: false, message: clientMessage, sort: true}));\r\n};\r\n","import React, {useEffect, useRef, useState} from \"react\";\r\nimport Spinner from \"../spinner\";\r\nimport {connect, useSelector} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {fetchChat, actionUpdateChatStatus, actionSendMessage, addChatMessage} from \"../../store/actions/chatActions\";\r\nimport {withApiService} from \"../hoc\";\r\n\r\nimport socket from \"../../socket\";\r\n\r\nconst Chat = (props) => {\r\n    const {backToMessages, chatLoading, user,\r\n        companionId, fetchChat, actionUpdateChatStatus, actionSendMessage, addChatMessage} = props;\r\n\r\n    const [message, setMessage] = useState('');\r\n    const chatMessages = useSelector(state => state.chat.messages);\r\n    const companion = useSelector(state => state.chat.companion);\r\n    const listContainer = useRef(null);\r\n\r\n    useEffect(() => {\r\n        actionUpdateChatStatus({inChat: true, chatId: companionId});\r\n        fetchChat(user.id, companionId);\r\n\r\n        return () => {\r\n            actionUpdateChatStatus({inChat: false, chatId: null});\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        listContainer.current.scrollTop = listContainer.current.scrollHeight;\r\n    }, [chatMessages]);\r\n\r\n    const sendMessage = (text, companion) => {\r\n        const newMessage = {name: user.name, text};\r\n        const date = Date.now();\r\n        actionSendMessage(companion, user, newMessage, date);\r\n        socket.emit('sendMessage', {toId: companionId, fromId: user.id, companion, date, message: newMessage});\r\n    };\r\n\r\n    const submitForm = (e) => {\r\n        e.preventDefault();\r\n        const companionData = {\r\n            id: companionId,\r\n            name: companion.name\r\n        };\r\n        sendMessage(message, companionData);\r\n        setMessage('');\r\n    };\r\n\r\n    const renderList = () => {\r\n        return (\r\n            <div ref={listContainer} className=\"chat__list\">\r\n                { chatMessages.map((msg, idx) => {\r\n                    return (\r\n                        <div key={idx} className=\"chat__item\">\r\n                            <strong>{msg.name}</strong>: {msg.text}\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat\">\r\n            <div className=\"chat__back\">\r\n                <button onClick={backToMessages} className=\"btn btn-primary\">Back</button>\r\n            </div>\r\n            <div className=\"chat__block\">\r\n                <div className=\"chat__left\">\r\n                    { chatLoading ? <Spinner /> : renderList() }\r\n                    <div className=\"chat__control\">\r\n                        <form onSubmit={submitForm} className=\"chat-control\">\r\n                            <div className=\"chat-control__left\">\r\n                                <input onChange={(e) => setMessage(e.target.value)} type=\"text\" className=\"form-control\" value={message} />\r\n                            </div>\r\n                            <div className=\"chat-control__right\">\r\n                                <button className=\"btn btn-success\">Send</button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n                <div className=\"chat__right\">\r\n                    <div className=\"chat__companion\">\r\n                        {companion.name || <Spinner /> }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state.user\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, {apiService}) => {\r\n    return bindActionCreators({\r\n        fetchChat: fetchChat(apiService),\r\n        actionUpdateChatStatus,\r\n        addChatMessage,\r\n        actionSendMessage: actionSendMessage(apiService)\r\n    }, dispatch);\r\n};\r\n\r\nexport default withApiService(connect(mapStateToProps, mapDispatchToProps)(Chat))\r\n","import React, {useEffect, useState} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {withApiService} from '../hoc'\r\nimport MessagesList from './MessagesList';\r\nimport Chat from \"./Chat\";\r\nimport {useSelector} from \"react-redux\";\r\nimport queryString  from 'query-string';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nimport './style.css'\r\nimport {actionFetchMessages, updateMessagesList} from \"../../store/actions/messageActions\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport Spinner from \"../spinner\";\r\n\r\nconst Messages = (props) => {\r\n    const {user, actionFetchMessages} = props;\r\n    const queryParams = queryString.parse(props.location.search);\r\n\r\n    let showChat = false;\r\n    if (queryParams.chat) {\r\n        showChat = true;\r\n    }\r\n\r\n    // const initialList = [\r\n    //     {name: 'Den', id: '5eaa9308d326261eccf1e564', updated: false},\r\n    //     {name: 'Max', id: '5eaacfcddeeb382da4898245', updated: true},\r\n    //     {name: 'Bob', id: '5eaad057a291b831b8822066', updated: false}\r\n    // ];\r\n\r\n    const [chat, setChat] = useState(showChat);\r\n    const chatLoading = useSelector((state) => state.chat.loading);\r\n    const messagesLoading = useSelector((state) => state.messages.loading);\r\n    const messagesList = useSelector((state) => state.messages.messages);\r\n\r\n    useEffect(() => {\r\n        actionFetchMessages(user.id);\r\n    }, []);\r\n\r\n    const openChat = (receiverId) => {\r\n        setChat({show: true, receiverId});\r\n        props.history.push(`?chat=${receiverId}`);\r\n    };\r\n\r\n    const backToMessages = () => {\r\n        props.history.push(`./`);\r\n        setChat(false);\r\n    };\r\n\r\n    const currentContent = !chat ?\r\n        <MessagesList\r\n            openChat={(id) => openChat(id)}\r\n            messagesList={messagesList}\r\n        />\r\n        : <Chat backToMessages={backToMessages}\r\n                companionId={queryParams.chat}\r\n                chatLoading={chatLoading}\r\n        />;\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h3 className=\"mb-4\">Messages</h3>\r\n            { messagesLoading ? <Spinner/> : (\r\n                <div className=\"messages\">\r\n                    <div className=\"messages__left\">\r\n                        {currentContent}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state.user,\r\n        messages: state.messages\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, {apiService}) => {\r\n    return bindActionCreators({\r\n        actionFetchMessages: actionFetchMessages(apiService),\r\n        updateMessagesList\r\n    }, dispatch);\r\n};\r\n\r\nexport default withApiService(connect(mapStateToProps, mapDispatchToProps)(withRouter(Messages)))\r\n","import React, {useEffect, useState, useRef} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {withApiService} from '../hoc'\r\nimport cn from 'classnames';\r\nimport './style.css'\r\n\r\nconst Me = (props) => {\r\n    const {apiService} = props;\r\n    const {name, id, token, avatarUrl} = props.user;\r\n    const avatarFileInput = useRef(null);\r\n\r\n    const [avatarFormActive, setAvatarFormStatus] = useState(false);\r\n    const [avatarPreviewImage, setAvatarPreviewImage] = useState(null);\r\n\r\n    const onFileUpload = (e) => {\r\n        const file = e.target.files[0];\r\n        if (file) {\r\n            setAvatarFormStatus(true);\r\n\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file);\r\n\r\n            reader.onloadend = function () {\r\n                const previewImage = reader.result;\r\n                setAvatarPreviewImage(previewImage);\r\n            };\r\n\r\n        } else {\r\n            setAvatarFormStatus(false);\r\n        }\r\n    };\r\n\r\n    const resetAvatarForm = () => {\r\n        setAvatarFormStatus(false);\r\n        avatarFileInput.current.value = null;\r\n    };\r\n\r\n    const uploadAvatar = (e) => {\r\n        e.preventDefault();\r\n\r\n        const data = new FormData();\r\n        data.append('avatar', avatarFileInput.current.files[0]);\r\n        data.append('id', id);\r\n\r\n        apiService.uploadAvatar(data, token).then(e => {\r\n            console.log('avatar uploaded');\r\n            resetAvatarForm();\r\n        })\r\n    };\r\n\r\n    const avatarClasses = cn({\r\n        'profile__avatar-form': true,\r\n        'active': avatarFormActive\r\n    });\r\n\r\n    return (\r\n        <div className=\"profile\">\r\n            <div className=\"profile__top\">\r\n                <div className=\"profile__background\" style={{backgroundImage: 'url(https://images2.alphacoders.com/209/thumb-1920-209080.jpg)'}}>\r\n\r\n                </div>\r\n                <div className=\"profile__info\">\r\n                    <div className=\"container\">\r\n                        <div className=\"profile-info\">\r\n                            <div className=\"profile-info__list\">\r\n                                <div className=\"profile-info__item\">\r\n                                    <div className=\"profile-info__value\">\r\n                                        0\r\n                                    </div>\r\n                                    <div className=\"profile-info__key\">\r\n                                        Followers\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"profile-info__item\">\r\n                                    <div className=\"profile-info__value\">\r\n                                        0\r\n                                    </div>\r\n                                    <div className=\"profile-info__key\">\r\n                                        Following\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"profile-info__item\">\r\n                                    <div className=\"profile-info__value\">\r\n                                        0\r\n                                    </div>\r\n                                    <div className=\"profile-info__key\">\r\n                                        Photos\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"profile-info__item\">\r\n                                    <div className=\"profile-info__value\">\r\n                                        0\r\n                                    </div>\r\n                                    <div className=\"profile-info__key\">\r\n                                        Posts\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"profile__avatar\">\r\n                    <div className=\"container\">\r\n                        <div className=\"profile__avatar-image\" style={{backgroundImage: `url(/images/${avatarUrl})`}}>\r\n                            <div className={avatarClasses}>\r\n                                <form onSubmit={uploadAvatar} className=\"avatar-form\">\r\n                                    <label className=\"avatar-form__label\">\r\n                                        Upload a new photo\r\n                                        <input ref={avatarFileInput} onChange={onFileUpload} type=\"file\"/>\r\n                                    </label>\r\n                                    <div className=\"avatar-form__content\">\r\n                                        <div className=\"avatar-form__preview\" style={{backgroundImage: `url(${avatarPreviewImage})`}}>\r\n\r\n                                        </div>\r\n                                        <div className=\"avatar-form__actions\">\r\n                                            <div className=\"avatar-form__apply\">\r\n                                                <button type=\"submit\" className=\"btn\">Apply</button>\r\n                                            </div>\r\n                                            <div className=\"avatar-form__cancel\">\r\n                                                <div onClick={resetAvatarForm} className=\"btn btn-danger\">Cancel</div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"profile__bottom\">\r\n                <div className=\"container\">\r\n                    <div className=\"profile__name\">{name}</div>\r\n                    {/*<div className=\"profile__actions\">*/}\r\n                    {/*    <div className=\"profile__follow\">*/}\r\n                    {/*        <div className=\"btn\">Follow</div>*/}\r\n                    {/*    </div>*/}\r\n                    {/*</div>*/}\r\n                    <div className=\"profile__wall\">\r\n                        <div className=\"profile__wall-bar\">\r\n\r\n                        </div>\r\n                        <div className=\"profile__wall-left\">\r\n                            <div className=\"profile-wall\">\r\n                                <div className=\"profile-wall__create\">\r\n                                    <div className=\"post-create\">\r\n                                        <div className=\"post-create__icon\">\r\n                                            <div className=\"post-icon\">\r\n                                                <i className=\"fa fa-comments-o\" aria-hidden=\"true\" />\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"post-create__wrap\">\r\n                                            <div className=\"post-create__input\">\r\n                                            <textarea placeholder=\"Write a new post...\" className=\"textarea-theme\" name=\"\" id=\"\" cols=\"30\" rows=\"10\">\r\n\r\n                                            </textarea>\r\n                                            </div>\r\n                                            <div className=\"post-create__actions\">\r\n                                                <div className=\"post-create__action\">\r\n                                                    <button className=\"btn\">\r\n                                                        <i className=\"fa fa-picture-o\"\r\n                                                           aria-hidden=\"true\" />\r\n                                                    </button>\r\n                                                </div>\r\n                                                <div className=\"post-create__action\">\r\n                                                    <button className=\"btn\">Post</button>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"profile-wall__list\">\r\n                                    <div className=\"profile-wall__item\">\r\n                                        <div className=\"profile-post\">\r\n                                            <div className=\"profile-post__icon\">\r\n                                                <div className=\"post-icon post-icon_green\">\r\n                                                    <i className=\"fa fa-picture-o\" aria-hidden=\"true\" />\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"profile-post__head\">\r\n                                                <div className=\"profile-post__head-left\">\r\n                                                    <span className=\"profile-post__name\">Denis</span> posted a photo\r\n                                                </div>\r\n                                                <div className=\"profile-post__head-right\">\r\n                                                    22 min ago\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"profile-post__image\">\r\n                                                <img src=\"https://vodabereg.ru/wp-content/uploads/2016/08/serfing.jpg\" alt=\"\"/>\r\n                                                <div className=\"post-info\">\r\n                                                    <div className=\"post-info__comments\">\r\n                                                        <i className=\"fa fa-comment-o\" aria-hidden=\"true\"/>21 Comments\r\n                                                    </div>\r\n                                                    <div className=\"post-info__likes\">\r\n                                                        <i className=\"fa fa-heart-o\" aria-hidden=\"true\"/> 12 Likes\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"profile-wall__item\">\r\n                                        <div className=\"profile-post\">\r\n                                            <div className=\"profile-post__icon\">\r\n                                                <div className=\"post-icon post-icon_tomato\">\r\n                                                    <i className=\"fa fa-pencil\" aria-hidden=\"true\"/>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"profile-post__head\">\r\n                                                <div className=\"profile-post__head-left\">\r\n                                                    <span className=\"profile-post__name\">Denis</span> posted an article\r\n                                                </div>\r\n                                                <div className=\"profile-post__head-right\">\r\n                                                    55 min ago\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"profile-post__body\">\r\n                                                <div className=\"profile-post__content\">\r\n                                                    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aliquam amet at consequatur, corporis delectus deserunt, distinctio error expedita facilis magnam, odio odit placeat rerum soluta vel veritatis voluptas. Blanditiis, molestias!\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"profile-post__info\">\r\n                                                <div className=\"post-info\">\r\n                                                    <div className=\"post-info__comments\">\r\n                                                        <i className=\"fa fa-comment-o\" aria-hidden=\"true\"/> 21 Comments\r\n                                                    </div>\r\n                                                    <div className=\"post-info__likes\">\r\n                                                        <i className=\"fa fa-heart-o\" aria-hidden=\"true\"/> 12 Likes\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {/*<h2>Me</h2>*/}\r\n            {/*<div className=\"me pt-4\">*/}\r\n            {/*    <div className=\"me__block\">*/}\r\n            {/*        <div className=\"me__avatar\">*/}\r\n            {/*            <img src=\"https://img2.freepng.ru/20180626/fhs/kisspng-avatar-user-computer-icons-software-developer-5b327cc98b5780.5684824215300354015708.jpg\" alt=\"\"/>*/}\r\n            {/*            <div className=\"me__avatar-edit\">*/}\r\n            {/*                <div className=\"avatar-loader\">*/}\r\n            {/*                    <div className=\"avatar-loader__left\">*/}\r\n            {/*                        <input className=\"form-control\" placeholder=\"Image URL\" type=\"text\"/>*/}\r\n            {/*                    </div>*/}\r\n            {/*                    <div className=\"avatar-loader__right\">*/}\r\n            {/*                        <button className=\"btn btn-primary\">Edit</button>*/}\r\n            {/*                    </div>*/}\r\n            {/*                </div>*/}\r\n            {/*            </div>*/}\r\n            {/*        </div>*/}\r\n            {/*        <div className=\"me__info\">*/}\r\n            {/*            <div className=\"me__name\">*/}\r\n            {/*                Name: Den*/}\r\n            {/*            </div>*/}\r\n            {/*        </div>*/}\r\n            {/*    </div>*/}\r\n            {/*</div>*/}\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state.user\r\n    }\r\n};\r\n\r\nexport default withApiService(connect(mapStateToProps)(Me))\r\n","import React from 'react';\nimport {Route, Switch} from \"react-router-dom\";\n\nimport Cart from \"../cart\";\nimport Header from \"../header\";\nimport Home from \"../home\";\nimport Store from \"../store\";\nimport PrivateRoute from \"../private-route\";\nimport Login from \"../login\";\nimport Register from '../register';\nimport Messages from '../messages';\nimport Me from '../me';\nimport {withApiService} from \"../hoc\";\nimport {connect} from \"react-redux\";\nimport {sortMessagesList, updateMessageInList} from \"../../store/actions/messageActions\";\nimport {addChatMessage} from \"../../store/actions/chatActions\";\nimport {bindActionCreators} from \"redux\";\n\nimport socket from \"../../socket\";\n\nclass App extends React.Component {\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        console.log(prevProps, this.props);\n    }\n\n    getUser() {\n        const { user } = this.props;\n        return user;\n    }\n\n    componentDidMount() {\n        const {apiService, updateMessageInList, addChatMessage} = this.props;\n\n        // messages from me and others\n        socket.on('getMessage', (data) => {\n            const user = this.getUser();\n            const {inChat, chatId} = this.props.chat;\n            let mine = data.fromId.toString() === user.id.toString();\n\n            // update message list\n            const message = {...data.message};\n            // if mine\n            if (mine) {\n                message.name = data.companion.name;\n                updateMessageInList({id: data.toId, updated: false, message, sort: true});\n            }\n\n            if (inChat && (chatId.toString() === data.toId.toString() || chatId.toString() === data.fromId.toString())) {\n                addChatMessage(data.message);\n\n                if (!mine) {\n                    apiService.updateChatTime(user.id, data.fromId, data.date);\n                    updateMessageInList({id: data.fromId, updated: false, message, sort: true});\n                }\n            } else {\n                if (!mine) {\n                    window.M.toast({html: `<b>${data.message.name}</b>: ${data.message.text}`});\n                    updateMessageInList({id: data.fromId, updated: true, message, sort: true});\n                }\n            }\n        });\n\n        // if (this.props.user.auth) {\n        //     this.longpoll();\n        // }\n    }\n\n    longpoll() {\n        // const {apiService, user, updateMessageInList, addChatMessage} = this.props;\n        //\n        // apiService.getRequest(`longpoll?id=${user.id}`).then(res => {\n        //     // Got new message\n        //     console.log(res); // res.message\n        //     const {inChat, chatId} = this.props.chat;\n        //\n        //     // интервал ожидания\n        //     if (res.type === 'timeout') {\n        //         this.longpoll();\n        //         return;\n        //     }\n        //\n        //     if (inChat && chatId.toString() === res.senderId.toString()) {\n        //         addChatMessage(res.message);\n        //         apiService.updateChatTime(res.id, res.senderId);\n        //     } else {\n        //         window.M.toast({html: `<b>${res.message.name}</b>: ${res.message.text}`});\n        //         updateMessageInList({id: res.senderId, updated: true, message: res.message});\n        //     }\n        //\n        //     // sortMessagesList({id: res.senderId});\n        //     this.longpoll();\n        // }).catch(e => {\n        //     console.log(e);\n        //     // this.longpoll();\n        // })\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Header />\n                <div className=\"content pt-3\">\n                    <Switch>\n                        <Route path=\"/\" exact component={Home} />\n                        <PrivateRoute exact path=\"/cart\" component={Cart}/>\n                        <Route path=\"/store\" component={Store} />\n                        <PrivateRoute exact path=\"/me\" component={Me}/>\n                        <PrivateRoute exact path=\"/messages/\" component={Messages}/>\n                        <Route path=\"/login\" component={Login} />\n                        <Route path=\"/register\" component={Register} />\n                        <Route path=\"/test\" render={() => {\n                            return <h2>Test page</h2>\n                        }} />\n                    </Switch>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        getNewMessage: state.messages.getNewMessage,\n        user: state.user,\n        chat: state.chat\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({\n        updateMessageInList,\n        sortMessagesList,\n        addChatMessage\n    }, dispatch);\n};\n\nexport default withApiService(connect(mapStateToProps, mapDispatchToProps)(App))\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","class UnauthorizedError extends Error {\r\n    constructor(...args) {\r\n        super(...args);\r\n        this.status = 401;\r\n    }\r\n}\r\n\r\nexport default UnauthorizedError;\r\n","import UnauthorizedError from \"../errors/UnauthorizedError\";\r\n\r\nclass ApiService {\r\n    URL = '/api/';\r\n\r\n    getRequest(url, params = {}) {\r\n        return new Promise((resolve, reject) => {\r\n            fetch(`${this.URL}${url}`, params).then(res => {\r\n                if (res.status === 401) reject(new UnauthorizedError());\r\n                return res.json();\r\n            }).then(res => resolve(res));\r\n        });\r\n    }\r\n\r\n    login(data) {\r\n        return this.getRequest('login', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        });\r\n    }\r\n\r\n    register(data) {\r\n        console.log(JSON.stringify(data));\r\n        return this.getRequest('register', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        });\r\n    }\r\n\r\n    uploadAvatar(formData, token) {\r\n        return this.getRequest('uploadAvatar', {\r\n            method: 'POST',\r\n            headers: {\r\n                // 'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${token}`\r\n            },\r\n            body: formData\r\n        });\r\n    }\r\n\r\n    getUserData = (token) => {\r\n        return this.getRequest('userData', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n        });\r\n    };\r\n\r\n    getChatMessages = (id, receiverId) => {\r\n        return this.getRequest('chatMessages', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({id, receiverId})\r\n        });\r\n    };\r\n\r\n    getListMessages = (id) => {\r\n        return this.getRequest('listMessages', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({id})\r\n        });\r\n    };\r\n\r\n    updateChatTime(id, receiverId, date) {\r\n        return this.getRequest('chat', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({id, receiverId, date})\r\n        });\r\n    }\r\n}\r\n\r\nexport default ApiService;\r\n","const initialState = {\r\n    name: null,\r\n    auth: false,\r\n    token: null,\r\n    id: null,\r\n    avatarUrl: null\r\n};\r\n\r\nconst userReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'GET_USER_SUCCESS':\r\n        case 'AUTH_CHECK_SUCCESS':\r\n        case 'USER_AUTHORIZE':\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            };\r\n\r\n        case 'USER_UNAUTHORIZE':\r\n            return {...initialState};\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default userReducer;\r\n","const initialState = {\r\n    loading: true,\r\n    messages: []\r\n};\r\n\r\nconst createMessage = (name, text, id, updated) => ({name, text, id, updated});\r\n\r\nconst messagesReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'FETCH_MESSAGES':\r\n            return {\r\n                loading: true,\r\n                messages: []\r\n            };\r\n\r\n        case 'FETCH_MESSAGES_SUCCESS':\r\n            return {\r\n                loading: false,\r\n                messages: action.payload\r\n            };\r\n\r\n        case 'MESSAGE_UPDATE': {\r\n            const {id, updated, message, sort = true} = action.payload;\r\n\r\n            const index = state.messages.findIndex(m => m.id === id);\r\n            let updatedMessages = [...state.messages];\r\n\r\n            if (sort) {\r\n                // отсортировать и создать, если нет собеседника в списке\r\n                let name = message.name;\r\n                let text = message.text;\r\n\r\n                if (index >= 0) {\r\n                    name = updatedMessages[index].name;\r\n                    updatedMessages = updatedMessages.filter(m => m.id !== id);\r\n                }\r\n                updatedMessages.unshift(createMessage(name, text, id, updated));\r\n            } else {\r\n                if (index >= 0) {\r\n                    updatedMessages[index].updated = updated;\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                messages: updatedMessages\r\n            };\r\n        }\r\n\r\n        // case 'MESSAGE_STATUS_UPDATE': {\r\n        //     const id = action.payload.id;\r\n        //     const updated = action.payload.updated;\r\n        //     const message = action.payload.message;\r\n        //\r\n        //     const updatedMessages = [...state.messages];\r\n        //     const index = updatedMessages.findIndex(m => m.id === id);\r\n        //     if (index < 0) {\r\n        //         if (!message) {\r\n        //             return state;\r\n        //         } else {\r\n        //             updatedMessages.unshift({...message, updated: true});\r\n        //             return {\r\n        //                 ...state,\r\n        //                 messages: updatedMessages\r\n        //             };\r\n        //         }\r\n        //     }\r\n        //\r\n        //     updatedMessages[index].updated = updated;\r\n        //\r\n        //     return {\r\n        //         ...state,\r\n        //         messages: updatedMessages\r\n        //     };\r\n        // }\r\n\r\n        // case 'MESSAGES_LIST_SORT': {\r\n        //     const id = action.payload;\r\n        //\r\n        //     const updatedMessages = [...state.messages];\r\n        //     const index = updatedMessages.findIndex(m => m.id === id);\r\n        //     if (index < 0) return state;\r\n        //\r\n        //     const thisItem = updatedMessages[index];\r\n        //     const newMessagesList = updatedMessages.filter(m => m.id !== id);\r\n        //     newMessagesList.unshift(thisItem);\r\n        //\r\n        //     return {\r\n        //         ...state,\r\n        //         messages: newMessagesList\r\n        //     };\r\n        // }\r\n\r\n        case 'MESSAGES_LIST_UPDATE':\r\n            return {\r\n                ...state,\r\n                messages: action.payload\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default messagesReducer;\r\n","const initialState = {\r\n    messages: [],\r\n    loading: false,\r\n    inChat: false,\r\n    chatId: null,\r\n    companion: {}\r\n};\r\n\r\nconst chatReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'FETCH_CHAT':\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n\r\n        case 'FETCH_CHAT_SUCCESS':\r\n            return {\r\n                ...state,\r\n                messages: action.payload.messages,\r\n                companion: {\r\n                    name: action.payload.companion.name,\r\n                },\r\n                loading: false\r\n            };\r\n\r\n        case 'CHAT_STATUS_UPDATE':\r\n            const {inChat = false, chatId = null} = action.payload;\r\n            return {\r\n                ...state,\r\n                inChat: inChat,\r\n                chatId: chatId\r\n            };\r\n\r\n        case 'CHAT_MESSAGE_ADD':\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, action.payload],\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default chatReducer;\r\n","import {combineReducers} from \"redux\";\r\nimport userReducer from \"./userReducer\";\r\nimport messagesReducer from \"./messageReducer\";\r\nimport chatReducer from \"./chatReducer\";\r\n\r\nconst reducer = combineReducers({\r\n    user: userReducer,\r\n    messages: messagesReducer,\r\n    chat: chatReducer\r\n});\r\n\r\nexport default reducer;\r\n","import { call, put, takeEvery, takeLatest, all } from 'redux-saga/effects'\r\nimport {ApiService} from '../../service';\r\n\r\nconst apiService = new ApiService();\r\n\r\n// worker Saga: will be fired on AUTH_CHECK action\r\nfunction* authCheckSaga(action) {\r\n    try {\r\n        const token = null;\r\n        if (token) {\r\n            const payload = {token, auth: true};\r\n            yield put({type: \"AUTH_CHECK_SUCCESS\", payload});\r\n        } else {\r\n\r\n        }\r\n    } catch (e) {\r\n\r\n    }\r\n}\r\n\r\nfunction* getUserDataSaga() {\r\n    const userData = yield apiService.getUserData();\r\n    yield put({type: \"USER_DATA_SUCCESS\", payload: userData});\r\n}\r\n\r\n// function* onAuth(action) {\r\n//     const {token} = action.payload;\r\n//     storageService.setToken(token);\r\n// }\r\n\r\n// function* watchAuthCheck() {\r\n//     yield takeEvery(\"AUTH_CHECK\", authCheckSaga);\r\n// }\r\n\r\n// function* watchGetUserData() {\r\n//     yield takeEvery(\"GET_USER\", getUserDataSaga);\r\n// }\r\n\r\n// function* mySaga2() {\r\n//     yield takeEvery(\"AUTH\", onAuth);\r\n// }\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        // watchAuthCheck(),\r\n        // watchGetUserData()\r\n    ])\r\n}\r\n","import {createStore, compose, applyMiddleware} from 'redux'\r\nimport reducer from \"./reducer\";\r\nimport reduxThunk from 'redux-thunk';\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport mySaga from './sagas'\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst reduxDevTools = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\r\n\r\nconst logMiddleware = () => (next) => (action) => {\r\n    console.log(action);\r\n    return next(action);\r\n};\r\n\r\nconst store = createStore(reducer, compose(applyMiddleware(reduxThunk, sagaMiddleware, logMiddleware), reduxDevTools));\r\n\r\n// sagaMiddleware.run(mySaga);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {BrowserRouter as Router} from \"react-router-dom\";\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\nimport {ApiService} from \"./service\";\nimport './style.css'\n\nimport store from \"./store\";\n\nimport {ApiServiceProvider} from \"./components/context/apiService\";\nimport {getUserData} from \"./store/actions\";\n\nimport socket from \"./socket\";\n\nconst apiService = new ApiService();\n\nconst token = localStorage.getItem('userData');\n\n// window.M.toast({html: 'I am a toast!'});\n\n// sockets\nsocket.on('connect', function() {\n    if (token) {\n        store.dispatch(getUserData(apiService, token)()).then(e => {\n            renderDOM();\n            const id = store.getState().user.id;\n            socket.emit('connected', {id});\n        })\n    } else {\n        renderDOM();\n    }\n});\n\nfunction renderDOM() {\n    ReactDOM.render(\n        <React.StrictMode>\n            <Provider store={store}>\n                <ApiServiceProvider value={apiService}>\n                    <Router>\n                        <App/>\n                    </Router>\n                </ApiServiceProvider>\n            </Provider>\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}