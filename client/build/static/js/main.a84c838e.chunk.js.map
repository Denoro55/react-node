{"version":3,"sources":["components/cart/index.jsx","store/actions/index.jsx","components/header/index.jsx","components/home/index.jsx","components/store/index.jsx","components/private-route/index.jsx","components/context/apiService.js","components/hoc/withApiService.jsx","components/login/index.jsx","components/register/index.jsx","components/messages/MessagesList.jsx","components/spinner/index.jsx","store/actions/messageActions.jsx","store/actions/chatActions.jsx","components/messages/Chat.jsx","components/messages/index.jsx","components/me/index.jsx","components/app/index.jsx","serviceWorker.js","errors/UnauthorizedError.js","service/ApiService.jsx","store/reducer/userReducer.jsx","store/reducer/messageReducer.jsx","store/reducer/chatReducer.jsx","store/reducer/index.jsx","store/sagas/index.jsx","store/index.jsx","index.jsx"],"names":["Cart","console","log","this","props","React","Component","getUserData","apiService","token","dispatch","type","then","res","data","auth","name","id","payload","catch","err","connect","state","isAuthenticated","user","actionUnauthorize","localStorage","removeItem","logout","e","preventDefault","className","to","exact","isAuth","map","link","idx","key","activeClassName","onClick","greeting","Example","useState","c","setC","count","setCount","useCallback","UseMyEffect","useEffect","Store","ChildComponent","component","rest","createContext","ApiServiceProvider","Provider","ApiServiceConsumer","Consumer","withApiService","Wrapped","Login","form","email","password","message","color","text","login","actionAuthorize","actionGetUserData","errors","setState","history","push","onInputChange","target","value","feedback","style","onSubmit","onChange","placeholder","setItem","Register","register","checkAuth","withRouter","messagesList","openChat","item","updated","Spinner","actionFetchMessages","getListMessages","fetchMessagesSuccess","messages","updateMessageInList","updateMessagesList","list","sortMessagesList","fetchChat","receiverId","getChatMessages","sort","actionUpdateChatStatus","inChat","chatId","addChatMessage","actionSendMessage","companion","params","method","headers","body","JSON","stringify","senderId","getRequest","clientMessage","bindActionCreators","backToMessages","chatLoading","companionId","setMessage","chatMessages","useSelector","chat","listContainer","useRef","current","scrollTop","scrollHeight","ref","msg","companionData","newMessage","sendMessage","queryParams","queryString","parse","location","search","showChat","setChat","loading","messagesLoading","currentContent","show","src","alt","App","longpoll","toString","updateChatTime","window","M","toast","html","path","Home","Me","Messages","render","getNewMessage","Boolean","hostname","match","UnauthorizedError","args","status","Error","ApiService","URL","url","timeout","Promise","resolve","reject","fetch","json","setTimeout","initialState","userReducer","action","createMessage","messagesReducer","index","findIndex","m","updatedMessages","filter","unshift","chatReducer","reducer","combineReducers","sagaMiddleware","createSagaMiddleware","store","createStore","compose","applyMiddleware","reduxThunk","next","getItem","renderDOM","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.a84c838e.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\nclass Cart extends React.Component {\r\n    componentDidMount() {\r\n        console.log(this.props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>cart</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Cart;\r\n","export const actionAuthorize = ({auth, token}) => {\r\n    localStorage.setItem('userData', token);\r\n\r\n    return {type: 'USER_AUTHORIZE', payload: {auth, token}};\r\n};\r\n\r\nexport const actionUnauthorize = () => {\r\n    localStorage.removeItem('userData');\r\n\r\n    return {type: 'USER_UNAUTHORIZE'};\r\n};\r\n\r\nexport const actionGetUserDataSuccess = (payload) => ({type: 'GET_USER_SUCCESS', payload});\r\nexport const actionGetUserDataFailure = () => ({type: 'GET_USER_FAILURE'});\r\nexport const actionGetUserData = () => ({type: 'GET_USER'});\r\n\r\nexport const getUserData = (apiService, token) => () => (dispatch) => {\r\n    dispatch(actionGetUserData());\r\n\r\n    return apiService.getUserData(token).then(res => {\r\n        const data = {auth: true, token, name: res.data.name, id: res.data.id};\r\n        dispatch(actionGetUserDataSuccess(data));\r\n    }).catch(err => {\r\n        dispatch(actionGetUserDataFailure());\r\n    })\r\n};\r\n\r\nexport const auth = (isAuth) => ({type: 'AUTH', payload: isAuth});\r\n","import React from 'react'\r\nimport {Link, NavLink} from 'react-router-dom'\r\nimport {connect} from 'react-redux'\r\nimport {actionUnauthorize} from \"../../store/actions\";\r\nimport './style.css'\r\n\r\nconst Header = ({isAuthenticated, actionUnauthorize}) => {\r\n    const logout = (e) => {\r\n        e.preventDefault();\r\n        actionUnauthorize();\r\n    };\r\n\r\n    const renderRight = () => {\r\n        if (isAuthenticated) {\r\n            return (\r\n                <ul className=\"navbar-nav ml-3 right\">\r\n                    <li className=\"nav-item\">\r\n                        <NavLink onClick={logout} activeClassName='active' className=\"nav-link ml-auto\" to=\"/logout\">Logout</NavLink>\r\n                    </li>\r\n                </ul>\r\n            )\r\n        } else {\r\n            return (\r\n                <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\r\n                    <li className=\"nav-item\">\r\n                        <NavLink activeClassName='active' className=\"nav-link ml-auto\" to=\"/login\">Login</NavLink>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <NavLink activeClassName='active' className=\"nav-link ml-2\" to=\"/register\">Register</NavLink>\r\n                    </li>\r\n                </ul>\r\n            )\r\n        }\r\n    };\r\n\r\n    const items = [\r\n        {exact: true, to: '/', name: 'Home', isAuth: false},\r\n        {exact: true, to: '/me', name: 'Me', isAuth: true},\r\n        {exact: false, to: '/store', name: 'Store', isAuth: false},\r\n        {exact: false, to: '/messages/', name: 'Messages', isAuth: true},\r\n    ];\r\n\r\n    return (\r\n        <header className=\"header\">\r\n            <nav>\r\n                <div className=\"nav-wrapper\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col s12\">\r\n                            <Link className=\"navbar-brand left\" to=\"/\">Art's Store</Link>\r\n                            <ul id=\"nav-mobile\" className=\"left hide-on-med-and-down\">\r\n                                {\r\n                                    items.map((link, idx) => {\r\n                                        if (!isAuthenticated && link.isAuth) {\r\n                                            return null;\r\n                                        }\r\n\r\n                                        return (\r\n                                            <li key={idx} className=\"nav-item\">\r\n                                                <NavLink activeClassName='active' className=\"nav-link\" exact={link.exact} to={link.to}>{link.name}</NavLink>\r\n                                            </li>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </ul>\r\n                            { renderRight() }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n            {/*<nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">*/}\r\n            {/*    <Link className=\"navbar-brand\" to=\"/\">Art's Store</Link>*/}\r\n            {/*    <ul className=\"navbar-nav ml-3 mr-auto\">*/}\r\n            {/*        {*/}\r\n            {/*            items.map((link, idx) => {*/}\r\n            {/*                if (!isAuthenticated && link.isAuth) {*/}\r\n            {/*                    return null;*/}\r\n            {/*                }*/}\r\n\r\n            {/*                return (*/}\r\n            {/*                    <li key={idx} className=\"nav-item\">*/}\r\n            {/*                        <NavLink activeClassName='active' className=\"nav-link\" exact={link.exact} to={link.to}>{link.name}</NavLink>*/}\r\n            {/*                    </li>*/}\r\n            {/*                )*/}\r\n            {/*            })*/}\r\n            {/*        }*/}\r\n\r\n            {/*        /!*<li className=\"nav-item ml-1\">*!/*/}\r\n            {/*        /!*    <NavLink activeClassName='active' className=\"nav-link\" to=\"/cart\">Cart</NavLink>*!/*/}\r\n            {/*        /!*</li>*!/*/}\r\n            {/*        /!*<li className=\"nav-item ml-1\">*!/*/}\r\n            {/*        /!*    <NavLink activeClassName='active' className=\"nav-link\" to=\"/test\">Test</NavLink>*!/*/}\r\n            {/*        /!*</li>*!/*/}\r\n            {/*    </ul>*/}\r\n            {/*    { renderRight() }*/}\r\n            {/*</nav>*/}\r\n        </header>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isAuthenticated: state.user.auth\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        actionUnauthorize: () => dispatch(actionUnauthorize())\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header)\r\n","import React, {useCallback, useEffect, useState} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nconst Home = ({user}) => {\r\n    const greeting = user.auth ? <p>Hello, <b>{user.name}</b></p> : <p>Hello, Guest!</p>;\r\n\r\n    return (\r\n        <div>\r\n            <h3 className=\"mb-3\">Home page</h3>\r\n            <Example />\r\n            {greeting}\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n      return {\r\n          user: state.user\r\n      }\r\n};\r\n\r\nexport default connect(mapStateToProps)(Home)\r\n\r\nconst UseMyEffect = () => {\r\n    const [c, setC] = useState(0);\r\n\r\n    const setCount = useCallback((c) => {\r\n        setC(c)\r\n    }, []);\r\n\r\n    return {\r\n        count: c,\r\n        setCount\r\n    }\r\n};\r\n\r\nfunction Example() {\r\n    // Declare a new state variable, which we'll call \"count\"\r\n    const {count, setCount} = UseMyEffect();\r\n\r\n    useEffect(() => {\r\n        console.log('useEffect function changed');\r\n    }, [setCount]);\r\n\r\n    return (\r\n        <div>\r\n            <p>You clicked {count} times</p>\r\n            <button onClick={() => setCount(count + 1)}>\r\n                Click me\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\nclass Store extends React.Component {\r\n    componentDidMount() {\r\n        console.log(this.props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <h3>Store page</h3>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Store;\r\n","import React from \"react\"\r\nimport {Route, Redirect} from 'react-router-dom'\r\nimport {connect} from 'react-redux'\r\n\r\nconst PrivateRoute = ({component: ChildComponent, auth, ...rest}) => {\r\n    return (\r\n        <Route>\r\n            { auth ? <ChildComponent {...rest} /> : <Redirect to=\"/login\" />}\r\n        </Route>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        auth: state.user.auth\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute);\r\n","import React from \"react\";\r\n\r\nconst {\r\n    Provider: ApiServiceProvider,\r\n    Consumer: ApiServiceConsumer\r\n} = React.createContext();\r\n\r\nexport {\r\n    ApiServiceProvider,\r\n    ApiServiceConsumer\r\n}\r\n","import React from \"react\";\r\nimport {ApiServiceConsumer} from \"../context/apiService\";\r\n\r\nconst withApiService = (Wrapped) => {\r\n    return (props) => {\r\n        return <ApiServiceConsumer>\r\n            {\r\n                (apiService) => {\r\n                    return <Wrapped {...props} apiService={apiService}/>\r\n                }\r\n            }\r\n        </ApiServiceConsumer>\r\n    }\r\n};\r\n\r\nexport default withApiService;\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {withApiService} from '../hoc';\r\nimport {actionAuthorize, getUserData} from \"../../store/actions\";\r\n\r\nclass Login extends React.Component {\r\n    state = {\r\n        form: {\r\n            email: '',\r\n            password: ''\r\n        },\r\n        message: {\r\n            color: 'red',\r\n            text: ''\r\n        }\r\n    };\r\n\r\n    login = (e) => {\r\n        e.preventDefault();\r\n        const {apiService, actionAuthorize, actionGetUserData} = this.props;\r\n        apiService.login(this.state.form).then(res => {\r\n            if (res.errors) {\r\n                this.setState({\r\n                    message: {color: 'red', text: res.message}\r\n                });\r\n            } else {\r\n                const token = res.token;\r\n                if (token) {\r\n                    actionAuthorize({auth: true, token});\r\n                    actionGetUserData(token).then(() => {\r\n                        this.props.history.push('/me');\r\n                    });\r\n                }\r\n            }\r\n        })\r\n    };\r\n\r\n    onInputChange = (e) => {\r\n        this.setState({\r\n            form: {\r\n                ...this.state.form,\r\n                [e.target.name]: e.target.value\r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const {message} = this.state;\r\n\r\n        const feedback = message.text ? (\r\n            <div className=\"mb-3\" style={{color: message.color}}>\r\n                {message.text}\r\n            </div>\r\n        ) : null;\r\n\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-4\">\r\n                    <h3 className=\"mb-4\">Login</h3>\r\n                    <form onSubmit={this.login}>\r\n                        <div className=\"mb-3\">\r\n                            <div className=\"form-group\">\r\n                                <input type=\"text\" onChange={this.onInputChange} name=\"email\" className=\"form-control\" placeholder=\"Email\" />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <input type=\"password\" onChange={this.onInputChange} name=\"password\" className=\"form-control\" placeholder=\"Password\" />\r\n                            </div>\r\n                        </div>\r\n                        {feedback}\r\n                        <button type=\"submit\" className=\"btn btn-primary\">Sign in</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        token: state.user.token\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, {apiService, token}) => {\r\n    return {\r\n        actionGetUserData: (token) => dispatch(getUserData(apiService, token)()),\r\n        actionAuthorize: (payload) => dispatch(actionAuthorize(payload))\r\n    }\r\n};\r\n\r\nexport default withApiService(connect(mapStateToProps, mapDispatchToProps)(Login));\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {withApiService} from '../hoc';\r\n\r\nclass Register extends React.Component {\r\n    state = {\r\n        form: {\r\n            name: '',\r\n            email: '',\r\n            password: ''\r\n        },\r\n        message: {\r\n            color: 'red',\r\n            text: ''\r\n        }\r\n    };\r\n\r\n    register = (e) => {\r\n        e.preventDefault();\r\n        const {apiService} = this.props;\r\n        apiService.register(this.state.form).then(res => {\r\n            const color = !res.errors ? 'green' : 'red';\r\n            if (res.errors) {\r\n                this.setState({\r\n                    message: {color, text: res.message}\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    message: {color, text: res.message},\r\n                    form: {name: '', email: '', password: ''}\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            console.log(e);\r\n        })\r\n    };\r\n\r\n    onInputChange = (e) => {\r\n        this.setState({\r\n            form: {\r\n                ...this.state.form,\r\n                [e.target.name]: e.target.value\r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const {message} = this.state;\r\n\r\n        const feedback = message.text ? (\r\n            <div className=\"mb-3\" style={{color: message.color}}>\r\n                {message.text}\r\n            </div>\r\n        ) : null;\r\n\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-4\">\r\n                    <h3 className=\"mb-4\">Register</h3>\r\n                    <form onSubmit={this.register}>\r\n                        <div className=\"mb-3\">\r\n                            <div className=\"form-group\">\r\n                                <input type=\"text\" onChange={this.onInputChange} name=\"name\" className=\"form-control\" placeholder=\"Name\" value={this.state.form.name} />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <input type=\"text\" onChange={this.onInputChange} name=\"email\" className=\"form-control\" placeholder=\"Email\" value={this.state.form.email} />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <input type=\"password\" onChange={this.onInputChange} name=\"password\" className=\"form-control\" placeholder=\"Password\" value={this.state.form.password} />\r\n                            </div>\r\n                        </div>\r\n                        {feedback}\r\n                        <button type=\"submit\" className=\"btn btn-primary\">Register</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {}\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        checkAuth: () => {}\r\n    }\r\n};\r\n\r\nexport default withApiService(connect(mapStateToProps, mapDispatchToProps)(Register));\r\n","import React from \"react\";\r\nimport {withRouter} from 'react-router-dom'\r\n\r\nconst MessagesList = (props) => {\r\n    const {messagesList, openChat} = props;\r\n\r\n    return (\r\n        <ul className=\"collection with-header\">\r\n            {messagesList.map((item, idx) => {\r\n                return (\r\n                    <li key={idx} className=\"collection-item\">\r\n                        <div className=\"message-item\">\r\n                            <div className=\"message-item__content\">{item.name}</div>\r\n                            <div className=\"message-item__actions\">\r\n                                {item.updated ? (\r\n                                    <button onClick={() => openChat(item.id)} className=\"btn btn-outline btn-danger btn-sm\">\r\n                                        <i className=\"fa fa-envelope-open\" />\r\n                                    </button>\r\n                                ) : null}\r\n                                <button onClick={() => openChat(item.id)} className=\"btn btn-outline btn-success btn-sm ml-3\">\r\n                                    <i className=\"fa fa-weixin\" />\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </li>\r\n                )\r\n            })}\r\n        </ul>\r\n    )\r\n};\r\n\r\nexport default withRouter(MessagesList)\r\n","import React from \"react\";\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <div className=\"preloader-wrapper big active\">\r\n            <div className=\"spinner-layer spinner-blue-only\">\r\n                <div className=\"circle-clipper left\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n                <div className=\"gap-patch\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n                <div className=\"circle-clipper right\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Spinner;\r\n","export const fetchMessagesRequest = (payload) => ({type: 'FETCH_MESSAGES', payload});\r\nexport const fetchMessagesSuccess = (payload) => ({type: 'FETCH_MESSAGES_SUCCESS', payload});\r\n\r\nexport const actionFetchMessages = (apiService) => (id) => (dispatch) => {\r\n    dispatch(fetchMessagesRequest());\r\n\r\n    apiService.getListMessages(id).then(res => {\r\n        dispatch(fetchMessagesSuccess(res.messages));\r\n    })\r\n};\r\n\r\nexport const updateMessageInList = (payload) => ({type: 'MESSAGE_UPDATE', payload});\r\nexport const updateMessagesList = (list) => ({type: 'MESSAGES_LIST_UPDATE', payload: list});\r\nexport const sortMessagesList = ({id}) => ({type: 'MESSAGES_LIST_SORT', payload: id});\r\n","import {updateMessageInList} from \"./messageActions\";\r\n\r\nexport const fetchChatMessagesRequest = () => ({type: 'FETCH_CHAT'});\r\nexport const fetchChatSuccess = (payload) => ({type: 'FETCH_CHAT_SUCCESS', payload});\r\nexport const fetchChat = (apiService) => (id, receiverId) => (dispatch) => {\r\n    dispatch(fetchChatMessagesRequest());\r\n\r\n    return apiService.getChatMessages(id, receiverId).then(res => {\r\n        dispatch(fetchChatSuccess(res));\r\n        dispatch(updateMessageInList({id: receiverId, updated: false, sort: false}));\r\n    })\r\n};\r\n\r\nexport const actionUpdateChatStatus = ({inChat, chatId}) => ({type: 'CHAT_STATUS_UPDATE', payload: {inChat, chatId}});\r\nexport const addChatMessage = ({name, text}) => ({type: 'CHAT_MESSAGE_ADD', payload: {name, text}});\r\n\r\nexport const actionSendMessage = (apiService) => (companion, user, message) => (dispatch) => {\r\n    const receiverId = companion.id;\r\n\r\n    const params = {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${user.token}`\r\n        },\r\n        body: JSON.stringify({id: receiverId, senderId: user.id, message})\r\n    };\r\n\r\n    apiService.getRequest('sendMessage', params);\r\n    dispatch(addChatMessage(message));\r\n\r\n    // client messages list\r\n    const clientMessage = {\r\n        ...message,\r\n        name: companion.name\r\n    };\r\n    dispatch(updateMessageInList({id: receiverId, updated: false, message: clientMessage, sort: true}));\r\n};\r\n","import React, {useEffect, useRef, useState} from \"react\";\r\nimport Spinner from \"../spinner\";\r\nimport {connect, useSelector} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {fetchChat, actionUpdateChatStatus, actionSendMessage} from \"../../store/actions/chatActions\";\r\nimport {withApiService} from \"../hoc\";\r\n\r\nconst Chat = (props) => {\r\n    const {backToMessages, chatLoading, user,\r\n        companionId, fetchChat, actionUpdateChatStatus, actionSendMessage} = props;\r\n\r\n    const [message, setMessage] = useState('');\r\n    const chatMessages = useSelector(state => state.chat.messages);\r\n    const companion = useSelector(state => state.chat.companion);\r\n    const listContainer = useRef(null);\r\n\r\n    useEffect(() => {\r\n        actionUpdateChatStatus({inChat: true, chatId: companionId});\r\n        fetchChat(user.id, companionId);\r\n\r\n        return () => {\r\n            actionUpdateChatStatus({inChat: false, chatId: null});\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        listContainer.current.scrollTop = listContainer.current.scrollHeight;\r\n    }, [chatMessages]);\r\n\r\n    const sendMessage = (text, companion) => {\r\n        const newMessage = {name: user.name, text};\r\n        actionSendMessage(companion, user, newMessage);\r\n    };\r\n\r\n    const submitForm = (e) => {\r\n        e.preventDefault();\r\n        const companionData = {\r\n            id: companionId,\r\n            name: companion.name\r\n        };\r\n        sendMessage(message, companionData);\r\n        setMessage('');\r\n    };\r\n\r\n    const renderList = () => {\r\n        return (\r\n            <div ref={listContainer} className=\"chat__list\">\r\n                { chatMessages.map((msg, idx) => {\r\n                    return (\r\n                        <div key={idx} className=\"chat__item\">\r\n                            <strong>{msg.name}</strong>: {msg.text}\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat\">\r\n            <div className=\"chat__back\">\r\n                <button onClick={backToMessages} className=\"btn btn-primary\">Back</button>\r\n            </div>\r\n            <div className=\"chat__block\">\r\n                <div className=\"chat__left\">\r\n                    { chatLoading ? <Spinner /> : renderList() }\r\n                    <div className=\"chat__control\">\r\n                        <form onSubmit={submitForm} className=\"chat-control\">\r\n                            <div className=\"chat-control__left\">\r\n                                <input onChange={(e) => setMessage(e.target.value)} type=\"text\" className=\"form-control\" value={message} />\r\n                            </div>\r\n                            <div className=\"chat-control__right\">\r\n                                <button className=\"btn btn-success\">Send</button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n                <div className=\"chat__right\">\r\n                    <div className=\"chat__companion\">\r\n                        {companion.name || <Spinner /> }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state.user\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, {apiService}) => {\r\n    return bindActionCreators({\r\n        fetchChat: fetchChat(apiService),\r\n        actionUpdateChatStatus,\r\n        actionSendMessage: actionSendMessage(apiService)\r\n    }, dispatch);\r\n};\r\n\r\nexport default withApiService(connect(mapStateToProps, mapDispatchToProps)(Chat))\r\n","import React, {useEffect, useState} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {withApiService} from '../hoc'\r\nimport MessagesList from './MessagesList';\r\nimport Chat from \"./Chat\";\r\nimport {useSelector} from \"react-redux\";\r\nimport queryString  from 'query-string';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nimport './style.css'\r\nimport {actionFetchMessages, updateMessagesList} from \"../../store/actions/messageActions\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport Spinner from \"../spinner\";\r\n\r\nconst Messages = (props) => {\r\n    const {user, actionFetchMessages} = props;\r\n    const queryParams = queryString.parse(props.location.search);\r\n\r\n    let showChat = false;\r\n    if (queryParams.chat) {\r\n        showChat = true;\r\n    }\r\n\r\n    // const initialList = [\r\n    //     {name: 'Den', id: '5eaa9308d326261eccf1e564', updated: false},\r\n    //     {name: 'Max', id: '5eaacfcddeeb382da4898245', updated: true},\r\n    //     {name: 'Bob', id: '5eaad057a291b831b8822066', updated: false}\r\n    // ];\r\n\r\n    const [chat, setChat] = useState(showChat);\r\n    const chatLoading = useSelector((state) => state.chat.loading);\r\n    const messagesLoading = useSelector((state) => state.messages.loading);\r\n    const messagesList = useSelector((state) => state.messages.messages);\r\n\r\n    useEffect(() => {\r\n        actionFetchMessages(user.id);\r\n    }, []);\r\n\r\n    const openChat = (receiverId) => {\r\n        setChat({show: true, receiverId});\r\n        props.history.push(`?chat=${receiverId}`);\r\n    };\r\n\r\n    const backToMessages = () => {\r\n        props.history.push(`./`);\r\n        setChat(false);\r\n    };\r\n\r\n    const currentContent = !chat ?\r\n        <MessagesList\r\n            openChat={(id) => openChat(id)}\r\n            messagesList={messagesList}\r\n        />\r\n        : <Chat backToMessages={backToMessages}\r\n                companionId={queryParams.chat}\r\n                chatLoading={chatLoading}\r\n        />;\r\n\r\n    return (\r\n        <div>\r\n            <h3 className=\"mb-4\">Messages</h3>\r\n            { messagesLoading ? <Spinner/> : (\r\n                <div className=\"messages\">\r\n                    <div className=\"messages__left\">\r\n                        {currentContent}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state.user,\r\n        messages: state.messages\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, {apiService}) => {\r\n    return bindActionCreators({\r\n        actionFetchMessages: actionFetchMessages(apiService),\r\n        updateMessagesList\r\n    }, dispatch);\r\n};\r\n\r\nexport default withApiService(connect(mapStateToProps, mapDispatchToProps)(withRouter(Messages)))\r\n","import React, {useEffect, useState} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {withApiService} from '../hoc'\r\nimport './style.css'\r\n\r\nconst Me = (props) => {\r\n    return (\r\n        <div>\r\n            <h2>Me</h2>\r\n            <div className=\"me pt-4\">\r\n                <div className=\"me__block\">\r\n                    <div className=\"me__avatar\">\r\n                        <img src=\"https://img2.freepng.ru/20180626/fhs/kisspng-avatar-user-computer-icons-software-developer-5b327cc98b5780.5684824215300354015708.jpg\" alt=\"\"/>\r\n                        <div className=\"me__avatar-edit\">\r\n                            <div className=\"avatar-loader\">\r\n                                <div className=\"avatar-loader__left\">\r\n                                    <input className=\"form-control\" placeholder=\"Image URL\" type=\"text\"/>\r\n                                </div>\r\n                                <div className=\"avatar-loader__right\">\r\n                                    <button className=\"btn btn-primary\">Edit</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"me__info\">\r\n                        <div className=\"me__name\">\r\n                            Name: Den\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n\r\n    }\r\n};\r\n\r\nexport default withApiService(connect(mapStateToProps)(Me))\r\n","import React from 'react';\nimport {Route, Switch} from \"react-router-dom\";\n\nimport Cart from \"../cart\";\nimport Header from \"../header\";\nimport Home from \"../home\";\nimport Store from \"../store\";\nimport PrivateRoute from \"../private-route\";\nimport Login from \"../login\";\nimport Register from '../register';\nimport Messages from '../messages';\nimport Me from '../me';\nimport {withApiService} from \"../hoc\";\nimport {connect} from \"react-redux\";\nimport {sortMessagesList, updateMessageInList} from \"../../store/actions/messageActions\";\nimport {addChatMessage} from \"../../store/actions/chatActions\";\nimport {bindActionCreators} from \"redux\";\n\nclass App extends React.Component {\n    componentDidMount() {\n        if (this.props.user.auth) {\n            this.longpoll();\n        }\n    }\n\n    longpoll() {\n        const {apiService, user, updateMessageInList, addChatMessage} = this.props;\n\n        apiService.getRequest(`longpoll?id=${user.id}`).then(res => {\n            // Got new message\n            console.log(res); // res.message\n            const {inChat, chatId} = this.props.chat;\n\n            // интервал ожидания\n            if (res.type === 'timeout') {\n                this.longpoll();\n                return;\n            }\n\n            if (inChat && chatId.toString() === res.senderId.toString()) {\n                addChatMessage(res.message);\n                apiService.updateChatTime(res.id, res.senderId);\n            } else {\n                window.M.toast({html: `<b>${res.message.name}</b>: ${res.message.text}`});\n                updateMessageInList({id: res.senderId, updated: true, message: res.message});\n            }\n\n            // sortMessagesList({id: res.senderId});\n            this.longpoll();\n        }).catch(e => {\n            console.log(e);\n            // this.longpoll();\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Header />\n                <div className=\"content pt-3\">\n                    <div className=\"container\">\n                        <Switch>\n                            <Route path=\"/\" exact component={Home} />\n                            <PrivateRoute exact path=\"/cart\" component={Cart}/>\n                            <Route path=\"/store\" component={Store} />\n                            <PrivateRoute exact path=\"/me\" component={Me}/>\n                            <PrivateRoute exact path=\"/messages/\" component={Messages}/>\n                            <Route path=\"/login\" component={Login} />\n                            <Route path=\"/register\" component={Register} />\n                            <Route path=\"/test\" render={() => {\n                                return <h2>Test page</h2>\n                            }} />\n                        </Switch>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        getNewMessage: state.messages.getNewMessage,\n        user: state.user,\n        chat: state.chat\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({\n        updateMessageInList,\n        sortMessagesList,\n        addChatMessage\n    }, dispatch);\n};\n\nexport default withApiService(connect(mapStateToProps, mapDispatchToProps)(App))\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","class UnauthorizedError extends Error {\r\n    constructor(...args) {\r\n        super(...args);\r\n        this.status = 401;\r\n    }\r\n}\r\n\r\nexport default UnauthorizedError;\r\n","import UnauthorizedError from \"../errors/UnauthorizedError\";\r\n\r\nclass ApiService {\r\n    URL = 'http://localhost:9000/api/';\r\n\r\n    getRequest(url, params = {}, timeout = 20000) {\r\n        return new Promise((resolve, reject) => {\r\n            fetch(`${this.URL}${url}`, params).then(res => {\r\n                if (res.status === 401) reject(new UnauthorizedError());\r\n                return res.json();\r\n            }).then(res => resolve(res));\r\n\r\n            if (timeout) {\r\n                const e = new Error(\"Connection timed out\");\r\n                setTimeout(reject, timeout, e);\r\n            }\r\n        });\r\n    }\r\n\r\n    login(data) {\r\n        return this.getRequest('login', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        });\r\n    }\r\n\r\n    register(data) {\r\n        console.log(JSON.stringify(data));\r\n        return this.getRequest('register', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        });\r\n    }\r\n\r\n    getUserData = (token) => {\r\n        return this.getRequest('userData', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n        });\r\n    };\r\n\r\n    getChatMessages = (id, receiverId) => {\r\n        return this.getRequest('chatMessages', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({id, receiverId})\r\n        });\r\n    };\r\n\r\n    getListMessages = (id) => {\r\n        return this.getRequest('listMessages', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({id})\r\n        });\r\n    };\r\n\r\n    updateChatTime(id, receiverId) {\r\n        return this.getRequest('chat', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({id, receiverId})\r\n        });\r\n    }\r\n}\r\n\r\nexport default ApiService;\r\n","const initialState = {\r\n    name: null,\r\n    auth: false,\r\n    token: null,\r\n    id: null\r\n};\r\n\r\nconst userReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'GET_USER_SUCCESS':\r\n        case 'AUTH_CHECK_SUCCESS':\r\n        case 'USER_AUTHORIZE':\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            };\r\n\r\n        case 'USER_UNAUTHORIZE':\r\n            return  {\r\n                name: null,\r\n                auth: false,\r\n                token: null\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default userReducer;\r\n","const initialState = {\r\n    loading: true,\r\n    messages: []\r\n};\r\n\r\nconst createMessage = (name, id, updated) => ({name, id, updated});\r\n\r\nconst messagesReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'FETCH_MESSAGES':\r\n            return {\r\n                loading: true,\r\n                messages: []\r\n            };\r\n\r\n        case 'FETCH_MESSAGES_SUCCESS':\r\n            return {\r\n                loading: false,\r\n                messages: action.payload\r\n            };\r\n\r\n        case 'MESSAGE_UPDATE': {\r\n            const {id, updated, message, sort = true} = action.payload;\r\n\r\n            const index = state.messages.findIndex(m => m.id === id);\r\n            let updatedMessages = [...state.messages];\r\n\r\n            if (sort) {\r\n                // отсортировать и создать, если нет собеседника в списке\r\n                let name = message.name;\r\n\r\n                if (index >= 0) {\r\n                    name = updatedMessages[index].name;\r\n                    updatedMessages = updatedMessages.filter(m => m.id !== id);\r\n                }\r\n                updatedMessages.unshift(createMessage(name, id, updated));\r\n            } else {\r\n                if (index >= 0) {\r\n                    updatedMessages[index].updated = updated;\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                messages: updatedMessages\r\n            };\r\n        }\r\n\r\n        // case 'MESSAGE_STATUS_UPDATE': {\r\n        //     const id = action.payload.id;\r\n        //     const updated = action.payload.updated;\r\n        //     const message = action.payload.message;\r\n        //\r\n        //     const updatedMessages = [...state.messages];\r\n        //     const index = updatedMessages.findIndex(m => m.id === id);\r\n        //     if (index < 0) {\r\n        //         if (!message) {\r\n        //             return state;\r\n        //         } else {\r\n        //             updatedMessages.unshift({...message, updated: true});\r\n        //             return {\r\n        //                 ...state,\r\n        //                 messages: updatedMessages\r\n        //             };\r\n        //         }\r\n        //     }\r\n        //\r\n        //     updatedMessages[index].updated = updated;\r\n        //\r\n        //     return {\r\n        //         ...state,\r\n        //         messages: updatedMessages\r\n        //     };\r\n        // }\r\n\r\n        // case 'MESSAGES_LIST_SORT': {\r\n        //     const id = action.payload;\r\n        //\r\n        //     const updatedMessages = [...state.messages];\r\n        //     const index = updatedMessages.findIndex(m => m.id === id);\r\n        //     if (index < 0) return state;\r\n        //\r\n        //     const thisItem = updatedMessages[index];\r\n        //     const newMessagesList = updatedMessages.filter(m => m.id !== id);\r\n        //     newMessagesList.unshift(thisItem);\r\n        //\r\n        //     return {\r\n        //         ...state,\r\n        //         messages: newMessagesList\r\n        //     };\r\n        // }\r\n\r\n        case 'MESSAGES_LIST_UPDATE':\r\n            return {\r\n                ...state,\r\n                messages: action.payload\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default messagesReducer;\r\n","const initialState = {\r\n    messages: [],\r\n    loading: false,\r\n    inChat: false,\r\n    chatId: null,\r\n    companion: {}\r\n};\r\n\r\nconst chatReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'FETCH_CHAT':\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n\r\n        case 'FETCH_CHAT_SUCCESS':\r\n            return {\r\n                ...state,\r\n                messages: action.payload.messages,\r\n                companion: {\r\n                    name: action.payload.companion.name,\r\n                },\r\n                loading: false\r\n            };\r\n\r\n        case 'CHAT_STATUS_UPDATE':\r\n            const {inChat = false, chatId = null} = action.payload;\r\n            return {\r\n                ...state,\r\n                inChat: inChat,\r\n                chatId: chatId\r\n            };\r\n\r\n        case 'CHAT_MESSAGE_ADD':\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, action.payload],\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default chatReducer;\r\n","import {combineReducers} from \"redux\";\r\nimport userReducer from \"./userReducer\";\r\nimport messagesReducer from \"./messageReducer\";\r\nimport chatReducer from \"./chatReducer\";\r\n\r\nconst reducer = combineReducers({\r\n    user: userReducer,\r\n    messages: messagesReducer,\r\n    chat: chatReducer\r\n});\r\n\r\nexport default reducer;\r\n","import { call, put, takeEvery, takeLatest, all } from 'redux-saga/effects'\r\nimport {ApiService} from '../../service';\r\n\r\nconst apiService = new ApiService();\r\n\r\n// worker Saga: will be fired on AUTH_CHECK action\r\nfunction* authCheckSaga(action) {\r\n    try {\r\n        const token = null;\r\n        if (token) {\r\n            const payload = {token, auth: true};\r\n            yield put({type: \"AUTH_CHECK_SUCCESS\", payload});\r\n        } else {\r\n\r\n        }\r\n    } catch (e) {\r\n\r\n    }\r\n}\r\n\r\nfunction* getUserDataSaga() {\r\n    const userData = yield apiService.getUserData();\r\n    yield put({type: \"USER_DATA_SUCCESS\", payload: userData});\r\n}\r\n\r\n// function* onAuth(action) {\r\n//     const {token} = action.payload;\r\n//     storageService.setToken(token);\r\n// }\r\n\r\n// function* watchAuthCheck() {\r\n//     yield takeEvery(\"AUTH_CHECK\", authCheckSaga);\r\n// }\r\n\r\n// function* watchGetUserData() {\r\n//     yield takeEvery(\"GET_USER\", getUserDataSaga);\r\n// }\r\n\r\n// function* mySaga2() {\r\n//     yield takeEvery(\"AUTH\", onAuth);\r\n// }\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        // watchAuthCheck(),\r\n        // watchGetUserData()\r\n    ])\r\n}\r\n","import {createStore, compose, applyMiddleware} from 'redux'\r\nimport reducer from \"./reducer\";\r\nimport reduxThunk from 'redux-thunk';\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport mySaga from './sagas'\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\n// const reduxDevTools = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\r\n\r\nconst logMiddleware = () => (next) => (action) => {\r\n    console.log(action);\r\n    return next(action);\r\n};\r\n\r\nconst store = createStore(reducer, compose(applyMiddleware(reduxThunk, sagaMiddleware, logMiddleware)));\r\n\r\n// sagaMiddleware.run(mySaga);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {BrowserRouter as Router} from \"react-router-dom\";\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\nimport {ApiService} from \"./service\";\nimport './style.css'\n\nimport store from \"./store\";\n\nimport {ApiServiceProvider} from \"./components/context/apiService\";\nimport {getUserData} from \"./store/actions\";\n\nconst apiService = new ApiService();\n\nconst token = localStorage.getItem('userData');\n\n// window.M.toast({html: 'I am a toast!'});\n\nif (token) {\n    store.dispatch(getUserData(apiService, token)()).then(e => {\n        renderDOM();\n    })\n} else {\n    renderDOM();\n}\n\nfunction renderDOM() {\n    ReactDOM.render(\n        <React.StrictMode>\n            <Provider store={store}>\n                <ApiServiceProvider value={apiService}>\n                    <Router>\n                        <App/>\n                    </Router>\n                </ApiServiceProvider>\n            </Provider>\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}