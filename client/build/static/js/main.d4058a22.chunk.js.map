{"version":3,"sources":["components/cart/index.jsx","store/actions/index.jsx","socket/index.js","components/header/index.jsx","components/home/index.jsx","components/store/index.jsx","components/private-route/index.jsx","components/context/apiService.js","components/hoc/withApiService.jsx","components/hoc/withoutOwner.jsx","components/login/index.jsx","components/register/index.jsx","components/context/vars.js","components/messages/MessagesList.jsx","components/spinner/index.jsx","store/actions/messageActions.jsx","store/actions/chatActions.jsx","components/messages/Chat.jsx","components/messages/index.jsx","components/user/profile-main.jsx","components/card/index.jsx","components/users/index.jsx","components/followers/index.jsx","components/following/index.jsx","components/user/post-create.jsx","components/user/profile-wall-list.jsx","components/user/index.jsx","helpers/index.jsx","components/hoc/userPage.jsx","components/hoc/mePage.jsx","components/search/index.jsx","components/app/index.jsx","serviceWorker.js","errors/UnauthorizedError.js","service/ApiService.jsx","store/reducer/userReducer.jsx","store/reducer/messageReducer.jsx","store/reducer/chatReducer.jsx","store/reducer/index.jsx","store/sagas/index.jsx","store/index.jsx","index.jsx"],"names":["Cart","console","log","this","props","React","Component","actionUpdateUserData","payload","type","getUserData","apiService","token","dispatch","then","response","res","body","data","auth","catch","err","socket","openSocket","process","connect","state","isAuthenticated","user","actionUnauthorize","localStorage","removeItem","logout","e","preventDefault","emit","id","className","to","exact","name","isAuth","map","link","idx","key","activeClassName","onClick","greeting","ChildComponent","component","rest","createContext","ApiServiceProvider","Provider","ApiServiceConsumer","Consumer","withApiService","Wrapped","withoutOwner","useSelector","pageId","computedMatch","params","toString","Login","form","email","password","message","color","text","login","actionAuthorize","actionGetUserData","errors","setState","history","push","onInputChange","target","value","feedback","onSubmit","onChange","placeholder","setItem","Register","ok","register","feedbackClasses","cn","checkAuth","withRouter","messagesList","openChat","publicPath","useContext","VariableProvider","item","style","backgroundImage","avatarUrl","updated","Spinner","actionFetchMessages","getListMessages","fetchMessagesSuccess","messages","updateMessageInList","updateMessagesList","list","sortMessagesList","fetchChat","receiverId","getChatMessages","sort","actionUpdateChatStatus","inChat","chatId","addChatMessage","actionSendMessage","companion","date","sendMessage","bindActionCreators","backToMessages","chatLoading","companionId","useState","setMessage","chatMessages","chat","listContainer","useRef","useEffect","current","scrollTop","scrollHeight","ref","msg","companionData","newMessage","Date","now","toId","fromId","queryParams","queryString","parse","location","search","showChat","setChat","loading","messagesLoading","currentContent","show","userName","profileCounters","isOwner","postsCount","imagesCount","followingCount","followersCount","avatarFileInput","avatarFormActive","setAvatarFormStatus","avatarPreviewImage","setAvatarPreviewImage","avatarClasses","resetAvatarForm","FormData","append","files","uploadAvatar","file","reader","FileReader","readAsDataURL","onloadend","previewImage","result","_cardId","_id","isFollowing","updateUser","cardId","follow","client","fetchFunc","users","setUsers","setLoading","followerId","index","findIndex","newItem","slice","f","fetchFollowers","bind","fetchFollowing","PostCreate","addPost","wallId","postText","setPostText","postImageSrc","setPostImageSrc","postFileInput","postFileButton","postSubmitButton","postImage","btnImageClasses","length","createPost","blur","post","aria-hidden","src","alt","cols","rows","click","ProfileWallList","posts","postsUI","removePostById","toggleComments","updatePostLikes","updatePostComments","updateCommentLikes","renderPostInfo","comments","postId","isLiked","likePost","likesCount","renderPostImage","info","imageUrl","renderComment","c","time","commentId","likeComment","comment","renderPostContent","isPhotoPost","topHtml","commentsOpened","elements","createComment","reset","typeText","removePost","isUserPage","userPageId","updateProfileCounters","setAvatarUrl","userData","setUserData","setPosts","setPostsUI","getPostsInterface","reduce","acc","p","getUserInfo","filter","userId","fetchPosts","postsInterface","newParams","currentState","newState","postIndex","commentIndex","newComment","UserPage","setProfileCounters","setResult","match","setMatch","useCallback","fetchUsers","App","prevProps","prevState","snapshot","setToken","fetch","on","getUser","mine","window","M","toast","html","updateChatTime","path","Home","Store","MePage","Followers","Following","Messages","Search","render","getNewMessage","Boolean","hostname","UnauthorizedError","args","status","Error","ApiService","URL","getRequest","method","headers","getToken","senderId","JSON","stringify","url","Promise","resolve","reject","r","json","formData","like","clientId","followingId","initialState","userReducer","action","createMessage","messagesReducer","m","updatedMessages","unshift","chatReducer","reducer","combineReducers","sagaMiddleware","createSagaMiddleware","store","__REDUX_DEVTOOLS_EXTENSION__","createStore","compose","applyMiddleware","reduxThunk","next","getItem","renderDOM","ReactDOM","StrictMode","document","getElementById","CLIENT_SOCKET_PORT","getState","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.d4058a22.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\nclass Cart extends React.Component {\r\n    componentDidMount() {\r\n        console.log(this.props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>cart</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Cart;\r\n","export const actionAuthorize = ({auth, token}) => {\r\n    localStorage.setItem('userData', token);\r\n\r\n    return {type: 'USER_AUTHORIZE', payload: {auth, token}};\r\n};\r\n\r\nexport const actionUnauthorize = () => {\r\n    localStorage.removeItem('userData');\r\n\r\n    return {type: 'USER_UNAUTHORIZE'};\r\n};\r\n\r\nexport const actionGetUserDataSuccess = (payload) => ({type: 'GET_USER_SUCCESS', payload});\r\nexport const actionGetUserDataFailure = () => ({type: 'GET_USER_FAILURE'});\r\nexport const actionGetUserData = () => ({type: 'GET_USER'});\r\nexport const actionUpdateUserData = (payload) => ({type: 'USER_DATA_UPDATE', payload});\r\n\r\nexport const getUserData = (apiService, token) => () => (dispatch) => {\r\n    dispatch(actionGetUserData());\r\n\r\n    return apiService.getUserData().then(response => {\r\n        const res = response.body.data;\r\n\r\n        const data = {\r\n            auth: true,\r\n            token,\r\n            ...res\r\n        };\r\n\r\n        return dispatch(actionGetUserDataSuccess(data));\r\n    }).catch(err => {\r\n        // console.log(err);\r\n        dispatch(actionGetUserDataFailure());\r\n    })\r\n};\r\n\r\nexport const auth = (isAuth) => ({type: 'AUTH', payload: isAuth});\r\n","import openSocket from 'socket.io-client';\r\nconst socket = openSocket(`http://localhost:${process.env.REACT_APP_SOCKET_PORT}`);\r\n\r\nexport default socket;\r\n","import React from 'react'\r\nimport {Link, NavLink} from 'react-router-dom'\r\nimport {connect} from 'react-redux'\r\nimport {actionUnauthorize} from \"../../store/actions\";\r\nimport './style.css'\r\n\r\nimport socket from \"../../socket\";\r\n\r\nconst Header = ({isAuthenticated, actionUnauthorize, user}) => {\r\n    const logout = (e) => {\r\n        e.preventDefault();\r\n        socket.emit('leaveRoom', {id: user.id});\r\n        actionUnauthorize();\r\n    };\r\n\r\n    const renderRight = () => {\r\n        if (isAuthenticated) {\r\n            return (\r\n                <ul className=\"navbar-nav ml-3 right\">\r\n                    <li className=\"nav-item\">\r\n                        <NavLink onClick={logout} activeClassName='active' className=\"nav-link ml-auto\" to=\"/logout\">Logout</NavLink>\r\n                    </li>\r\n                </ul>\r\n            )\r\n        } else {\r\n            return (\r\n                <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\r\n                    <li className=\"nav-item\">\r\n                        <NavLink activeClassName='active' className=\"nav-link ml-auto\" to=\"/login\">Login</NavLink>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <NavLink activeClassName='active' className=\"nav-link ml-2\" to=\"/register\">Sign up</NavLink>\r\n                    </li>\r\n                </ul>\r\n            )\r\n        }\r\n    };\r\n\r\n    const items = [\r\n        {exact: true, to: '/', name: 'Home', isAuth: false},\r\n        {exact: true, to: '/me', name: 'Me', isAuth: true},\r\n        {exact: true, to: '/followers', name: 'Followers', isAuth: true},\r\n        {exact: true, to: '/following', name: 'Following', isAuth: true},\r\n        // {exact: false, to: '/store', name: 'Store', isAuth: false},\r\n        {exact: false, to: '/messages/', name: 'Messages', isAuth: true},\r\n        {exact: true, to: '/search', name: 'Search', isAuth: true},\r\n    ];\r\n\r\n    return (\r\n        <header className=\"header\">\r\n            <nav>\r\n                <div className=\"nav-wrapper\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col s12\">\r\n                                <Link className=\"navbar-brand left\" to=\"/\">Art's Store</Link>\r\n                                <ul id=\"nav-mobile\" className=\"left hide-on-med-and-down\">\r\n                                    {\r\n                                        items.map((link, idx) => {\r\n                                            if ((!isAuthenticated && link.isAuth) || (isAuthenticated && !link.isAuth)) {\r\n                                                return null;\r\n                                            }\r\n\r\n                                            return (\r\n                                                <li key={idx} className=\"nav-item\">\r\n                                                    <NavLink activeClassName='active' className=\"nav-link\" exact={link.exact} to={link.to}>{link.name}</NavLink>\r\n                                                </li>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </ul>\r\n                                { renderRight() }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </header>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isAuthenticated: state.user.auth,\r\n        user: state.user\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        actionUnauthorize: () => dispatch(actionUnauthorize())\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header)\r\n","import React, {useCallback, useEffect, useState} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nconst Home = ({user}) => {\r\n    const greeting = user.auth ? <p>Hello, <b>{user.name}</b></p> : <p>Hello, Guest!</p>;\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h4 className=\"mb-3\">Home page</h4>\r\n            {greeting}\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n      return {\r\n          user: state.user\r\n      }\r\n};\r\n\r\nexport default connect(mapStateToProps)(Home)\r\n","import React from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nconst Store = (props) => {\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h3>Store page</h3>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default connect()(Store);\r\n","import React from \"react\"\r\nimport {Route, Redirect} from 'react-router-dom'\r\nimport {connect} from 'react-redux'\r\n\r\nconst PrivateRoute = ({component: ChildComponent, auth, ...rest}) => {\r\n    return (\r\n        <Route>\r\n            { auth ? <ChildComponent {...rest} /> : <Redirect to=\"/login\" />}\r\n        </Route>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        auth: state.user.auth\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute);\r\n","import React from \"react\";\r\n\r\nconst {\r\n    Provider: ApiServiceProvider,\r\n    Consumer: ApiServiceConsumer\r\n} = React.createContext();\r\n\r\nexport {\r\n    ApiServiceProvider,\r\n    ApiServiceConsumer\r\n}\r\n","import React from \"react\";\r\nimport {ApiServiceConsumer} from \"../context/apiService\";\r\n\r\nconst withApiService = (Wrapped) => {\r\n    return (props) => {\r\n        return <ApiServiceConsumer>\r\n            {\r\n                (apiService) => {\r\n                    return <Wrapped {...props} apiService={apiService}/>\r\n                }\r\n            }\r\n        </ApiServiceConsumer>\r\n    }\r\n};\r\n\r\nexport default withApiService;\r\n","import React from \"react\";\r\nimport {Redirect} from 'react-router-dom'\r\nimport {useSelector} from \"react-redux\";\r\n\r\nconst withoutOwner = (Wrapped) => {\r\n    return (props) => {\r\n        const user = useSelector(state => state.user);\r\n        const pageId = props.computedMatch.params.id;\r\n\r\n        if (pageId && user.id.toString() === pageId.toString()) {\r\n            return <Redirect to=\"/me\" />\r\n        }\r\n\r\n        return <Wrapped {...props}/>\r\n    }\r\n};\r\n\r\nexport default withoutOwner\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {withApiService} from '../hoc';\r\nimport {actionAuthorize, getUserData} from \"../../store/actions\";\r\n\r\nimport socket from \"../../socket\";\r\n\r\nclass Login extends React.Component {\r\n    state = {\r\n        form: {\r\n            email: '',\r\n            password: ''\r\n        },\r\n        message: {\r\n            color: 'red',\r\n            text: ''\r\n        }\r\n    };\r\n\r\n    login = (e) => {\r\n        e.preventDefault();\r\n        const {apiService, actionAuthorize, actionGetUserData} = this.props;\r\n        apiService.login(this.state.form).then(response => {\r\n            const res = response.body;\r\n\r\n            if (res.errors) {\r\n                this.setState({\r\n                    message: {color: 'red', text: res.message}\r\n                });\r\n            } else {\r\n                const token = res.token;\r\n                if (token) {\r\n                    actionAuthorize({auth: true, token});\r\n                    actionGetUserData(token).then((e) => {\r\n                        socket.emit('connected', {id: e.payload.id});\r\n                        this.props.history.push('/me');\r\n                    });\r\n                }\r\n            }\r\n        }).catch(e => {\r\n\r\n        })\r\n    };\r\n\r\n    onInputChange = (e) => {\r\n        this.setState({\r\n            form: {\r\n                ...this.state.form,\r\n                [e.target.name]: e.target.value\r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const {message} = this.state;\r\n\r\n        const feedback = message.text ? (\r\n            <div className=\"form-feedback\">\r\n                {message.text}\r\n            </div>\r\n        ) : null;\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"signup\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col s4 offset-s4 center\">\r\n                            <form className=\"form\" onSubmit={this.login}>\r\n                                <div className=\"form__title\">\r\n                                    Login\r\n                                </div>\r\n                                <div className=\"form__body\">\r\n                                    <div className=\"form-group\">\r\n                                        <input type=\"text\" onChange={this.onInputChange} name=\"email\" className=\"form-control\" placeholder=\"Email\" />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <input type=\"password\" onChange={this.onInputChange} name=\"password\" className=\"form-control\" placeholder=\"Password\" />\r\n                                    </div>\r\n                                </div>\r\n                                {feedback}\r\n                                <button type=\"submit\" className=\"btn btn-primary\">Sign in</button>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/*<div className=\"row\">*/}\r\n                {/*    <div className=\"col-4\">*/}\r\n                {/*        <div className=\"mb-4\">Login</div>*/}\r\n                {/*        <form onSubmit={this.login}>*/}\r\n                {/*            <div className=\"mb-3\">*/}\r\n                {/*                <div className=\"form-group\">*/}\r\n                {/*                    <input type=\"text\" onChange={this.onInputChange} name=\"email\" className=\"form-control\" placeholder=\"Email\" />*/}\r\n                {/*                </div>*/}\r\n                {/*                <div className=\"form-group\">*/}\r\n                {/*                    <input type=\"password\" onChange={this.onInputChange} name=\"password\" className=\"form-control\" placeholder=\"Password\" />*/}\r\n                {/*                </div>*/}\r\n                {/*            </div>*/}\r\n                {/*            {feedback}*/}\r\n                {/*            <button type=\"submit\" className=\"btn btn-primary\">Sign in</button>*/}\r\n                {/*        </form>*/}\r\n                {/*    </div>*/}\r\n                {/*</div>*/}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        token: state.user.token\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, {apiService, token}) => {\r\n    return {\r\n        actionGetUserData: (token) => dispatch(getUserData(apiService, token)()),\r\n        actionAuthorize: (payload) => dispatch(actionAuthorize(payload))\r\n    }\r\n};\r\n\r\nexport default withApiService(connect(mapStateToProps, mapDispatchToProps)(Login));\r\n","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {withApiService} from '../hoc'\r\nimport cn from 'classnames'\r\n\r\nimport './style.css'\r\n\r\nclass Register extends React.Component {\r\n    state = {\r\n        form: {\r\n            name: '',\r\n            email: '',\r\n            password: ''\r\n        },\r\n        message: {\r\n            ok: false,\r\n            text: ''\r\n        }\r\n    };\r\n\r\n    register = (e) => {\r\n        e.preventDefault();\r\n        const {apiService} = this.props;\r\n        apiService.register(this.state.form).then(response => {\r\n            const res = response.body;\r\n\r\n            if (res.errors) {\r\n                this.setState({\r\n                    message: {ok: false, text: res.message}\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    message: {ok: true, text: res.message},\r\n                    form: {name: '', email: '', password: ''}\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            // console.log(e);\r\n        })\r\n    };\r\n\r\n    onInputChange = (e) => {\r\n        this.setState({\r\n            form: {\r\n                ...this.state.form,\r\n                [e.target.name]: e.target.value\r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const {message} = this.state;\r\n\r\n        const feedbackClasses = cn({\r\n            'form-feedback': true,\r\n            'good': this.state.message.ok\r\n        });\r\n\r\n        const feedback = message.text ? (\r\n            <div className={feedbackClasses}>\r\n                {message.text}\r\n            </div>\r\n        ) : null;\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"signup\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col s4 offset-s4 center\">\r\n                            <form className=\"form\" onSubmit={this.register}>\r\n                                <div className=\"form__title\">\r\n                                    Sign up\r\n                                </div>\r\n                                <div className=\"form__body\">\r\n                                    <div className=\"form-group\">\r\n                                        <input type=\"text\" onChange={this.onInputChange} name=\"name\" className=\"form-control\" placeholder=\"Name\" value={this.state.form.name} />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <input type=\"text\" onChange={this.onInputChange} name=\"email\" className=\"form-control\" placeholder=\"Email\" value={this.state.form.email} />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <input type=\"password\" onChange={this.onInputChange} name=\"password\" className=\"form-control\" placeholder=\"Password\" value={this.state.form.password} />\r\n                                    </div>\r\n                                </div>\r\n                                {feedback}\r\n                                <button type=\"submit\" className=\"btn btn-primary\">Sign up</button>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {}\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        checkAuth: () => {}\r\n    }\r\n};\r\n\r\nexport default withApiService(connect(mapStateToProps, mapDispatchToProps)(Register));\r\n","import React from \"react\";\r\n\r\nexport default React.createContext();\r\n","import React, {useContext} from \"react\";\r\nimport {withRouter} from 'react-router-dom'\r\nimport VariableProvider from \"../context/vars\";\r\n\r\nconst MessagesList = (props) => {\r\n    const {messagesList, openChat} = props;\r\n\r\n    const {publicPath} = useContext(VariableProvider);\r\n\r\n    return (\r\n        <ul className=\"collection with-header\">\r\n            {messagesList.map((item, idx) => {\r\n                return (\r\n                    <li key={idx} className=\"collection-item\">\r\n                        <div className=\"message-item\">\r\n                            <div className=\"message-item__content\">\r\n                                <div className=\"message-item__avatar\">\r\n                                    <div style={{backgroundImage: `url(${publicPath}${item.avatarUrl})`}} className=\"message-item__avatar-icon\">\r\n\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"message-item__info\">\r\n                                    <div className=\"message-item__name\"><strong>{item.name}</strong></div>\r\n                                    <div className=\"message-item__text\">{item.text}</div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"message-item__actions\">\r\n                                {item.updated ? (\r\n                                    <div className=\"message-item__action\">\r\n                                        <button onClick={() => openChat(item.id)} className=\"btn btn-outline btn-danger btn-sm\">\r\n                                            <i className=\"fa fa-envelope-open\" />\r\n                                        </button>\r\n                                    </div>\r\n                                ) : null}\r\n                                <div className=\"message-item__action\">\r\n                                    <button onClick={() => openChat(item.id)} className=\"btn btn-outline btn-success btn-sm\">\r\n                                        <i className=\"fa fa-weixin\" />\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </li>\r\n                )\r\n            })}\r\n        </ul>\r\n    )\r\n};\r\n\r\nexport default withRouter(MessagesList)\r\n\r\n","import React from \"react\";\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <div className=\"preloader-wrapper big active\">\r\n            <div className=\"spinner-layer spinner-blue-only\">\r\n                <div className=\"circle-clipper left\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n                <div className=\"gap-patch\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n                <div className=\"circle-clipper right\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Spinner;\r\n","export const fetchMessagesRequest = (payload) => ({type: 'FETCH_MESSAGES', payload});\r\nexport const fetchMessagesSuccess = (payload) => ({type: 'FETCH_MESSAGES_SUCCESS', payload});\r\nexport const fetchMessagesFailure = () => ({type: 'FETCH_MESSAGES_FAILURE'});\r\n\r\nexport const actionFetchMessages = (apiService) => (id) => (dispatch) => {\r\n    dispatch(fetchMessagesRequest());\r\n\r\n    apiService.getListMessages(id).then(res => {\r\n        dispatch(fetchMessagesSuccess(res.body.messages));\r\n    }).catch(e => {\r\n        dispatch(fetchMessagesFailure());\r\n    })\r\n};\r\n\r\nexport const updateMessageInList = (payload) => ({type: 'MESSAGE_UPDATE', payload});\r\nexport const updateMessagesList = (list) => ({type: 'MESSAGES_LIST_UPDATE', payload: list});\r\nexport const sortMessagesList = ({id}) => ({type: 'MESSAGES_LIST_SORT', payload: id});\r\n","import {updateMessageInList} from \"./messageActions\";\r\n\r\nexport const fetchChatMessagesRequest = () => ({type: 'FETCH_CHAT'});\r\nexport const fetchChatSuccess = (payload) => ({type: 'FETCH_CHAT_SUCCESS', payload});\r\nexport const fetchChatFailure = () => ({type: 'FETCH_CHAT_FAILURE'});\r\nexport const fetchChat = (apiService) => (id, receiverId) => (dispatch) => {\r\n    dispatch(fetchChatMessagesRequest());\r\n\r\n    return apiService.getChatMessages(id, receiverId).then(res => {\r\n        dispatch(fetchChatSuccess(res.body));\r\n        dispatch(updateMessageInList({id: receiverId, updated: false, sort: false}));\r\n    }).catch(e => {\r\n        dispatch(fetchChatFailure());\r\n    })\r\n};\r\n\r\nexport const actionUpdateChatStatus = ({inChat, chatId}) => ({type: 'CHAT_STATUS_UPDATE', payload: {inChat, chatId}});\r\nexport const addChatMessage = ({name, text}) => ({type: 'CHAT_MESSAGE_ADD', payload: {name, text}});\r\n\r\nexport const actionSendMessage = (apiService) => (companion, user, message, date) => (dispatch) => {\r\n    const receiverId = companion.id;\r\n    return apiService.sendMessage(receiverId, user.id, message, companion, date);\r\n};\r\n","import React, {useEffect, useRef, useState} from \"react\";\r\nimport Spinner from \"../spinner\";\r\nimport {connect, useSelector} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {fetchChat, actionUpdateChatStatus, actionSendMessage, addChatMessage} from \"../../store/actions/chatActions\";\r\nimport {withApiService} from \"../hoc\";\r\n\r\nimport socket from \"../../socket\";\r\n\r\nconst Chat = (props) => {\r\n    const {backToMessages, chatLoading, user,\r\n        companionId, fetchChat, actionUpdateChatStatus, actionSendMessage} = props;\r\n\r\n    const [message, setMessage] = useState('');\r\n    const chatMessages = useSelector(state => state.chat.messages);\r\n    const companion = useSelector(state => state.chat.companion);\r\n    const listContainer = useRef(null);\r\n\r\n    useEffect(() => {\r\n        actionUpdateChatStatus({inChat: true, chatId: companionId});\r\n        fetchChat(user.id, companionId);\r\n\r\n        return () => {\r\n            actionUpdateChatStatus({inChat: false, chatId: null});\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (listContainer.current) {\r\n            listContainer.current.scrollTop = listContainer.current.scrollHeight;\r\n        }\r\n    }, [chatMessages]);\r\n\r\n    const sendMessage = (text, companion) => {\r\n        const newMessage = {\r\n            name: user.name,\r\n            text,\r\n            avatarUrl: user.avatarUrl\r\n        };\r\n        const date = Date.now();\r\n        actionSendMessage(companion, user, newMessage, date)\r\n            .then(e => {\r\n                socket.emit('sendMessage', {toId: companionId, fromId: user.id, companion, date, message: newMessage});\r\n            })\r\n            .catch(e => {});\r\n    };\r\n\r\n    const submitForm = (e) => {\r\n        e.preventDefault();\r\n        const companionData = {\r\n            id: companionId,\r\n            name: companion.name,\r\n            avatarUrl: companion.avatarUrl\r\n        };\r\n        sendMessage(message, companionData);\r\n        setMessage('');\r\n    };\r\n\r\n    const renderList = () => {\r\n        return (\r\n            <div ref={listContainer} className=\"chat__list\">\r\n                { chatMessages.map((msg, idx) => {\r\n                    return (\r\n                        <div key={idx} className=\"chat__item\">\r\n                            <strong>{msg.name}</strong>: {msg.text}\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat\">\r\n            <div className=\"chat__back\">\r\n                <button onClick={backToMessages} className=\"btn btn-primary\">Back</button>\r\n            </div>\r\n            <div className=\"chat__block\">\r\n                <div className=\"chat__left\">\r\n                    { chatLoading ? <Spinner /> : renderList() }\r\n                    <div className=\"chat__control\">\r\n                        <form onSubmit={submitForm} className=\"chat-control\">\r\n                            <div className=\"chat-control__left\">\r\n                                <input onChange={(e) => setMessage(e.target.value)} type=\"text\" className=\"form-control\" value={message} />\r\n                            </div>\r\n                            <div className=\"chat-control__right\">\r\n                                <button className=\"btn btn-success\">Send</button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n                <div className=\"chat__right\">\r\n                    <div className=\"chat__companion\">\r\n                        {(companion.name || !chatLoading) || <Spinner /> }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state.user\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, {apiService}) => {\r\n    return bindActionCreators({\r\n        fetchChat: fetchChat(apiService),\r\n        actionUpdateChatStatus,\r\n        addChatMessage,\r\n        actionSendMessage: actionSendMessage(apiService)\r\n    }, dispatch);\r\n};\r\n\r\nexport default withApiService(connect(mapStateToProps, mapDispatchToProps)(Chat))\r\n","import React, {useEffect, useState} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {withApiService} from '../hoc'\r\nimport MessagesList from './MessagesList';\r\nimport Chat from \"./Chat\";\r\nimport {useSelector} from \"react-redux\";\r\nimport queryString  from 'query-string';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nimport './style.css'\r\nimport {actionFetchMessages, updateMessagesList} from \"../../store/actions/messageActions\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport Spinner from \"../spinner\";\r\n\r\nconst Messages = (props) => {\r\n    const {user, actionFetchMessages} = props;\r\n    const queryParams = queryString.parse(props.location.search);\r\n\r\n    let showChat = false;\r\n    if (queryParams.chat) {\r\n        showChat = true;\r\n    }\r\n\r\n    const [chat, setChat] = useState(showChat);\r\n    const chatLoading = useSelector((state) => state.chat.loading);\r\n    const messagesLoading = useSelector((state) => state.messages.loading);\r\n    const messagesList = useSelector((state) => state.messages.messages);\r\n\r\n    useEffect(() => {\r\n        actionFetchMessages(user.id);\r\n    }, []);\r\n\r\n    const openChat = (receiverId) => {\r\n        setChat({show: true, receiverId});\r\n        props.history.push(`?chat=${receiverId}`);\r\n    };\r\n\r\n    const backToMessages = () => {\r\n        props.history.push(`./`);\r\n        setChat(false);\r\n    };\r\n\r\n    const currentContent = !chat ?\r\n        <MessagesList\r\n            openChat={(id) => openChat(id)}\r\n            messagesList={messagesList}\r\n        />\r\n        : <Chat\r\n            backToMessages={backToMessages}\r\n            companionId={queryParams.chat}\r\n            chatLoading={chatLoading}\r\n        />;\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"messages\">\r\n                { messagesLoading ? <Spinner/> : (\r\n                    <div className=\"messages__left\">\r\n                        {currentContent}\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state.user,\r\n        messages: state.messages\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, {apiService}) => {\r\n    return bindActionCreators({\r\n        actionFetchMessages: actionFetchMessages(apiService),\r\n        updateMessagesList\r\n    }, dispatch);\r\n};\r\n\r\nexport default withApiService(connect(mapStateToProps, mapDispatchToProps)(withRouter(Messages)))\r\n","import React, {useContext, useRef, useState} from 'react'\r\nimport {connect, useSelector} from \"react-redux\";\r\nimport cn from \"classnames\";\r\n\r\nimport {withApiService} from '../hoc';\r\n\r\nimport VariableProvider from '../context/vars'\r\nimport {bindActionCreators} from \"redux\";\r\nimport {actionUpdateUserData} from \"../../store/actions\";\r\n\r\nconst ProfileMain = (props) => {\r\n    const {\r\n        userName,\r\n        profileCounters,\r\n        isOwner,\r\n        avatarUrl,\r\n        apiService,\r\n        actionUpdateUserData\r\n    } = props;\r\n\r\n    const {\r\n        postsCount = 0,\r\n        imagesCount = 0,\r\n        followingCount = 0,\r\n        followersCount = 0,\r\n    } = profileCounters;\r\n\r\n    const {publicPath} = useContext(VariableProvider);\r\n\r\n    const avatarFileInput = useRef(null);\r\n    const user = useSelector(state => state.user);\r\n\r\n    const [avatarFormActive, setAvatarFormStatus] = useState(false);\r\n    const [avatarPreviewImage, setAvatarPreviewImage] = useState(null);\r\n\r\n    const avatarClasses = cn({\r\n        'avatar-form': true,\r\n        'active': avatarFormActive\r\n    });\r\n\r\n    const uploadAvatar = (e) => {\r\n        e.preventDefault();\r\n\r\n        const data = new FormData();\r\n        data.append('avatar', avatarFileInput.current.files[0]);\r\n        data.append('id', user.id);\r\n\r\n        apiService.uploadAvatar(data).then(e => {\r\n            resetAvatarForm();\r\n            actionUpdateUserData({\r\n                avatarUrl: e.body.avatarUrl\r\n            });\r\n        }).catch(e => {\r\n\r\n        })\r\n    };\r\n\r\n    const onFileUpload = (e) => {\r\n        const file = e.target.files[0];\r\n        if (file) {\r\n            setAvatarFormStatus(true);\r\n\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file);\r\n\r\n            reader.onloadend = function () {\r\n                const previewImage = reader.result;\r\n                setAvatarPreviewImage(previewImage);\r\n            };\r\n\r\n        } else {\r\n            setAvatarFormStatus(false);\r\n        }\r\n    };\r\n\r\n    const resetAvatarForm = () => {\r\n        setAvatarFormStatus(false);\r\n        avatarFileInput.current.value = null;\r\n    };\r\n\r\n    return (\r\n        <div className=\"profile-main\">\r\n            <div className=\"profile-main__background\" style={{backgroundImage: 'url(https://images2.alphacoders.com/209/thumb-1920-209080.jpg)'}}>\r\n\r\n            </div>\r\n            <div className=\"profile-main__info\">\r\n                <div className=\"profile-info\">\r\n                    <div className=\"profile-info__top\">\r\n                        <div className=\"container\">\r\n                            <div className=\"profile-info__avatar\">\r\n                                <div className=\"profile-info__avatar-image\" style={{backgroundImage: `url(${publicPath}${avatarUrl})`}}>\r\n                                    {\r\n                                        isOwner ? (\r\n                                            <div className=\"profile-info__form\">\r\n                                                <form onSubmit={uploadAvatar} className={avatarClasses}>\r\n                                                    <label className=\"avatar-form__label\">\r\n                                                        Upload a new photo\r\n                                                        <input ref={avatarFileInput} onChange={onFileUpload} type=\"file\"/>\r\n                                                    </label>\r\n                                                    <div className=\"avatar-form__content\">\r\n                                                        <div className=\"avatar-form__preview\" style={{backgroundImage: `url(${avatarPreviewImage})`}}>\r\n\r\n                                                        </div>\r\n                                                        <div className=\"avatar-form__actions\">\r\n                                                            <div className=\"avatar-form__apply\">\r\n                                                                <button type=\"submit\" className=\"btn\">Apply</button>\r\n                                                            </div>\r\n                                                            <div className=\"avatar-form__cancel\">\r\n                                                                <div onClick={resetAvatarForm} className=\"btn btn-danger\">Cancel</div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </form>\r\n                                            </div>\r\n                                        ) : null\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"profile-info__list\">\r\n                                <div className=\"profile-info__item\">\r\n                                    <div className=\"profile-info__value\">\r\n                                        {followersCount}\r\n                                    </div>\r\n                                    <div className=\"profile-info__key\">\r\n                                        Followers\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"profile-info__item\">\r\n                                    <div className=\"profile-info__value\">\r\n                                        {followingCount}\r\n                                    </div>\r\n                                    <div className=\"profile-info__key\">\r\n                                        Following\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"profile-info__item\">\r\n                                    <div className=\"profile-info__value\">\r\n                                        {imagesCount}\r\n                                    </div>\r\n                                    <div className=\"profile-info__key\">\r\n                                        Photos\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"profile-info__item\">\r\n                                    <div className=\"profile-info__value\">\r\n                                        {postsCount}\r\n                                    </div>\r\n                                    <div className=\"profile-info__key\">\r\n                                        Posts\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"profile-info__bottom\">\r\n                        <div className=\"container\">\r\n                            <div className=\"profile-main__name\">\r\n                                {userName}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {}\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({\r\n        actionUpdateUserData\r\n    }, dispatch)\r\n};\r\n\r\nexport default withApiService(connect(mapStateToProps, mapDispatchToProps)(ProfileMain))\r\n","import {NavLink} from \"react-router-dom\"\r\nimport React, {useContext} from \"react\"\r\n\r\nimport VariableProvider from '../context/vars'\r\nimport {withApiService} from '../hoc'\r\n\r\nimport './style.css'\r\nimport {bindActionCreators} from \"redux\"\r\nimport {actionUpdateUserData} from \"../../store/actions\"\r\nimport {connect} from \"react-redux\"\r\n\r\nconst UserCard = (props) => {\r\n    const {\r\n        _cardId,\r\n        _id,\r\n        name,\r\n        followersCount,\r\n        followingCount,\r\n        postsCount,\r\n        avatarUrl,\r\n        isFollowing,\r\n        apiService,\r\n        actionUpdateUserData,\r\n        updateUser\r\n    } = props;\r\n\r\n    const {publicPath} = useContext(VariableProvider);\r\n\r\n    const follow = (cardId) => {\r\n        apiService.follow(_id, cardId, isFollowing).then(res => {\r\n            if (res.body.ok) {\r\n                const { isFollowing, client } = res.body;\r\n\r\n                updateUser(cardId, {\r\n                    isFollowing\r\n                });\r\n\r\n                actionUpdateUserData({\r\n                    followingCount: client.followingCount,\r\n                    followersCount: client.followersCount\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            console.log(e);\r\n        })\r\n    };\r\n\r\n    return (\r\n        <div className=\"user-card\">\r\n            <div className=\"user-card__body\">\r\n                <div className=\"user-card__head\">\r\n                    <div className=\"user-card__image\" style={{backgroundImage: `url(${publicPath}${avatarUrl})`}}>\r\n\r\n                    </div>\r\n                </div>\r\n                <div className=\"user-card__name\">\r\n                    {name}\r\n                </div>\r\n            </div>\r\n            <div className=\"user-card__actions\">\r\n                <div onClick={() => follow(_cardId)} className=\"user-card__action link-yellow\">\r\n                    {\r\n                        isFollowing ? 'Unfollow' : 'Follow'\r\n                    }\r\n                </div>\r\n                <NavLink className=\"user-card__action link-yellow\" to={`/user/${_cardId}`}>Page</NavLink>\r\n                <NavLink className=\"user-card__action link-yellow\" to={`/messages/?chat=${_cardId}`}>Message</NavLink>\r\n            </div>\r\n            <div className=\"user-card__info\">\r\n                <div className=\"user-card__info-item\">\r\n                    <div className=\"user-card__info-key\">\r\n                        {postsCount}\r\n                    </div>\r\n                    <div className=\"user-card__info-value\">\r\n                        Posts\r\n                    </div>\r\n                </div>\r\n                <div className=\"user-card__info-item\">\r\n                    <div className=\"user-card__info-key\">\r\n                        {followersCount}\r\n                    </div>\r\n                    <div className=\"user-card__info-value\">\r\n                        Followers\r\n                    </div>\r\n                </div>\r\n                <div className=\"user-card__info-item\">\r\n                    <div className=\"user-card__info-key\">\r\n                        {followingCount}\r\n                    </div>\r\n                    <div className=\"user-card__info-value\">\r\n                        Following\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {}\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({\r\n        actionUpdateUserData\r\n    }, dispatch)\r\n};\r\n\r\nexport default withApiService(connect(mapStateToProps, mapDispatchToProps)(UserCard))\r\n","import React, {useEffect, useState} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {useSelector} from \"react-redux\";\r\nimport {withApiService} from '../hoc';\r\nimport UserCard from \"../card\";\r\nimport Spinner from \"../spinner\";\r\n\r\nimport './style.css'\r\n\r\nconst Users = (props) => {\r\n    const {fetchFunc} = props;\r\n    const user = useSelector(state => state.user);\r\n    const {id} = user;\r\n    const [users, setUsers] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const fetchUsers = () => {\r\n        setLoading(true);\r\n\r\n        fetchFunc(user.id).then(res => {\r\n            setUsers(res.body.users);\r\n            setLoading(false);\r\n        }).catch((e) => {\r\n\r\n        })\r\n    };\r\n\r\n    const updateUser = (followerId, params) => {\r\n        setUsers((state) => {\r\n            const index = state.findIndex((item) => item._id === followerId);\r\n            const newItem = {\r\n                ...state[index],\r\n                ...params\r\n            };\r\n\r\n            return [...state.slice(0, index), newItem, ...state.slice(index + 1)];\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchUsers();\r\n    } ,[fetchFunc]);\r\n\r\n    return (\r\n        <div className=\"users\">\r\n            {\r\n                loading ? (\r\n                    <Spinner/>\r\n                ) : (\r\n                    <div className=\"users__list\">\r\n                        {\r\n                            users.map(f => {\r\n                                return (\r\n                                    <div key={f._id} className=\"users__item\">\r\n                                        <UserCard\r\n                                            name={f.name}\r\n                                            followersCount={f.followersCount}\r\n                                            followingCount={f.followingCount}\r\n                                            postsCount={f.postsCount}\r\n                                            avatarUrl={f.avatarUrl}\r\n                                            _id={id}\r\n                                            _cardId={f._id}\r\n                                            isFollowing={f.isFollowing}\r\n                                            updateUser={updateUser}\r\n                                        />\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default withApiService(connect()(Users));\r\n","import React, {useEffect, useState} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport ProfileMain from \"../user/profile-main\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {withApiService} from '../hoc';\r\nimport Users from '../users';\r\n\r\nconst Followers = (props) => {\r\n    const {apiService} = props;\r\n    const user = useSelector(state => state.user);\r\n\r\n    const {followersCount, followingCount, imagesCount, postsCount, avatarUrl, name, id} = user;\r\n\r\n    const profileCounters = {\r\n        followersCount, followingCount, imagesCount, postsCount\r\n    };\r\n\r\n    return (\r\n        <div className=\"profile\">\r\n            <div className=\"profile__top\">\r\n                <ProfileMain\r\n                    profileCounters={profileCounters}\r\n                    avatarUrl={avatarUrl}\r\n                    userName={name}\r\n                    isOwner={true}\r\n                />\r\n            </div>\r\n            <div className=\"profile__bottom\">\r\n                <div className=\"container\">\r\n                    <Users fetchFunc={apiService.fetchFollowers.bind(apiService)} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default withApiService(connect()(Followers));\r\n","import React, {useEffect, useState} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport ProfileMain from \"../user/profile-main\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {withApiService} from '../hoc';\r\nimport Users from '../users';\r\n\r\nconst Following = (props) => {\r\n    const {apiService} = props;\r\n    const user = useSelector(state => state.user);\r\n\r\n    const {followersCount, followingCount, imagesCount, postsCount, avatarUrl, name} = user;\r\n\r\n    const profileCounters = {\r\n        followersCount, followingCount, imagesCount, postsCount\r\n    };\r\n\r\n    return (\r\n        <div className=\"profile\">\r\n            <div className=\"profile__top\">\r\n                <ProfileMain\r\n                    profileCounters={profileCounters}\r\n                    avatarUrl={avatarUrl}\r\n                    userName={name}\r\n                    isOwner={true}\r\n                />\r\n            </div>\r\n            <div className=\"profile__bottom\">\r\n                <div className=\"container\">\r\n                    <Users fetchFunc={apiService.fetchFollowing.bind(apiService)}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default withApiService(connect()(Following));\r\n","import React, {useRef, useState} from \"react\";\r\nimport cn from 'classnames'\r\n\r\nconst PostCreate = (props) => {\r\n    const {apiService, user, addPost, wallId} = props;\r\n\r\n    const [postText, setPostText] = useState('');\r\n    const [postImageSrc, setPostImageSrc] = useState(null);\r\n\r\n    const postFileInput = useRef(null);\r\n    const postFileButton = useRef(null);\r\n    const postSubmitButton = useRef(null);\r\n    const postImage = useRef(null);\r\n\r\n    const onChangePostText = (e) => {\r\n        setPostText(e.target.value)\r\n    };\r\n\r\n    const onFileUpload = (e) => {\r\n        if (postImageSrc){\r\n            setPostImageSrc(null);\r\n            postFileButton.current.blur();\r\n        } else {\r\n            postFileInput.current.click();\r\n        }\r\n    };\r\n\r\n    const onPostFileChange = (e) => {\r\n        const file = e.target.files[0];\r\n        if (file) {\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file);\r\n\r\n            postFileButton.current.blur();\r\n\r\n            reader.onloadend = function () {\r\n                const previewImage = reader.result;\r\n                setPostImageSrc(previewImage);\r\n            };\r\n        } else {\r\n            setPostImageSrc(null);\r\n        }\r\n    };\r\n\r\n    const resetForm = () => {\r\n        setPostText('');\r\n        setPostImageSrc(null);\r\n        postSubmitButton.current.blur();\r\n    };\r\n\r\n    const createPost = (e) => {\r\n        e.preventDefault();\r\n\r\n        const file = postFileInput.current.files[0];\r\n\r\n        if (postText.length > 0 || file) {\r\n            const data = new FormData();\r\n            data.append('text', postText);\r\n            data.append('id', user.id);\r\n            data.append('wallId', wallId);\r\n            data.append('image', file);\r\n\r\n            apiService.createPost(data).then(res => {\r\n                resetForm();\r\n                addPost(res.body.post);\r\n            }).catch(e => {\r\n                // console.log(e.message);\r\n            })\r\n        }\r\n    };\r\n\r\n    const btnImageClasses = cn({\r\n        'btn': true,\r\n        'btn-danger': postImageSrc\r\n    });\r\n\r\n    return (\r\n        <form onSubmit={createPost} className=\"post-create\">\r\n            <input onChange={onPostFileChange} ref={postFileInput} className=\"hidden\" type=\"file\"/>\r\n            <div className=\"post-create__icon\">\r\n                <div className=\"post-icon\">\r\n                    <i className=\"fa fa-comments-o\" aria-hidden=\"true\" />\r\n                </div>\r\n            </div>\r\n            <div className=\"post-create__wrap\">\r\n                { postImageSrc ? (\r\n                    <div className=\"post-create__image\">\r\n                        <img ref={postImage} src={postImageSrc} alt=\"\"/>\r\n                    </div>\r\n                ) : null }\r\n                <div className=\"post-create__input\">\r\n                    <textarea onChange={onChangePostText} placeholder=\"Write a new post...\" className=\"textarea-theme\" value={postText} id=\"\" cols=\"30\" rows=\"10\">\r\n                    </textarea>\r\n                </div>\r\n                <div className=\"post-create__actions\">\r\n                    <div className=\"post-create__action\">\r\n                        <div ref={postFileButton} onClick={onFileUpload} className={btnImageClasses}>\r\n                            <i className=\"fa fa-picture-o\"\r\n                               aria-hidden=\"true\" />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"post-create__action\">\r\n                        <button ref={postSubmitButton} type=\"submit\" className=\"btn\">Post</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nexport default PostCreate;\r\n","import React, {useContext} from \"react\";\r\nimport VariableProvider from '../context/vars'\r\n\r\nconst ProfileWallList = (props) => {\r\n    const {posts, postsUI, isOwner = false, user, apiService, removePostById, toggleComments, updatePostLikes, updatePostComments, updateCommentLikes} = props;\r\n    const {publicPath} = useContext(VariableProvider);\r\n\r\n    const createComment = (e, postId) => {\r\n        e.preventDefault();\r\n        const text = e.target.elements[0].value;\r\n        if (text) {\r\n            apiService.createComment(user.id, postId, text).then((res) => {\r\n                updatePostComments(postId, res.body.comments);\r\n            }).catch(e => {\r\n                // console.log(e.message)\r\n            });\r\n            e.target.reset();\r\n        }\r\n    };\r\n\r\n    const removePost = (id) => {\r\n        apiService.removePost(id).then((res) => {\r\n            removePostById(id);\r\n        }).catch(e => {\r\n            // console.log(e.message)\r\n        })\r\n    };\r\n\r\n    const likePost = (postId, isLiked) => {\r\n        apiService.likePost(user.id, postId, isLiked).then(res => {\r\n            if (res.body.ok) {\r\n                const { post } = res.body;\r\n                updatePostLikes(post);\r\n            }\r\n        }).catch(e => {\r\n            // console.log(e.message)\r\n        })\r\n    };\r\n\r\n    const likeComment = (commentId, isLiked, postId) => {\r\n        apiService.likeComment(user.id, commentId, isLiked).then(res => {\r\n            if (res.body.ok) {\r\n                const { comment } = res.body;\r\n                updateCommentLikes(postId, comment);\r\n            }\r\n        }).catch(e => {\r\n            console.log(e.message)\r\n        })\r\n    };\r\n\r\n    const renderPostIcon = (isImage) => {\r\n        if (isImage) {\r\n            return (\r\n                <div className=\"post-icon post-icon_green\">\r\n                    <i className=\"fa fa-picture-o\" aria-hidden=\"true\"/>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className=\"post-icon post-icon_tomato\">\r\n                <i className=\"fa fa-pencil\" aria-hidden=\"true\"/>\r\n            </div>\r\n        )\r\n    };\r\n\r\n    const renderPostInfo = (post) => {\r\n        return (\r\n            <div className=\"post-info\">\r\n                <div className=\"post-info__comments\">\r\n                    <div onClick={() => toggleComments(post._id)} className=\"post-comments-button\">\r\n                        <i className=\"fa fa-comment-o\" aria-hidden=\"true\"/> {post.comments.length} Comments\r\n                    </div>\r\n                </div>\r\n                <div className=\"post-info__likes\">\r\n                    <div onClick={() => likePost(post._id, post.isLiked)} className=\"post-likes-button\">\r\n                        {\r\n                            !post.isLiked ? (\r\n                                <i className=\"fa fa-heart-o\" aria-hidden=\"true\"/>\r\n                            ) : (\r\n                                <i style={{color: 'red'}} className=\"fa fa-heart\" aria-hidden=\"true\"/>\r\n                            )\r\n                        } {post.likesCount} Likes\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    };\r\n\r\n    const renderPostImage = (post, info = true) => {\r\n        return (\r\n            <div className=\"profile-post__image\">\r\n                <img src={`${publicPath}${post.imageUrl}`} alt=\"\"/>\r\n                {\r\n                    info ? renderPostInfo(post) : null\r\n                }\r\n            </div>\r\n        )\r\n    };\r\n\r\n    const renderComment = (c, post) => {\r\n        return (\r\n            <div className=\"comment\">\r\n                <div className=\"comment__avatar\" style={{backgroundImage: `url(${publicPath}${c.user.avatarUrl})`}}>\r\n\r\n                </div>\r\n                <div className=\"comment__content\">\r\n                    <div className=\"comment__head\">\r\n                        <div className=\"comment__name\">\r\n                            <strong>{c.user.name}</strong>\r\n                        </div>\r\n                        <div className=\"comment__date\">\r\n                            {c.time}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"comment__body\">\r\n                        <div className=\"comment__text\">\r\n                            {c.text}\r\n                        </div>\r\n                        <div className=\"comment__likes\">\r\n                            <div onClick={() => likeComment(c._id, c.isLiked, post._id)} className=\"comment-like\">\r\n                                {\r\n                                    c.isLiked ? (\r\n                                        <>\r\n                                            <i style={{color: 'red'}} className=\"fa fa-heart\" aria-hidden=\"true\"/>\r\n                                        </>\r\n                                    ) : (\r\n                                        <>\r\n                                            <i className=\"fa fa-heart-o\" aria-hidden=\"true\"/>\r\n                                        </>\r\n                                    )\r\n                                }\r\n                                &nbsp;{c.likesCount > 0 ? c.likesCount : null}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    };\r\n\r\n    const renderPostContent = (post, isPhotoPost) => {\r\n        let topHtml = null;\r\n\r\n        if (isPhotoPost) {\r\n            topHtml = renderPostImage(post);\r\n        } else {\r\n            topHtml = (\r\n                <>\r\n                    {\r\n                        post.imageUrl ? (\r\n                            renderPostImage(post, false)\r\n                        ) : null\r\n                    }\r\n                    <div className=\"profile-post__body\">\r\n                        <div className=\"profile-post__content\">\r\n                            { post.text }\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"profile-post__info\">\r\n                        { renderPostInfo(post) }\r\n                    </div>\r\n                </>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <>\r\n                { topHtml }\r\n                {\r\n                    postsUI[post._id].commentsOpened ? (\r\n                        <div className=\"profile-post__comments\">\r\n                            <div className=\"post-comment\">\r\n                                {\r\n                                    post.comments.length ? (\r\n                                        <div className=\"post-comment__list\">\r\n                                            { post.comments.map(c => {\r\n                                                return (\r\n                                                    <div key={c._id} className=\"post-comment__item\">\r\n                                                        { renderComment(c, post) }\r\n                                                    </div>\r\n                                                )\r\n                                            }) }\r\n                                        </div>\r\n                                    ) : null\r\n                                }\r\n                                <div className=\"post-comment__create\">\r\n                                    <form onSubmit={(e) => createComment(e, post._id)} className=\"comment-create\">\r\n                                        <div className=\"comment-create__input\">\r\n                                            <textarea className=\"textarea-theme\" cols=\"30\" rows=\"10\" />\r\n                                        </div>\r\n                                        <div className=\"comment-create__actions\">\r\n                                            <div className=\"comment-create__action\">\r\n                                                <button className=\"btn\">Comment</button>\r\n                                            </div>\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    ) : null\r\n                }\r\n            </>\r\n        )\r\n    };\r\n\r\n    const renderPosts = () => {\r\n        return posts.map((post) => {\r\n            const isPhotoPost = post.imageUrl && !post.text;\r\n            const typeText = isPhotoPost ? 'a photo' : 'an article';\r\n\r\n            return (\r\n                <div key={post._id} className=\"profile-wall__item\">\r\n                    <div className=\"profile-post\">\r\n                        <div className=\"profile-post__icon\">\r\n                            { renderPostIcon(isPhotoPost) }\r\n                        </div>\r\n                        {\r\n                            isOwner ? (\r\n                                <div className=\"profile-post__remove\">\r\n                                    <div onClick={() => removePost(post._id)} className=\"post-icon post-icon_remove\">\r\n                                        <i className=\"fa fa-times\" aria-hidden=\"true\"/>\r\n                                    </div>\r\n                                </div>\r\n                            ) : null\r\n                        }\r\n                        <div className=\"profile-post__head\">\r\n                            <div className=\"profile-post__head-left\">\r\n                                <span className=\"profile-post__name\">{post.user.name}</span> posted {typeText}\r\n                            </div>\r\n                            <div className=\"profile-post__head-right\">\r\n                                { post.time }\r\n                            </div>\r\n                        </div>\r\n                        { renderPostContent(post, isPhotoPost) }\r\n                    </div>\r\n                </div>\r\n            )\r\n        })\r\n    };\r\n\r\n    return (\r\n        <div className=\"profile-wall__list\">\r\n            { renderPosts() }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ProfileWallList;\r\n","import React, {useEffect, useState} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {withApiService, withoutOwner} from '../hoc'\r\nimport {actionUpdateUserData} from \"../../store/actions\"\r\nimport {bindActionCreators} from \"redux\"\r\n\r\nimport PostCreate from \"./post-create\"\r\nimport ProfileWallList from \"./profile-wall-list\"\r\nimport ProfileMain from \"./profile-main\"\r\n\r\nimport {getUserInfo} from \"../../helpers\"\r\n\r\nimport './style.css'\r\n\r\nconst User = (props) => {\r\n    const {\r\n        apiService,\r\n        actionUpdateUserData,\r\n        user,\r\n        isUserPage,\r\n        userPageId,\r\n        profileCounters,\r\n        updateProfileCounters,\r\n        avatarUrl,\r\n        setAvatarUrl\r\n    } = props;\r\n\r\n    const isOwner = !isUserPage;\r\n\r\n    const [userData, setUserData] = useState({});\r\n\r\n    const [posts, setPosts] = useState([]);\r\n    const [postsUI, setPostsUI] = useState([]);\r\n\r\n    const getPostsInterface = (posts) => {\r\n        return posts.reduce(function(acc, p) {\r\n            return {...acc, [p._id]: {\r\n                    commentsOpened: false\r\n                }}\r\n        }, {});\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (isUserPage) {\r\n            // other pages\r\n            apiService.getUserInfo(userPageId, user.id).then(res => {\r\n                const data = res.body.data;\r\n                const {postsCount, imagesCount} = getUserInfo(data.posts);\r\n\r\n                setAvatarUrl(data.avatarUrl);\r\n                updateProfileCounters({\r\n                    followersCount: data.followersCount,\r\n                    followingCount: data.followingCount,\r\n                    postsCount,\r\n                    imagesCount\r\n                });\r\n\r\n                setUserData({\r\n                    avatarUrl: data.avatarUrl,\r\n                    userName: data.name,\r\n                    userId: data.id,\r\n                    isFollowing: data.isFollowing\r\n                });\r\n\r\n                setPostsUI(getPostsInterface(data.posts));\r\n                setPosts(data.posts);\r\n            }).catch(e => {\r\n                // console.log(e);\r\n            })\r\n        } else {\r\n            // me\r\n            setUserData({\r\n                ...userData,\r\n                avatarUrl: user.avatarUrl,\r\n                userName: user.name,\r\n                userId: user.id\r\n            });\r\n\r\n            apiService.fetchPosts(user.id).then(res => {\r\n                setPostsUI(getPostsInterface(res.body.posts));\r\n                setPosts(res.body.posts);\r\n            }).catch(e => {\r\n                // console.log(e.message)\r\n            })\r\n        }\r\n    }, []);\r\n\r\n    const updateUserData = (key, value) => {\r\n        setUserData(state => {\r\n            return {\r\n                ...state,\r\n                [key]: value\r\n            }\r\n        });\r\n    };\r\n\r\n    const follow = () => {\r\n        apiService.follow(user.id, userPageId, isFollowing).then(res => {\r\n            const { isFollowing, client, user } = res.body;\r\n            updateUserData('isFollowing', isFollowing);\r\n            updateProfileCounters({\r\n                followingCount: user.followingCount,\r\n                followersCount: user.followersCount\r\n            });\r\n            actionUpdateUserData({\r\n                followingCount: client.followingCount,\r\n                followersCount: client.followersCount\r\n            });\r\n        }).catch(e => {\r\n\r\n        })\r\n    };\r\n\r\n    const toggleComments = (postId) => {\r\n        const currentState = postsUI[postId].commentsOpened;\r\n        const newState = {...postsUI, [postId]: {\r\n                commentsOpened: !currentState\r\n        }};\r\n        setPostsUI(newState);\r\n    };\r\n\r\n    const updatePostComments = (postId, comments) => {\r\n        setPosts((state) => {\r\n            const index = state.findIndex((item) => item._id === postId);\r\n            const newItem = {\r\n                ...state[index],\r\n                comments\r\n            };\r\n\r\n            return [...state.slice(0, index), newItem, ...state.slice(index + 1)];\r\n        });\r\n    };\r\n\r\n    const addPost = (post) => {\r\n        const postsInterface = {...postsUI, [post._id]: {commentsOpened: false}};\r\n        setPostsUI(postsInterface);\r\n        setPosts((state) => {\r\n            return [post, ...state]\r\n        });\r\n\r\n        const postsCount = profileCounters.postsCount + 1;\r\n        const imagesCount = post.imageUrl ? profileCounters.imagesCount + 1 : profileCounters.imagesCount;\r\n\r\n        updateProfileCounters({\r\n            postsCount,\r\n            imagesCount\r\n        })\r\n    };\r\n\r\n    const updatePostLikes = (post) => {\r\n        setPosts((state) => {\r\n            const {_id, ...newParams} = post;\r\n            const index = state.findIndex((item) => item._id === _id);\r\n            const newItem = {\r\n                ...state[index],\r\n                ...newParams\r\n            };\r\n\r\n            return [...state.slice(0, index), newItem, ...state.slice(index + 1)];\r\n        });\r\n    };\r\n\r\n    const updateCommentLikes = (postId, comment) => {\r\n        setPosts((state) => {\r\n            const {_id, ...newParams} = comment;\r\n            const postIndex = state.findIndex((item) => item._id === postId);\r\n            const post = state[postIndex];\r\n            const commentIndex = post.comments.findIndex((item) => item._id === comment._id);\r\n            const c = post.comments[commentIndex];\r\n            const newComment = {\r\n                ...c,\r\n                ...newParams\r\n            };\r\n            const newItem = {\r\n                ...post,\r\n                comments: [...post.comments.slice(0, commentIndex), newComment, ...post.comments.slice(commentIndex + 1)]\r\n            };\r\n\r\n            return [...state.slice(0, postIndex), newItem, ...state.slice(postIndex + 1)];\r\n        });\r\n    };\r\n\r\n    const removePostById = (id) => {\r\n        const index = posts.findIndex(p => p._id === id);\r\n        const post = posts[index];\r\n\r\n        const postsCount = profileCounters.postsCount - 1;\r\n        const imagesCount = post.imageUrl ? profileCounters.imagesCount - 1 : profileCounters.imagesCount;\r\n\r\n        updateProfileCounters({\r\n            postsCount,\r\n            imagesCount\r\n        });\r\n\r\n        setPosts((state) => {\r\n            return state.filter(p => p._id !== id);\r\n        });\r\n    };\r\n\r\n    // const {userName, userId, followersCount, followingCount, postsCount, imagesCount, isFollowing} = userData;\r\n    const {userName, userId, isFollowing} = userData;\r\n\r\n    return (\r\n        <div className=\"profile\">\r\n            <div className=\"profile__top\">\r\n                <ProfileMain\r\n                    profileCounters={profileCounters}\r\n                    isOwner={isOwner}\r\n                    userName={userName}\r\n                    avatarUrl={avatarUrl}\r\n                />\r\n            </div>\r\n            <div className=\"profile__bottom\">\r\n                <div className=\"container\">\r\n                    {\r\n                        !isOwner ? (\r\n                            <div className=\"profile__actions\">\r\n                                <div className=\"profile__follow\">\r\n                                    {\r\n                                        isFollowing ? (\r\n                                            <div onClick={follow} className=\"btn btn-danger\">Unfollow</div>\r\n                                        ) : (\r\n                                            <div onClick={follow} className=\"btn\">Follow</div>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        ) : null\r\n                    }\r\n                    <div className=\"profile__wall\">\r\n                        <div className=\"profile__wall-bar\">\r\n\r\n                        </div>\r\n                        <div className=\"profile__wall-left\">\r\n                            <div className=\"profile-wall\">\r\n                                <div className=\"profile-wall__create\">\r\n                                    <PostCreate apiService={apiService} user={props.user} wallId={userId} addPost={addPost} />\r\n                                </div>\r\n                                <ProfileWallList\r\n                                    isOwner={isOwner}\r\n                                    posts={posts}\r\n                                    postsUI={postsUI}\r\n                                    apiService={apiService}\r\n                                    user={user}\r\n                                    removePostById={removePostById}\r\n                                    updatePostLikes={updatePostLikes}\r\n                                    updatePostComments={updatePostComments}\r\n                                    toggleComments={toggleComments}\r\n                                    updateCommentLikes={updateCommentLikes}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state.user\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({\r\n        actionUpdateUserData\r\n    }, dispatch)\r\n};\r\n\r\nexport default withoutOwner(withApiService(connect(mapStateToProps, mapDispatchToProps)(User)))\r\n","const getUserInfo = (posts) => {\r\n    const postsCount = posts.length;\r\n    const postsWithImages = posts.filter(p => p.imageUrl);\r\n    const imagesCount = postsWithImages.length;\r\n\r\n    return {\r\n        postsCount,\r\n        imagesCount\r\n    }\r\n};\r\n\r\nexport {\r\n    getUserInfo\r\n}\r\n","import React, {useState} from \"react\";\r\nimport User from '../user';\r\n\r\nconst UserPage = (props) => {\r\n    const userId = props.computedMatch.params.id;\r\n\r\n    const [avatarUrl, setAvatarUrl] = useState(null);\r\n\r\n    const [profileCounters, setProfileCounters] = useState({});\r\n\r\n    const updateProfileCounters = (params) => {\r\n        setProfileCounters((state) => {\r\n            return {\r\n                ...state,\r\n                ...params\r\n            }\r\n        });\r\n    };\r\n\r\n    return <User\r\n        setAvatarUrl={setAvatarUrl}\r\n        avatarUrl={avatarUrl}\r\n        userPageId={userId}\r\n        profileCounters={profileCounters}\r\n        updateProfileCounters={updateProfileCounters}\r\n        isUserPage={true} {...props}\r\n    />\r\n};\r\n\r\nexport default UserPage;\r\n","import React from \"react\";\r\nimport User from '../user';\r\nimport {connect, useSelector} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {actionUpdateUserData} from \"../../store/actions\";\r\n\r\nconst MePage = (props) => {\r\n    const {actionUpdateUserData} = props;\r\n\r\n    const user = useSelector(state => state.user);\r\n\r\n    const avatarUrl = useSelector(state => state.user.avatarUrl);\r\n\r\n    const profileCounters = {\r\n        followersCount: user.followersCount,\r\n        followingCount: user.followingCount,\r\n        imagesCount: user.imagesCount,\r\n        postsCount: user.postsCount\r\n    };\r\n\r\n    const updateProfileCounters = (params) => {\r\n        actionUpdateUserData(params);\r\n    };\r\n\r\n    return <User\r\n        avatarUrl={avatarUrl}\r\n        profileCounters={profileCounters}\r\n        updateProfileCounters={updateProfileCounters}\r\n        {...props}\r\n    />\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {}\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({\r\n        actionUpdateUserData\r\n    }, dispatch)\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MePage)\r\n","import React, {useCallback, useState} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport ProfileMain from \"../user/profile-main\"\r\nimport {useSelector} from \"react-redux\"\r\nimport {withApiService} from '../hoc'\r\nimport Users from '../users'\r\n\r\nimport './style.css'\r\n\r\nconst Search = (props) => {\r\n    const {apiService} = props;\r\n    const user = useSelector(state => state.user);\r\n\r\n    const {followersCount, followingCount, imagesCount, postsCount, avatarUrl, name} = user;\r\n\r\n    const [result, setResult] = useState('');\r\n    const [match, setMatch] = useState('');\r\n    const fetchFunc = useCallback(() => {\r\n        return apiService.fetchUsers(result);\r\n    }, [result]);\r\n\r\n    const profileCounters = {\r\n        followersCount, followingCount, imagesCount, postsCount\r\n    };\r\n\r\n    const findUsers = (e) => {\r\n        e.preventDefault();\r\n        setResult(match);\r\n    };\r\n\r\n    const onTextChange = ((e) => {\r\n        setMatch(e.target.value)\r\n    });\r\n\r\n    return (\r\n        <div className=\"profile\">\r\n            <div className=\"profile__top\">\r\n                <ProfileMain\r\n                    profileCounters={profileCounters}\r\n                    avatarUrl={avatarUrl}\r\n                    userName={name}\r\n                    isOwner={true}\r\n                />\r\n            </div>\r\n            <div className=\"profile__bottom\">\r\n                <div className=\"container\">\r\n                    <div className=\"search\">\r\n                        <form onSubmit={findUsers} className=\"search__form\">\r\n                            <div className=\"search__text\">\r\n                                <input value={match} onChange={onTextChange} placeholder=\"Type a name\" type=\"text\"/>\r\n                            </div>\r\n                            <div className=\"search__find\">\r\n                                <button type=\"submit\" className=\"btn\">Find</button>\r\n                            </div>\r\n                        </form>\r\n                        <div className=\"search__result\">\r\n                            <Users fetchFunc={fetchFunc}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default withApiService(connect()(Search));\r\n","import React from 'react';\nimport {Route, Switch, Redirect} from \"react-router-dom\";\n\nimport Cart from \"../cart\";\nimport Header from \"../header\";\nimport Home from \"../home\";\nimport Store from \"../store\";\nimport PrivateRoute from \"../private-route\";\nimport Login from \"../login\";\nimport Register from '../register';\nimport Messages from '../messages';\nimport Followers from '../followers';\nimport Following from '../following';\nimport UserPage from \"../hoc/userPage\";\nimport MePage from '../hoc/mePage';\nimport Search from '../search';\n\nimport {withApiService} from \"../hoc\";\nimport {connect} from \"react-redux\";\nimport {sortMessagesList, updateMessageInList} from \"../../store/actions/messageActions\";\nimport {addChatMessage} from \"../../store/actions/chatActions\";\nimport {bindActionCreators} from \"redux\";\n\nimport socket from \"../../socket\";\n\nclass App extends React.Component {\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        const {apiService} = this.props;\n        const token = this.props.user.token;\n\n        if (prevProps.user.token !== token) {\n            apiService.setToken(token);\n        }\n    }\n\n    getUser() {\n        const { user } = this.props;\n        return user;\n    }\n\n    componentDidMount() {\n        const {apiService, updateMessageInList, addChatMessage} = this.props;\n\n        fetch('/api/test').then(res => {\n            console.log(res)\n        });\n\n        // messages from me and others\n        socket.on('getMessage', (data) => {\n            console.log('get data', data);\n\n            const user = this.getUser();\n            const {inChat, chatId} = this.props.chat;\n            let mine = data.fromId.toString() === user.id.toString();\n\n            // update message list\n            const message = {...data.message};\n            // if mine\n            if (mine) {\n                message.name = data.companion.name;\n                message.avatarUrl = data.companion.avatarUrl;\n\n                updateMessageInList({id: data.toId, updated: false, message, sort: true});\n            }\n\n            if (inChat && (chatId.toString() === data.toId.toString() || chatId.toString() === data.fromId.toString())) {\n                addChatMessage(data.message);\n\n                if (!mine) {\n                    apiService.updateChatTime(user.id, data.fromId, data.date);\n                    updateMessageInList({id: data.fromId, updated: false, message, sort: true});\n                }\n            } else {\n                if (!mine) {\n                    window.M.toast({html: `<b>${data.message.name}</b>: ${data.message.text}`});\n                    updateMessageInList({id: data.fromId, updated: true, message, sort: true});\n                }\n            }\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Header />\n                <div className=\"content pt-3\">\n                    <Switch>\n                        <Route path=\"/\" exact component={Home} />\n                        <PrivateRoute exact path=\"/cart\" component={Cart}/>\n                        <Route path=\"/store\" component={Store} />\n                        <PrivateRoute exact path=\"/me\" component={MePage}/>\n                        <PrivateRoute exact path=\"/followers\" component={Followers}/>\n                        <PrivateRoute exact path=\"/following\" component={Following}/>\n                        <PrivateRoute exact path=\"/messages/\" component={Messages}/>\n                        <PrivateRoute exact path=\"/search\" component={Search}/>\n                        <Route path=\"/login\" component={Login} />\n                        <Route path=\"/register\" component={Register} />\n                        <Route path=\"/test\" render={() => {\n                            return <h2>Test page</h2>\n                        }} />\n                        <PrivateRoute path=\"/user/:id\" component={UserPage}/>\n                        <Redirect to=\"/\" />\n                    </Switch>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        getNewMessage: state.messages.getNewMessage,\n        user: state.user,\n        chat: state.chat\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({\n        updateMessageInList,\n        sortMessagesList,\n        addChatMessage\n    }, dispatch);\n};\n\nexport default withApiService(connect(mapStateToProps, mapDispatchToProps)(App))\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","class UnauthorizedError extends Error {\r\n    constructor(...args) {\r\n        super(...args);\r\n        this.status = 401;\r\n    }\r\n}\r\n\r\nexport default UnauthorizedError;\r\n","import UnauthorizedError from \"../errors/UnauthorizedError\";\r\n\r\nclass ApiService {\r\n    URL = '/api/';\r\n    token = null;\r\n\r\n    getRequest(url, params = {}) {\r\n        return new Promise((resolve, reject) => {\r\n            fetch(`${this.URL}${url}`, params)\r\n                .then(r =>  r.json().then(data => ({status: r.status, body: data})) )\r\n                .then(res => {\r\n                    if (res.status === 401) reject(new UnauthorizedError());\r\n                    resolve(res);\r\n                }).catch(e => {\r\n                    reject(e);\r\n                })\r\n        });\r\n    }\r\n\r\n    login(data) {\r\n        return this.getRequest('login', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        });\r\n    }\r\n\r\n    register(data) {\r\n        console.log(JSON.stringify(data));\r\n\r\n        return this.getRequest('register', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        });\r\n    }\r\n\r\n    uploadAvatar(formData) {\r\n        const token = this.getToken();\r\n\r\n        return this.getRequest('uploadAvatar', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Authorization': token\r\n            },\r\n            body: formData\r\n        });\r\n    }\r\n\r\n    // posts\r\n    fetchPosts(id) {\r\n        return this.getRequest('posts', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': this.getToken()\r\n            },\r\n            body: JSON.stringify({id})\r\n        });\r\n    }\r\n\r\n    createPost(formData) {\r\n        return this.getRequest('createPost', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Authorization': this.getToken()\r\n            },\r\n            body: formData\r\n        });\r\n    }\r\n\r\n    removePost(id) {\r\n        return this.getRequest('posts', {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': this.getToken()\r\n            },\r\n            body: JSON.stringify({id})\r\n        });\r\n    }\r\n\r\n    likePost(userId, postId, isLiked) {\r\n        const token = this.getToken();\r\n\r\n        return this.getRequest('postLike', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': token\r\n            },\r\n            body: JSON.stringify({userId, postId, like: isLiked})\r\n        });\r\n    }\r\n\r\n    // comments\r\n    createComment(userId, postId, text) {\r\n        return this.getRequest('createComment', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': this.getToken()\r\n            },\r\n            body: JSON.stringify({userId, postId, text})\r\n        });\r\n    }\r\n\r\n    likeComment(userId, commentId, isLiked) {\r\n        return this.getRequest('likeComment', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': this.getToken()\r\n            },\r\n            body: JSON.stringify({userId, commentId, like: isLiked})\r\n        });\r\n    }\r\n\r\n    getUserData = () => {\r\n        return this.getRequest('userData', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': this.getToken()\r\n            }\r\n        });\r\n    };\r\n\r\n    // messages\r\n    sendMessage = (receiverId, senderId, message, companion, date) => {\r\n        return this.getRequest('sendMessage', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': this.getToken()\r\n            },\r\n            body: JSON.stringify({id: receiverId, senderId, message, companion, date})\r\n        });\r\n    };\r\n\r\n    getChatMessages = (id, receiverId) => {\r\n        return this.getRequest('chatMessages', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({id, receiverId})\r\n        });\r\n    };\r\n\r\n    getListMessages = (id) => {\r\n        return this.getRequest('listMessages', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({id})\r\n        });\r\n    };\r\n\r\n    updateChatTime(id, receiverId, date) {\r\n        return this.getRequest('chat', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({id, receiverId, date})\r\n        });\r\n    }\r\n\r\n    getUserInfo(id, clientId) {\r\n        const token = this.getToken();\r\n\r\n        return this.getRequest('userInfo', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': token\r\n            },\r\n            body: JSON.stringify({id, clientId})\r\n        });\r\n    }\r\n\r\n    follow(followerId, followingId, isFollowing) {\r\n        console.log(followerId, followingId, isFollowing);\r\n        return this.getRequest('follow', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': this.getToken()\r\n            },\r\n            body: JSON.stringify({followerId, followingId, isFollowing})\r\n        });\r\n    }\r\n\r\n    fetchFollowers(userId) {\r\n        return this.getRequest('followers', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': this.getToken()\r\n            },\r\n            body: JSON.stringify({userId})\r\n        });\r\n    }\r\n\r\n    fetchFollowing(userId) {\r\n        return this.getRequest('following', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': this.getToken()\r\n            },\r\n            body: JSON.stringify({userId})\r\n        });\r\n    }\r\n\r\n    fetchUsers(match) {\r\n        return this.getRequest('users', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': this.getToken()\r\n            },\r\n            body: JSON.stringify({match})\r\n        });\r\n    }\r\n\r\n    setToken(token) {\r\n        this.token = token;\r\n    }\r\n\r\n    getToken() {\r\n        return this.token;\r\n    }\r\n}\r\n\r\nexport default ApiService;\r\n","const initialState = {\r\n    name: null,\r\n    auth: false,\r\n    token: null,\r\n    id: null,\r\n    avatarUrl: null,\r\n    followingCount: 0,\r\n    followersCount: 0\r\n};\r\n\r\nconst userReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'GET_USER_SUCCESS':\r\n        case 'AUTH_CHECK_SUCCESS':\r\n        case 'USER_AUTHORIZE':\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            };\r\n\r\n        case 'USER_DATA_UPDATE':\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            };\r\n\r\n        case 'USER_UNAUTHORIZE':\r\n            return {...initialState};\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default userReducer;\r\n","const initialState = {\r\n    loading: true,\r\n    messages: []\r\n};\r\n\r\nconst createMessage = (name, text, id, avatarUrl, updated) => ({name, text, id, avatarUrl, updated});\r\n\r\nconst messagesReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'FETCH_MESSAGES':\r\n            return {\r\n                loading: true,\r\n                messages: []\r\n            };\r\n\r\n        case 'FETCH_MESSAGES_SUCCESS':\r\n            return {\r\n                loading: false,\r\n                messages: action.payload\r\n            };\r\n\r\n        case 'FETCH_MESSAGES_FAILURE':\r\n            return {\r\n                loading: false,\r\n                messages: [...state.messages]\r\n            };\r\n\r\n        case 'MESSAGE_UPDATE': {\r\n            const {id, updated, message, sort = true} = action.payload;\r\n\r\n            const index = state.messages.findIndex(m => m.id === id);\r\n            let updatedMessages = [...state.messages];\r\n\r\n            if (sort) {\r\n                // отсортировать и создать, если нет собеседника в списке\r\n                let name = message.name;\r\n                let text = message.text;\r\n                let avatarUrl = message.avatarUrl;\r\n\r\n                if (index >= 0) {\r\n                    name = updatedMessages[index].name;\r\n                    updatedMessages = updatedMessages.filter(m => m.id !== id);\r\n                }\r\n                updatedMessages.unshift(createMessage(name, text, id, avatarUrl, updated));\r\n            } else {\r\n                if (index >= 0) {\r\n                    updatedMessages[index].updated = updated;\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                messages: updatedMessages\r\n            };\r\n        }\r\n\r\n        case 'MESSAGES_LIST_UPDATE':\r\n            return {\r\n                ...state,\r\n                messages: action.payload\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default messagesReducer;\r\n","const initialState = {\r\n    messages: [],\r\n    loading: false,\r\n    inChat: false,\r\n    chatId: null,\r\n    companion: {}\r\n};\r\n\r\nconst chatReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'FETCH_CHAT':\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n\r\n        case 'FETCH_CHAT_SUCCESS':\r\n            return {\r\n                ...state,\r\n                messages: action.payload.messages,\r\n                companion: {\r\n                    ...action.payload.companion\r\n                },\r\n                loading: false\r\n            };\r\n\r\n        case 'FETCH_CHAT_FAILURE':\r\n            return {\r\n                ...state,\r\n                loading: false\r\n            };\r\n\r\n        case 'CHAT_STATUS_UPDATE':\r\n            const {inChat = false, chatId = null} = action.payload;\r\n            return {\r\n                ...state,\r\n                inChat: inChat,\r\n                chatId: chatId\r\n            };\r\n\r\n        case 'CHAT_MESSAGE_ADD':\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, action.payload],\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default chatReducer;\r\n","import {combineReducers} from \"redux\";\r\nimport userReducer from \"./userReducer\";\r\nimport messagesReducer from \"./messageReducer\";\r\nimport chatReducer from \"./chatReducer\";\r\n\r\nconst reducer = combineReducers({\r\n    user: userReducer,\r\n    messages: messagesReducer,\r\n    chat: chatReducer\r\n});\r\n\r\nexport default reducer;\r\n","import { call, put, takeEvery, takeLatest, all } from 'redux-saga/effects'\r\nimport {ApiService} from '../../service';\r\n\r\nconst apiService = new ApiService();\r\n\r\n// worker Saga: will be fired on AUTH_CHECK action\r\nfunction* authCheckSaga(action) {\r\n    try {\r\n        const token = null;\r\n        if (token) {\r\n            const payload = {token, auth: true};\r\n            yield put({type: \"AUTH_CHECK_SUCCESS\", payload});\r\n        } else {\r\n\r\n        }\r\n    } catch (e) {\r\n\r\n    }\r\n}\r\n\r\nfunction* getUserDataSaga() {\r\n    const userData = yield apiService.getUserData();\r\n    yield put({type: \"USER_DATA_SUCCESS\", payload: userData});\r\n}\r\n\r\n// function* onAuth(action) {\r\n//     const {token} = action.payload;\r\n//     storageService.setToken(token);\r\n// }\r\n\r\n// function* watchAuthCheck() {\r\n//     yield takeEvery(\"AUTH_CHECK\", authCheckSaga);\r\n// }\r\n\r\n// function* watchGetUserData() {\r\n//     yield takeEvery(\"GET_USER\", getUserDataSaga);\r\n// }\r\n\r\n// function* mySaga2() {\r\n//     yield takeEvery(\"AUTH\", onAuth);\r\n// }\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        // watchAuthCheck(),\r\n        // watchGetUserData()\r\n    ])\r\n}\r\n","import {createStore, compose, applyMiddleware} from 'redux'\r\nimport reducer from \"./reducer\";\r\nimport reduxThunk from 'redux-thunk';\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport mySaga from './sagas'\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst reduxDevTools = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\r\n\r\nconst logMiddleware = () => (next) => (action) => {\r\n    console.log(action);\r\n    return next(action);\r\n};\r\n\r\nconst store = createStore(reducer, compose(applyMiddleware(reduxThunk, sagaMiddleware, logMiddleware)));\r\n\r\n// sagaMiddleware.run(mySaga);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {BrowserRouter as Router} from \"react-router-dom\";\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\nimport {ApiService} from \"./service\";\nimport './style.css'\n\nimport store from \"./store\";\n\nimport {ApiServiceProvider} from \"./components/context/apiService\";\nimport VariablesProvider from \"./components/context/vars\";\nimport {getUserData} from \"./store/actions\";\n\nimport socket from \"./socket\";\n\nconst apiService = new ApiService();\nconst token = localStorage.getItem('userData');\napiService.setToken(token);\n\n// window.M.toast({html: 'I am a toast!'});\nconsole.log(process.env, process.env.CLIENT_SOCKET_PORT);\n\n// sockets\nsocket.on('connect', function() {\n    if (token) {\n        store.dispatch(getUserData(apiService, token)()).then(e => {\n            renderDOM();\n            const id = store.getState().user.id;\n            socket.emit('connected', {id});\n        })\n    } else {\n        renderDOM();\n    }\n});\n\nfunction renderDOM() {\n    ReactDOM.render(\n        <React.StrictMode>\n            <Provider store={store}>\n                <ApiServiceProvider value={apiService}>\n                    <VariablesProvider.Provider value={{publicPath: '/public/images/'}}>\n                        <Router>\n                            <App/>\n                        </Router>\n                    </VariablesProvider.Provider>\n                </ApiServiceProvider>\n            </Provider>\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}