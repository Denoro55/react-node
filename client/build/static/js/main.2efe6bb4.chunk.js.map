{"version":3,"sources":["components/cart/index.jsx","store/actions/index.jsx","socket/index.js","components/header/index.jsx","components/home/index.jsx","components/store/index.jsx","components/private-route/index.jsx","components/context/apiService.js","components/hoc/withApiService.jsx","components/hoc/withoutOwner.jsx","components/login/index.jsx","components/register/index.jsx","components/context/vars.js","components/messages/MessagesList.jsx","components/spinner/index.jsx","store/actions/messageActions.jsx","store/actions/chatActions.jsx","components/messages/Chat.jsx","components/messages/messages.jsx","components/messages/index.jsx","components/user/profile-main.jsx","components/card/index.jsx","components/users/index.jsx","components/followers/index.jsx","components/following/index.jsx","components/user/post-create.jsx","components/user/profile-wall-list.jsx","components/user/index.jsx","components/hoc/userPage.jsx","components/hoc/mePage.jsx","components/search/index.jsx","components/app/index.jsx","serviceWorker.js","errors/UnauthorizedError.js","service/ApiService.jsx","store/reducer/userReducer.jsx","store/reducer/messageReducer.jsx","store/reducer/chatReducer.jsx","store/reducer/counterReducer.jsx","store/reducer/index.jsx","store/sagas/index.jsx","store/index.jsx","index.jsx"],"names":["Cart","console","log","this","props","React","Component","actionUpdateUserData","payload","type","actionUpdateUserCounters","getUserData","apiService","token","dispatch","then","response","res","body","data","auth","catch","err","socket","openSocket","process","connect","state","isAuthenticated","user","actionUnauthorize","localStorage","removeItem","logout","e","preventDefault","emit","id","className","to","exact","name","isAuth","map","link","idx","key","activeClassName","onClick","greeting","useState","counter","setCounter","reduxCounter","useSelector","cc","setCC","useEffect","setInterval","counterAdd","ChildComponent","component","rest","createContext","ApiServiceProvider","Provider","ApiServiceConsumer","Consumer","withApiService","Wrapped","withoutOwner","pageId","computedMatch","params","toString","Login","form","email","password","message","color","text","login","actionAuthorize","actionGetUserData","errors","setState","history","push","onInputChange","target","value","feedback","onSubmit","onChange","placeholder","setItem","Register","ok","register","feedbackClasses","cn","checkAuth","withRouter","messagesList","openChat","publicPath","useContext","VariableProvider","item","style","backgroundImage","avatarUrl","updated","Spinner","actionFetchMessages","getListMessages","fetchMessagesSuccess","messages","updateMessageInList","updateMessagesList","list","sortMessagesList","fetchChat","receiverId","getChatMessages","sort","actionUpdateChatStatus","inChat","chatId","addChatMessage","actionSendMessage","companion","date","sendMessage","bindActionCreators","backToMessages","chatLoading","companionId","setMessage","chatMessages","chat","listContainer","useRef","current","scrollTop","scrollHeight","ref","msg","companionData","newMessage","Date","now","toId","fromId","queryChatId","showChat","setChat","loading","messagesLoading","currentContent","show","Wrapper","userId","queryString","parse","location","search","userName","profileCounters","isOwner","backgroundUrl","postsCount","imagesCount","followingCount","followersCount","avatarFileInput","bgFileInput","avatarFormActive","setAvatarFormStatus","avatarPreviewImage","setAvatarPreviewImage","bgPreview","setBgPreview","avatarClasses","resetAvatarForm","resetBgForm","profileClasses","file","files","reader","FileReader","readAsDataURL","onloadend","previewImage","result","FormData","append","uploadBackground","click","uploadAvatar","_cardId","_id","isFollowing","updateUser","cardId","follow","client","fetchFunc","users","setUsers","setLoading","followerId","index","findIndex","newItem","slice","f","useCallback","fetchFollowers","fetchFollowing","PostCreate","wallId","postText","setPostText","postImageSrc","setPostImageSrc","postFileInput","postFileButton","postSubmitButton","postImage","btnImageClasses","length","createPost","blur","post","imageUrl","aria-hidden","src","alt","cols","rows","ProfileWallList","posts","removePostById","toggleComments","updatePostLikes","updatePostComments","updateCommentLikes","renderPostInfo","comments","postId","isLiked","likePost","likesCount","renderPostImage","info","renderComment","c","time","commentId","likeComment","comment","renderPostContent","isPhotoPost","topHtml","itemsUI","commentsOpened","elements","createComment","reset","items","typeText","removePost","isUserPage","userPageId","updateProfileCounters","setAvatarUrl","userData","setUserData","removedPost","setRemovedPost","setPosts","getPostsInterface","newPosts","postsUI","reduce","acc","p","isOpened","updateStatePosts","postsInterfaces","removeStatePostsById","newItems","filter","on","addPost","off","getUserInfo","fetchPosts","newItemsUI","imagesDiff","currentState","addStatePosts","postIndex","commentIndex","newComment","updatePosts","newPostsUI","newState","UserPage","setProfileCounters","newParams","setResult","match","setMatch","fetchUsers","App","prevProps","prevState","snapshot","setToken","getUser","mine","window","M","toast","html","updateChatTime","num","imageCount","path","Home","Store","MePage","Followers","Following","Messages","Search","render","getNewMessage","apiSevice","Boolean","hostname","UnauthorizedError","args","status","Error","ApiService","URL","getRequest","method","headers","getToken","senderId","JSON","stringify","url","Promise","resolve","reject","fetch","r","json","formData","like","clientId","followingId","initialState","userReducer","action","exec","createMessage","messagesReducer","m","updatedMessages","unshift","chatReducer","counterReducer","reducer","combineReducers","sagaMiddleware","createSagaMiddleware","reduxDevTools","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","compose","applyMiddleware","reduxThunk","next","getItem","renderDOM","ReactDOM","StrictMode","document","getElementById","CLIENT_SOCKET_PORT","getState","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"yXAeeA,E,kLAVPC,QAAQC,IAAIC,KAAKC,S,+BAIjB,OACI,yC,GAPOC,IAAMC,WCYZC,EAAuB,SAACC,GAAD,MAAc,CAACC,KAAM,mBAAoBD,YAChEE,EAA2B,SAACF,GAAD,MAAc,CAACC,KAAM,uBAAwBD,YAExEG,EAAc,SAACC,EAAYC,GAAb,OAAuB,kBAAM,SAACC,GAGrD,OAFAA,EALoC,CAACL,KAAM,aAOpCG,EAAWD,cAAcI,MAAK,SAAAC,GACjC,IAAMC,EAAMD,EAASE,KAAKC,KAEpBA,EAAI,aACNC,MAAM,EACNP,SACGI,GAGP,OAAOH,EAlBuC,CAACL,KAAM,mBAAoBD,QAkBhCW,OAC1CE,OAAM,SAAAC,GAELR,EApBuC,CAACL,KAAM,2B,gBCVvCc,E,MAFAC,GAAW,oBAAD,OAAqBC,SC6F/BC,eAbS,SAACC,GACrB,MAAO,CACHC,gBAAiBD,EAAME,KAAKT,KAC5BS,KAAMF,EAAME,SAIO,SAACf,GACxB,MAAO,CACHgB,kBAAmB,kBAAMhB,GFnF7BiB,aAAaC,WAAW,YAEjB,CAACvB,KAAM,0BEqFHiB,EAtFA,SAAC,GAAgD,IAA/CE,EAA8C,EAA9CA,gBAAiBE,EAA6B,EAA7BA,kBAAmBD,EAAU,EAAVA,KAC3CI,EAAS,SAACC,GACZA,EAAEC,iBACFZ,EAAOa,KAAK,YAAa,CAACC,GAAIR,EAAKQ,KACnCP,KAoCJ,OACI,4BAAQQ,UAAU,UACd,6BACI,yBAAKA,UAAU,eACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,WACX,kBAAC,IAAD,CAAMA,UAAU,oBAAoBC,GAAG,KAAvC,eACA,wBAAIF,GAAG,aAAaC,UAAU,6BAlB5C,CACV,CAACE,OAAO,EAAMD,GAAI,IAAKE,KAAM,OAAQC,QAAQ,GAC7C,CAACF,OAAO,EAAMD,GAAI,MAAOE,KAAM,KAAMC,QAAQ,GAC7C,CAACF,OAAO,EAAMD,GAAI,aAAcE,KAAM,YAAaC,QAAQ,GAC3D,CAACF,OAAO,EAAMD,GAAI,aAAcE,KAAM,YAAaC,QAAQ,GAE3D,CAACF,OAAO,EAAOD,GAAI,aAAcE,KAAM,WAAYC,QAAQ,GAC3D,CAACF,OAAO,EAAMD,GAAI,UAAWE,KAAM,SAAUC,QAAQ,IAafC,KAAI,SAACC,EAAMC,GACb,OAAMjB,GAAmBgB,EAAKF,QAAYd,IAAoBgB,EAAKF,OACxD,KAIP,wBAAII,IAAKD,EAAKP,UAAU,YACpB,kBAAC,IAAD,CAASS,gBAAgB,SAAST,UAAU,WAAWE,MAAOI,EAAKJ,MAAOD,GAAIK,EAAKL,IAAKK,EAAKH,WAjDrIb,EAEI,wBAAIU,UAAU,yBACV,wBAAIA,UAAU,YACV,kBAAC,IAAD,CAASU,QAASf,EAAQc,gBAAgB,SAAST,UAAU,mBAAmBC,GAAG,WAAnF,YAMR,wBAAIF,GAAG,aAAaC,UAAU,8BAC1B,wBAAIA,UAAU,YACV,kBAAC,IAAD,CAASS,gBAAgB,SAAST,UAAU,mBAAmBC,GAAG,UAAlE,UAEJ,wBAAID,UAAU,YACV,kBAAC,IAAD,CAASS,gBAAgB,SAAST,UAAU,gBAAgBC,GAAG,aAA/D,sBCXTb,eANS,SAACC,GACnB,MAAO,CACHE,KAAMF,EAAME,QAIPH,EAjBF,SAAC,GAAY,IAAXG,EAAU,EAAVA,KACLoB,EAAWpB,EAAKT,KAAO,qCAAU,2BAAIS,EAAKY,OAAgB,4CAEhE,OACI,yBAAKH,UAAU,aACX,wBAAIA,UAAU,QAAd,aACCW,M,OC8BEvB,iBApCD,SAACtB,GAAW,IACfU,EAAYV,EAAZU,SADc,EAGSoC,mBAAS,GAHlB,mBAGdC,EAHc,KAGLC,EAHK,KAIfC,EAAeC,aAAY,SAAA3B,GAAK,OAAIA,EAAMwB,WAJ3B,EAKDD,mBAASG,GALR,mBAKdE,EALc,KAKVC,EALU,KAOrBC,qBAAU,WACPC,aAAY,WACRzD,QAAQC,IAAIiD,EAASE,EAAcE,GACnCI,MACD,OACH,IAEHF,qBAAU,WACND,EAAMH,KACP,CAACA,IAEJ,IAAMM,EAAa,WACf1D,QAAQC,IAAIqD,GACZzC,EAAS,CAACL,KAAM,iBAGpB,OACI,yBAAK6B,UAAU,aACX,0CACA,6BACI,gDAAsBe,EAAtB,IAAqCE,IAEvCJ,EACF,4BAAQH,QAAS,kBAAMI,EAAWD,EAAU,KAA5C,SACA,4BAAQH,QAAS,kBAAMlC,EAAS,CAACL,KAAM,kBAAvC,mB,QChBGiB,eANS,SAACC,GACrB,MAAO,CACHP,KAAMO,EAAME,KAAKT,QAIVM,EAdM,SAAC,GAAgD,IAApCkC,EAAmC,EAA9CC,UAA2BzC,EAAmB,EAAnBA,KAAS0C,EAAU,oCACjE,OACI,kBAAC,IAAD,KACM1C,EAAO,kBAACwC,EAAmBE,GAAW,kBAAC,IAAD,CAAUvB,GAAG,e,UCF7DlC,IAAM0D,gBAFIC,E,EAAVC,SACUC,E,EAAVC,SCWWC,EAZQ,SAACC,GACpB,OAAO,SAACjE,GACJ,OAAO,kBAAC8D,EAAD,MAEC,SAACtD,GACG,OAAO,kBAACyD,EAAD,iBAAajE,EAAb,CAAoBQ,WAAYA,UCS5C0D,EAbM,SAACD,GAClB,OAAO,SAACjE,GACJ,IAAMyB,EAAOyB,aAAY,SAAA3B,GAAK,OAAIA,EAAME,QAClC0C,EAASnE,EAAMoE,cAAcC,OAAOpC,GAE1C,OAAIkC,GAAU1C,EAAKQ,GAAGqC,aAAeH,EAAOG,WACjC,kBAAC,IAAD,CAAUnC,GAAG,QAGjB,kBAAC8B,EAAYjE,KCNtBuE,E,4MACFhD,MAAQ,CACJiD,KAAM,CACFC,MAAO,GACPC,SAAU,IAEdC,QAAS,CACLC,MAAO,MACPC,KAAM,K,EAIdC,MAAQ,SAAChD,GACLA,EAAEC,iBADS,MAE8C,EAAK/B,MAAvDQ,EAFI,EAEJA,WAAYuE,EAFR,EAEQA,gBAAiBC,EAFzB,EAEyBA,kBACpCxE,EAAWsE,MAAM,EAAKvD,MAAMiD,MAAM7D,MAAK,SAAAC,GACnC,IAAMC,EAAMD,EAASE,KAErB,GAAID,EAAIoE,OACJ,EAAKC,SAAS,CACVP,QAAS,CAACC,MAAO,MAAOC,KAAMhE,EAAI8D,eAEnC,CACH,IAAMlE,EAAQI,EAAIJ,MACdA,IACAsE,EAAgB,CAAC/D,MAAM,EAAMP,UAC7BuE,EAAkBvE,GAAOE,MAAK,SAACmB,GAC3BX,EAAOa,KAAK,YAAa,CAACC,GAAIH,EAAE1B,QAAQ6B,KACxC,EAAKjC,MAAMmF,QAAQC,KAAK,eAIrCnE,OAAM,SAAAa,Q,EAKbuD,cAAgB,SAACvD,GACb,EAAKoD,SAAS,CACVV,KAAK,eACE,EAAKjD,MAAMiD,KADd,eAEC1C,EAAEwD,OAAOjD,KAAOP,EAAEwD,OAAOC,W,uDAK5B,IACCZ,EAAW5E,KAAKwB,MAAhBoD,QAEDa,EAAWb,EAAQE,KACrB,yBAAK3C,UAAU,iBACVyC,EAAQE,MAEb,KAEJ,OACI,yBAAK3C,UAAU,aACX,yBAAKA,UAAU,UACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,2BACX,0BAAMA,UAAU,OAAOuD,SAAU1F,KAAK+E,OAClC,yBAAK5C,UAAU,eAAf,SAGA,yBAAKA,UAAU,cACX,yBAAKA,UAAU,cACX,2BAAO7B,KAAK,OAAOqF,SAAU3F,KAAKsF,cAAehD,KAAK,QAAQH,UAAU,eAAeyD,YAAY,WAEvG,yBAAKzD,UAAU,cACX,2BAAO7B,KAAK,WAAWqF,SAAU3F,KAAKsF,cAAehD,KAAK,WAAWH,UAAU,eAAeyD,YAAY,eAGjHH,EACD,4BAAQnF,KAAK,SAAS6B,UAAU,mBAAhC,oB,GAzEZjC,IAAMC,WAkHX8D,IAAe1C,aAbN,SAACC,GACrB,MAAO,CACHd,MAAOc,EAAME,KAAKhB,UAIC,SAACC,EAAD,GAAoC,IAAxBF,EAAuB,EAAvBA,WAAuB,EAAXC,MAC/C,MAAO,CACHuE,kBAAmB,SAACvE,GAAD,OAAWC,EAASH,EAAYC,EAAYC,EAAxBF,KACvCwE,gBAAiB,SAAC3E,GAAD,OAAaM,ETrHP,SAAC,GAAmB,IAAlBM,EAAiB,EAAjBA,KAAMP,EAAW,EAAXA,MAGnC,OAFAkB,aAAaiE,QAAQ,WAAYnF,GAE1B,CAACJ,KAAM,iBAAkBD,QAAS,CAACY,OAAMP,USkHLsE,CAAgB3E,QAIjCkB,CAA6CiD,I,iBClHrEsB,G,mNACFtE,MAAQ,CACJiD,KAAM,CACFnC,KAAM,GACNoC,MAAO,GACPC,SAAU,IAEdC,QAAS,CACLmB,IAAI,EACJjB,KAAM,K,EAIdkB,SAAW,SAACjE,GACRA,EAAEC,iBACmB,EAAK/B,MAAnBQ,WACIuF,SAAS,EAAKxE,MAAMiD,MAAM7D,MAAK,SAAAC,GACtC,IAAMC,EAAMD,EAASE,KAEjBD,EAAIoE,OACJ,EAAKC,SAAS,CACVP,QAAS,CAACmB,IAAI,EAAOjB,KAAMhE,EAAI8D,WAGnC,EAAKO,SAAS,CACVP,QAAS,CAACmB,IAAI,EAAMjB,KAAMhE,EAAI8D,SAC9BH,KAAM,CAACnC,KAAM,GAAIoC,MAAO,GAAIC,SAAU,SAG/CzD,OAAM,SAAAa,Q,EAKbuD,cAAgB,SAACvD,GACb,EAAKoD,SAAS,CACVV,KAAK,eACE,EAAKjD,MAAMiD,KADd,eAEC1C,EAAEwD,OAAOjD,KAAOP,EAAEwD,OAAOC,W,uDAK5B,IACCZ,EAAW5E,KAAKwB,MAAhBoD,QAEDqB,EAAkBC,IAAG,CACvB,iBAAiB,EACjB,KAAQlG,KAAKwB,MAAMoD,QAAQmB,KAGzBN,EAAWb,EAAQE,KACrB,yBAAK3C,UAAW8D,GACXrB,EAAQE,MAEb,KAEJ,OACI,yBAAK3C,UAAU,aACX,yBAAKA,UAAU,UACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,2BACX,0BAAMA,UAAU,OAAOuD,SAAU1F,KAAKgG,UAClC,yBAAK7D,UAAU,eAAf,WAGA,yBAAKA,UAAU,cACX,yBAAKA,UAAU,cACX,2BAAO7B,KAAK,OAAOqF,SAAU3F,KAAKsF,cAAehD,KAAK,OAAOH,UAAU,eAAeyD,YAAY,OAAOJ,MAAOxF,KAAKwB,MAAMiD,KAAKnC,QAEpI,yBAAKH,UAAU,cACX,2BAAO7B,KAAK,OAAOqF,SAAU3F,KAAKsF,cAAehD,KAAK,QAAQH,UAAU,eAAeyD,YAAY,QAAQJ,MAAOxF,KAAKwB,MAAMiD,KAAKC,SAEtI,yBAAKvC,UAAU,cACX,2BAAO7B,KAAK,WAAWqF,SAAU3F,KAAKsF,cAAehD,KAAK,WAAWH,UAAU,eAAeyD,YAAY,WAAWJ,MAAOxF,KAAKwB,MAAMiD,KAAKE,aAGnJc,EACD,4BAAQnF,KAAK,SAAS6B,UAAU,mBAAhC,oB,GA9ETjC,IAAMC,YAkGd8D,IAAe1C,aAVN,SAACC,GACrB,MAAO,MAGgB,SAACb,GACxB,MAAO,CACHwF,UAAW,gBAIW5E,CAA6CuE,I,iBCvG5D5F,MAAM0D,gBC8CNwC,eA5CM,SAACnG,GAAW,IACtBoG,EAA0BpG,EAA1BoG,aAAcC,EAAYrG,EAAZqG,SAEdC,EAAcC,qBAAWC,GAAzBF,WAEP,OACI,wBAAIpE,UAAU,0BACTkE,EAAa7D,KAAI,SAACkE,EAAMhE,GACrB,OACI,wBAAIC,IAAKD,EAAKP,UAAU,mBACpB,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,yBACX,yBAAKA,UAAU,wBACX,yBAAKwE,MAAO,CAACC,gBAAgB,OAAD,OAASL,GAAT,OAAsBG,EAAKG,UAA3B,MAA0C1E,UAAU,+BAIpF,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,sBAAqB,gCAASuE,EAAKpE,OAClD,yBAAKH,UAAU,sBAAsBuE,EAAK5B,QAGlD,yBAAK3C,UAAU,yBACVuE,EAAKI,QACF,yBAAK3E,UAAU,wBACX,4BAAQU,QAAS,kBAAMyD,EAASI,EAAKxE,KAAKC,UAAU,qCAChD,uBAAGA,UAAU,0BAGrB,KACJ,yBAAKA,UAAU,wBACX,4BAAQU,QAAS,kBAAMyD,EAASI,EAAKxE,KAAKC,UAAU,sCAChD,uBAAGA,UAAU,6BChBtC4E,EAlBC,WACZ,OACI,yBAAK5E,UAAU,gCACX,yBAAKA,UAAU,mCACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,YAEnB,yBAAKA,UAAU,aACX,yBAAKA,UAAU,YAEnB,yBAAKA,UAAU,wBACX,yBAAKA,UAAU,e,OCTtB6E,EAAsB,SAACvG,GAAD,OAAgB,SAACyB,GAAD,OAAQ,SAACvB,GAJxB,IAACN,EAKjCM,EAL8C,CAACL,KAAM,iBAAkBD,YAOvEI,EAAWwG,gBAAgB/E,GAAItB,MAAK,SAAAE,GAChCH,EAP4B,SAACN,GAAD,MAAc,CAACC,KAAM,yBAA0BD,WAOlE6G,CAAqBpG,EAAIC,KAAKoG,cACxCjG,OAAM,SAAAa,GACLpB,EARmC,CAACL,KAAM,iCAYrC8G,EAAsB,SAAC/G,GAAD,MAAc,CAACC,KAAM,iBAAkBD,YAC7DgH,EAAqB,SAACC,GAAD,MAAW,CAAChH,KAAM,uBAAwBD,QAASiH,IACxEC,EAAmB,SAAC,GAAD,MAAW,CAACjH,KAAM,qBAAsBD,QAAxC,EAAE6B,KCXrBsF,EAAY,SAAC/G,GAAD,OAAgB,SAACyB,EAAIuF,GAAL,OAAoB,SAAC9G,GAG1D,OAFAA,EAJ2C,CAACL,KAAM,eAM3CG,EAAWiH,gBAAgBxF,EAAIuF,GAAY7G,MAAK,SAAAE,GACnDH,EANsC,CAACL,KAAM,qBAAsBD,QAMzCS,EAAIC,OAC9BJ,EAASyG,EAAoB,CAAClF,GAAIuF,EAAYX,SAAS,EAAOa,MAAM,QACrEzG,OAAM,SAAAa,GACLpB,EAR+B,CAACL,KAAM,6BAYjCsH,EAAyB,SAAC,GAAD,MAAuB,CAACtH,KAAM,qBAAsBD,QAAS,CAACwH,OAA9D,EAAEA,OAAoEC,OAAtE,EAAUA,UACnCC,EAAiB,SAAC,GAAD,MAAmB,CAACzH,KAAM,mBAAoBD,QAAS,CAACiC,KAAxD,EAAEA,KAA4DwC,KAA9D,EAAQA,QAEzBkD,EAAoB,SAACvH,GAAD,OAAgB,SAACwH,EAAWvG,EAAMkD,EAASsD,GAA3B,OAAoC,SAACvH,GAClF,IAAM8G,EAAaQ,EAAU/F,GAC7B,OAAOzB,EAAW0H,YAAYV,EAAY/F,EAAKQ,GAAI0C,EAASqD,EAAWC,MC+F5DjE,IAAe1C,aAfN,SAACC,GACrB,MAAO,CACHE,KAAMF,EAAME,SAIO,SAACf,EAAD,GAA6B,IAAjBF,EAAgB,EAAhBA,WACnC,OAAO2H,YAAmB,CACtBZ,UAAWA,EAAU/G,GACrBmH,yBACAG,iBACAC,kBAAmBA,EAAkBvH,IACtCE,KAGuBY,EA3GjB,SAACtB,GAAW,IACdoI,EACkEpI,EADlEoI,eAAgBC,EACkDrI,EADlDqI,YAAa5G,EACqCzB,EADrCyB,KAChC6G,EAAqEtI,EAArEsI,YAAaf,EAAwDvH,EAAxDuH,UAAWI,EAA6C3H,EAA7C2H,uBAAwBI,EAAqB/H,EAArB+H,kBAFhC,EAIUjF,mBAAS,IAJnB,mBAIb6B,EAJa,KAIJ4D,EAJI,KAKdC,EAAetF,aAAY,SAAA3B,GAAK,OAAIA,EAAMkH,KAAKvB,YAC/Cc,EAAY9E,aAAY,SAAA3B,GAAK,OAAIA,EAAMkH,KAAKT,aAC5CU,EAAgBC,iBAAO,MAE7BtF,qBAAU,WAIN,OAHAsE,EAAuB,CAACC,QAAQ,EAAMC,OAAQS,IAC9Cf,EAAU9F,EAAKQ,GAAIqG,GAEZ,WACHX,EAAuB,CAACC,QAAQ,EAAOC,OAAQ,UAEpD,IAEHxE,qBAAU,WACFqF,EAAcE,UACdF,EAAcE,QAAQC,UAAYH,EAAcE,QAAQE,gBAE7D,CAACN,IAyCJ,OACI,yBAAKtG,UAAU,QACX,yBAAKA,UAAU,cACX,4BAAQU,QAASwF,EAAgBlG,UAAU,mBAA3C,SAEJ,yBAAKA,UAAU,eACX,yBAAKA,UAAU,cACTmG,EAAc,kBAAC,EAAD,MAnBxB,yBAAKU,IAAKL,EAAexG,UAAU,cAC7BsG,EAAajG,KAAI,SAACyG,EAAKvG,GACrB,OACI,yBAAKC,IAAKD,EAAKP,UAAU,cACrB,gCAAS8G,EAAI3G,MADjB,KACkC2G,EAAInE,UAgB1C,yBAAK3C,UAAU,iBACX,0BAAMuD,SAlCP,SAAC3D,GAChBA,EAAEC,iBACF,IAAMkH,EAAgB,CAClBhH,GAAIqG,EACJjG,KAAM2F,EAAU3F,KAChBuE,UAAWoB,EAAUpB,YAnBT,SAAC/B,EAAMmD,GACvB,IAAMkB,EAAa,CACf7G,KAAMZ,EAAKY,KACXwC,OACA+B,UAAWnF,EAAKmF,WAEdqB,EAAOkB,KAAKC,MAClBrB,EAAkBC,EAAWvG,EAAMyH,EAAYjB,GAC1CtH,MAAK,SAAAmB,GACFX,EAAOa,KAAK,cAAe,CAACqH,KAAMf,EAAagB,OAAQ7H,EAAKQ,GAAI+F,YAAWC,OAAMtD,QAASuE,OAE7FjI,OAAM,SAAAa,OAUXoG,CAAYvD,EAASsE,GACrBV,EAAW,KA0BiCrG,UAAU,gBAClC,yBAAKA,UAAU,sBACX,2BAAOwD,SAAU,SAAC5D,GAAD,OAAOyG,EAAWzG,EAAEwD,OAAOC,QAAQlF,KAAK,OAAO6B,UAAU,eAAeqD,MAAOZ,KAEpG,yBAAKzC,UAAU,uBACX,4BAAQA,UAAU,mBAAlB,YAKhB,yBAAKA,UAAU,eACX,yBAAKA,UAAU,mBACT8F,EAAU3F,OAASgG,GAAgB,kBAAC,EAAD,cCf9CrE,I,OAAAA,EAAe1C,aAdN,SAACC,GACrB,MAAO,CACHE,KAAMF,EAAME,KACZyF,SAAU3F,EAAM2F,aAIG,SAACxG,EAAD,GAA6B,IAAjBF,EAAgB,EAAhBA,WACnC,OAAO2H,YAAmB,CACtBpB,oBAAqBA,EAAoBvG,GACzC4G,sBACD1G,KAGuBY,CAA6C6E,aAjE1D,SAACnG,GAAW,IAClByB,EAA0CzB,EAA1CyB,KAAMsF,EAAoC/G,EAApC+G,oBAAqBwC,EAAevJ,EAAfuJ,YAE9BC,GAAW,EACXD,IACAC,GAAW,GALS,MAQA1G,mBAAS0G,GART,mBAQjBf,EARiB,KAQXgB,EARW,KASlBpB,EAAcnF,aAAY,SAAC3B,GAAD,OAAWA,EAAMkH,KAAKiB,WAChDC,EAAkBzG,aAAY,SAAC3B,GAAD,OAAWA,EAAM2F,SAASwC,WACxDtD,EAAelD,aAAY,SAAC3B,GAAD,OAAWA,EAAM2F,SAASA,YAE3D7D,qBAAU,WACN0D,EAAoBtF,EAAKQ,MAC1B,IAEH,IAUM2H,EAAkBnB,EAKlB,kBAAC,EAAD,CACEL,eAXe,WACnBpI,EAAMmF,QAAQC,KAAd,MACAqE,GAAQ,IAUJnB,YAAaiB,EACblB,YAAaA,IAPjB,kBAAC,EAAD,CACIhC,SAAU,SAACpE,GAAD,OAXdwH,EAAQ,CAACI,MAAM,EAAMrC,WADPA,EAYiBvF,SAV/BjC,EAAMmF,QAAQC,KAAd,gBAA4BoC,IAFf,IAACA,GAaVpB,aAAcA,IAQtB,OACI,yBAAKlE,UAAU,aACX,yBAAKA,UAAU,YACTyH,EAAkB,kBAAC,EAAD,MAChB,yBAAKzH,UAAU,kBACV0H,WClCVE,GAfC,SAAC9J,GACb,IAAM+J,EAAS7G,aAAY,SAAA3B,GAAK,OAAIA,EAAME,KAAKQ,MAG3CsH,EAFgBS,IAAYC,MAAMjK,EAAMkK,SAASC,QAEvB1B,KAE9B,OAAIc,GACIA,EAAYjF,aAAeyF,EAAOzF,WAC3B,kBAAC,IAAD,CAAUnC,GAAG,QAIrB,kBAAC,GAAD,CAAUoH,YAAaA,KCkOnBvF,KAAe1C,aAVN,SAACC,GACrB,MAAO,MAGgB,SAACb,GACxB,OAAOyH,YAAmB,CACtBhI,wBACDO,KAGuBY,EA3OV,SAACtB,GAAW,IAExBoK,EAOApK,EAPAoK,SACAC,EAMArK,EANAqK,gBACAC,EAKAtK,EALAsK,QACA1D,EAIA5G,EAJA4G,UACA2D,EAGAvK,EAHAuK,cACA/J,EAEAR,EAFAQ,WACAL,EACAH,EADAG,qBARuB,EAgBvBkK,EAJAG,kBAZuB,MAYV,EAZU,IAgBvBH,EAHAI,mBAbuB,MAaT,EAbS,IAgBvBJ,EAFAK,sBAduB,MAcN,EAdM,IAgBvBL,EADAM,sBAfuB,MAeN,EAfM,EAkBpBrE,EAAcC,qBAAWC,GAAzBF,WAEDsE,EAAkBjC,iBAAO,MACzBkC,EAAclC,iBAAO,MArBA,EAwBqB7F,oBAAS,GAxB9B,mBAwBpBgI,EAxBoB,KAwBFC,EAxBE,OAyByBjI,mBAAS,MAzBlC,mBAyBpBkI,EAzBoB,KAyBAC,EAzBA,OA0BOnI,mBAAS,MA1BhB,mBA0BpBoI,EA1BoB,KA0BTC,EA1BS,KA4BrBC,EAAgBnF,IAAG,CACrB,eAAe,EACf,OAAU6E,IAsCRO,EAAkB,WACpBN,GAAoB,GACpBH,EAAgBhC,QAAQrD,MAAQ,MAG9B+F,EAAc,WAChBH,EAAa,IACbN,EAAYjC,QAAQrD,MAAQ,MA0C1BgG,EAAiBtF,IAAG,CACtB,gBAAgB,EAChB,cAAeiF,IAGnB,OACI,yBAAKhJ,UAAWqJ,GACZ,yBAAKrJ,UAAU,2BACX,yBAAKA,UAAU,aACX,2BAAOwD,SAhDI,SAAC5D,GACxB,IAAM0J,EAAO1J,EAAEwD,OAAOmG,MAAM,GAE5B,GAAID,EAAM,CAGN,IAAME,EAAS,IAAIC,WACnBD,EAAOE,cAAcJ,GAErBE,EAAOG,UAAY,WACf,IAAMC,EAAeJ,EAAOK,OAC5BZ,EAAaW,SAIjBR,KAiC6CvC,IAAK8B,EAAaxK,KAAK,SAExD6K,EACI,oCACI,yBAAKtI,QA7BR,SAACd,GACtBA,EAAEC,iBAEF,IAAMhB,EAAO,IAAIiL,SACjBjL,EAAKkL,OAAO,aAAcpB,EAAYjC,QAAQ6C,MAAM,IAEpDjL,EAAW0L,iBAAiBnL,GAAMJ,MAAK,SAAAmB,GACnCwJ,IACAnL,EAAqB,CACjBoK,cAAezI,EAAEhB,KAAKyJ,mBAE3BtJ,OAAM,SAAAa,QAkB+CI,UAAU,yBAA1C,UACA,yBAAKU,QAAS0I,EAAapJ,UAAU,oCAArC,WAEJ,yBAAKU,QApCL,WACpBiI,EAAYjC,QAAQuD,SAmC+BjK,UAAU,yBAAzC,YAIhB,yBAAKA,UAAU,4BACX,yBAAKA,UAAU,mCAAmCwE,MAAO,CAACC,gBAAgB,OAAD,OAASL,GAAT,OAAsBiE,EAAtB,QAEzE,yBAAKrI,UAAU,+BAA+BwE,MAAO,CAACC,gBAAgB,OAAD,OAASuE,EAAT,SAGzE,yBAAKhJ,UAAU,sBACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,qBACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,wBACX,yBAAKA,UAAU,6BAA6BwE,MAAO,CAACC,gBAAgB,OAAD,OAASL,GAAT,OAAsBM,EAAtB,OAE3D0D,EACI,yBAAKpI,UAAU,sBACX,0BAAMuD,SAvH7B,SAAC3D,GAClBA,EAAEC,iBAEF,IAAMhB,EAAO,IAAIiL,SACjBjL,EAAKkL,OAAO,SAAUrB,EAAgBhC,QAAQ6C,MAAM,IAGpDjL,EAAW4L,aAAarL,GAAMJ,MAAK,SAAAmB,GAC/BuJ,IACAlL,EAAqB,CACjByG,UAAW9E,EAAEhB,KAAK8F,eAEvB3F,OAAM,SAAAa,QA2G6DI,UAAWkJ,GACrC,2BAAOlJ,UAAU,sBAAjB,qBAEI,2BAAO6G,IAAK6B,EAAiBlF,SAzG5D,SAAC5D,GAClB,IAAM0J,EAAO1J,EAAEwD,OAAOmG,MAAM,GAC5B,GAAID,EAAM,CACNT,GAAoB,GAEpB,IAAMW,EAAS,IAAIC,WACnBD,EAAOE,cAAcJ,GAErBE,EAAOG,UAAY,WACf,IAAMC,EAAeJ,EAAOK,OAC5Bd,EAAsBa,SAI1Bf,GAAoB,IA2F6E1K,KAAK,UAE9D,yBAAK6B,UAAU,wBACX,yBAAKA,UAAU,uBAAuBwE,MAAO,CAACC,gBAAgB,OAAD,OAASqE,EAAT,QAG7D,yBAAK9I,UAAU,wBACX,yBAAKA,UAAU,sBACX,4BAAQ7B,KAAK,SAAS6B,UAAU,OAAhC,UAEJ,yBAAKA,UAAU,uBACX,yBAAKU,QAASyI,EAAiBnJ,UAAU,kBAAzC,eAMpB,OAIhB,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,uBACVyI,GAEL,yBAAKzI,UAAU,qBAAf,cAIJ,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,uBACVwI,GAEL,yBAAKxI,UAAU,qBAAf,cAIJ,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,uBACVuI,GAEL,yBAAKvI,UAAU,qBAAf,WAIJ,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,uBACVsI,GAEL,yBAAKtI,UAAU,qBAAf,aAOhB,yBAAKA,UAAU,wBACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,sBACVkI,Y,SCzGlBpG,I,OAAAA,EAAe1C,aAVN,SAACC,GACrB,MAAO,MAGgB,SAACb,GACxB,OAAOyH,YAAmB,CACtBhI,wBACDO,KAGuBY,EA5Gb,SAACtB,GAAW,IAErBqM,EAWArM,EAXAqM,QACAC,EAUAtM,EAVAsM,IACAjK,EASArC,EATAqC,KACAsI,EAQA3K,EARA2K,eACAD,EAOA1K,EAPA0K,eACAF,EAMAxK,EANAwK,WACA5D,EAKA5G,EALA4G,UACA2F,EAIAvM,EAJAuM,YACA/L,EAGAR,EAHAQ,WACAL,EAEAH,EAFAG,qBACAqM,EACAxM,EADAwM,WAGGlG,EAAcC,qBAAWC,GAAzBF,WAwBP,OACI,yBAAKpE,UAAU,aACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,mBAAmBwE,MAAO,CAACC,gBAAgB,OAAD,OAASL,GAAT,OAAsBM,EAAtB,SAI7D,yBAAK1E,UAAU,mBACVG,IAGT,yBAAKH,UAAU,sBAEPoK,IAAQD,EACJ,yBAAKzJ,QAAS,kBArClB6J,EAqC+BJ,OApC3C7L,EAAWkM,OAAOJ,EAAKG,EAAQF,GAAa5L,MAAK,SAAAE,GAC7C,GAAIA,EAAIC,KAAKgF,GAAI,CAAC,IAAD,EAC2DjF,EAAIC,KAApEyL,EADK,EACLA,YAAaI,EADR,EACQA,OADR,IACgBlL,KAAOiJ,EADvB,EACuBA,eAAgBC,EADvC,EACuCA,eAEpD6B,EAAWC,EAAQ,CACfF,cACA7B,iBACAC,mBAGJxK,EAAqB,CACjBuK,eAAgBiC,EAAOjC,eACvBC,eAAgBgC,EAAOhC,iBAE3BxJ,EAAOa,KAAK,SAAU,CAACqH,KAAMoD,EAAQF,oBAE1CtL,OAAM,SAAAa,GACLjC,QAAQC,IAAIgC,MAlBL,IAAC2K,GAqCyCvK,UAAU,iCAEvCqK,EAAc,WAAa,UAGnC,KAER,kBAAC,IAAD,CAASrK,UAAU,gCAAgCC,GAAE,gBAAWkK,IAAhE,QAEIC,IAAQD,EACJ,kBAAC,IAAD,CAASnK,UAAU,gCAAgCC,GAAE,0BAAqBkK,IAA1E,WACA,MAGZ,yBAAKnK,UAAU,mBACX,yBAAKA,UAAU,wBACX,yBAAKA,UAAU,uBACVsI,GAEL,yBAAKtI,UAAU,yBAAf,UAIJ,yBAAKA,UAAU,wBACX,yBAAKA,UAAU,uBACVyI,GAEL,yBAAKzI,UAAU,yBAAf,cAIJ,yBAAKA,UAAU,wBACX,yBAAKA,UAAU,uBACVwI,GAEL,yBAAKxI,UAAU,yBAAf,qBCzBL8B,I,OAAAA,EAAe1C,eAnEhB,SAACtB,GAAW,IACf4M,EAAa5M,EAAb4M,UACDnL,EAAOyB,aAAY,SAAA3B,GAAK,OAAIA,EAAME,QACjCQ,EAAMR,EAANQ,GAHc,EAIKa,mBAAS,IAJd,mBAId+J,EAJc,KAIPC,EAJO,OAKShK,oBAAS,GALlB,mBAKd4G,EALc,KAKLqD,EALK,KAkBfP,EAAa,SAACQ,EAAY3I,GAC5ByI,GAAS,SAACvL,GACN,IAAM0L,EAAQ1L,EAAM2L,WAAU,SAACzG,GAAD,OAAUA,EAAK6F,MAAQU,KAC/CG,EAAO,eACN5L,EAAM0L,GADA,GAEN5I,GAGP,MAAM,GAAN,oBAAW9C,EAAM6L,MAAM,EAAGH,IAA1B,CAAkCE,GAAlC,aAA8C5L,EAAM6L,MAAMH,EAAQ,SAQ1E,OAJA5J,qBAAU,WAtBN0J,GAAW,GAEXH,EAAUnL,EAAKQ,IAAItB,MAAK,SAAAE,GACpBiM,EAASjM,EAAIC,KAAK+L,OAClBE,GAAW,MACZ9L,OAAM,SAACa,SAmBX,CAAC8K,IAGA,yBAAK1K,UAAU,SAEPwH,EACI,kBAAC,EAAD,MAEA,yBAAKxH,UAAU,eAEP2K,EAAMtK,KAAI,SAAA8K,GACN,OACI,yBAAK3K,IAAK2K,EAAEf,IAAKpK,UAAU,eACvB,kBAAC,GAAD,CACIG,KAAMgL,EAAEhL,KACRsI,eAAgB0C,EAAE1C,eAClBD,eAAgB2C,EAAE3C,eAClBF,WAAY6C,EAAE7C,WACd5D,UAAWyG,EAAEzG,UACb0F,IAAKrK,EACLoK,QAASgB,EAAEf,IACXC,YAAac,EAAEd,YACfC,WAAYA,eCtBzCxI,KAAe1C,eAlCZ,SAACtB,GAAW,IACnBQ,EAAcR,EAAdQ,WACDiB,EAAOyB,aAAY,SAAA3B,GAAK,OAAIA,EAAME,QAEjCkJ,EAA+FlJ,EAA/FkJ,eAAgBD,EAA+EjJ,EAA/EiJ,eAAgBD,EAA+DhJ,EAA/DgJ,YAAaD,EAAkD/I,EAAlD+I,WAAY5D,EAAsCnF,EAAtCmF,UAAW2D,EAA2B9I,EAA3B8I,cAAelI,EAAYZ,EAAZY,KAEpFgI,GAFgG5I,EAANQ,GAExE,CACpB0I,iBAAgBD,iBAAgBD,cAAaD,eAG3CoC,EAAYU,uBAAY,WAC1B,OAAO9M,EAAW+M,eAAX,MAAA/M,EAAU,aAClB,IAEH,OACI,yBAAK0B,UAAU,WACX,yBAAKA,UAAU,gBACX,kBAAC,GAAD,CACImI,gBAAiBA,EACjBzD,UAAWA,EACX2D,cAAeA,EACfH,SAAU/H,EACViI,SAAS,KAGjB,yBAAKpI,UAAU,mBACX,yBAAKA,UAAU,aACX,kBAAC,GAAD,CAAO0K,UAAWA,WCOvB5I,KAAe1C,eAlCZ,SAACtB,GAAW,IACnBQ,EAAcR,EAAdQ,WACDiB,EAAOyB,aAAY,SAAA3B,GAAK,OAAIA,EAAME,QAEjCkJ,EAA2FlJ,EAA3FkJ,eAAgBD,EAA2EjJ,EAA3EiJ,eAAgBD,EAA2DhJ,EAA3DgJ,YAAaD,EAA8C/I,EAA9C+I,WAAY5D,EAAkCnF,EAAlCmF,UAAW2D,EAAuB9I,EAAvB8I,cAAelI,EAAQZ,EAARY,KAEpFgI,EAAkB,CACpBM,iBAAgBD,iBAAgBD,cAAaD,cAG3CoC,EAAYU,uBAAY,WAC1B,OAAO9M,EAAWgN,eAAX,MAAAhN,EAAU,aAClB,IAEH,OACI,yBAAK0B,UAAU,WACX,yBAAKA,UAAU,gBACX,kBAAC,GAAD,CACImI,gBAAiBA,EACjBzD,UAAWA,EACX2D,cAAeA,EACfH,SAAU/H,EACViI,SAAS,KAGjB,yBAAKpI,UAAU,mBACX,yBAAKA,UAAU,aACX,kBAAC,GAAD,CAAO0K,UAAWA,WC6FvBa,GA3HI,SAACzN,GAAW,IACpBQ,EAA4BR,EAA5BQ,WAAYiB,EAAgBzB,EAAhByB,KAAMiM,EAAU1N,EAAV0N,OADC,EAGM5K,mBAAS,IAHf,mBAGnB6K,EAHmB,KAGTC,EAHS,OAIc9K,mBAAS,MAJvB,mBAInB+K,EAJmB,KAILC,EAJK,KAMpBC,EAAgBpF,iBAAO,MACvBqF,EAAiBrF,iBAAO,MACxBsF,EAAmBtF,iBAAO,MAC1BuF,EAAYvF,iBAAO,MA2EnBwF,EAAkBlI,IAAG,CACvB,KAAO,EACP,aAAc4H,IAGlB,OACI,0BAAMpI,SA1CS,SAAC3D,GAChBA,EAAEC,iBAEF,IAAMyJ,EAAOuC,EAAcnF,QAAQ6C,MAAM,GAEzC,GAAIkC,EAASS,OAAS,GAAK5C,EAAM,CAC7B,IAAMzK,EAAO,IAAIiL,SACjBjL,EAAKkL,OAAO,OAAQ0B,GACpB5M,EAAKkL,OAAO,KAAMxK,EAAKQ,IACvBlB,EAAKkL,OAAO,SAAUyB,GACtB3M,EAAKkL,OAAO,QAAST,GAErBhL,EAAW6N,WAAWtN,GAAMJ,MAAK,SAAAE,GAlBrC+M,EAAY,IACZE,EAAgB,MAChBG,EAAiBrF,QAAQ0F,OACzBP,EAAcnF,QAAQrD,MAAQ,KAoBtBpE,EAAOa,KAAK,aAAc,CACtBuM,KAAM1N,EAAIC,KAAKyN,KACflF,KAAMqE,IAGNA,EAAOpJ,aAAe7C,EAAKQ,GAAGqC,YAC9BnD,EAAOa,KAAK,eAAgB,CACxBuM,KAAM,CACFC,SAAU3N,EAAIC,KAAKyN,KAAKC,UAE5BnF,KAAMqE,OAGfzM,OAAM,SAAAa,SAYeI,UAAU,eAClC,2BAAOwD,SAnEU,SAAC5D,GACtB,IAAM0J,EAAO1J,EAAEwD,OAAOmG,MAAM,GAC5B,GAAID,EAAM,CACN,IAAME,EAAS,IAAIC,WACnBD,EAAOE,cAAcJ,GAErBwC,EAAepF,QAAQ0F,OAEvB5C,EAAOG,UAAY,WACf,IAAMC,EAAeJ,EAAOK,OAC5B+B,EAAgBhC,SAGpBgC,EAAgB,OAsDmB/E,IAAKgF,EAAe7L,UAAU,SAAS7B,KAAK,SAC/E,yBAAK6B,UAAU,qBACX,yBAAKA,UAAU,aACX,uBAAGA,UAAU,mBAAmBuM,cAAY,WAGpD,yBAAKvM,UAAU,qBACT2L,EACE,yBAAK3L,UAAU,sBACX,yBAAK6G,IAAKmF,EAAWQ,IAAKb,EAAcc,IAAI,MAEhD,KACJ,yBAAKzM,UAAU,sBACX,8BAAUwD,SA7FD,SAAC5D,GACtB8L,EAAY9L,EAAEwD,OAAOC,QA4F6BI,YAAY,sBAAsBzD,UAAU,iBAAiBqD,MAAOoI,EAAU1L,GAAG,GAAG2M,KAAK,KAAKC,KAAK,QAG7I,yBAAK3M,UAAU,wBACX,yBAAKA,UAAU,uBACX,yBAAK6G,IAAKiF,EAAgBpL,QA9FzB,SAACd,GACd+L,GACAC,EAAgB,MAChBE,EAAepF,QAAQ0F,QAEvBP,EAAcnF,QAAQuD,SAyFuCjK,UAAWiM,GACxD,uBAAGjM,UAAU,kBACVuM,cAAY,WAGvB,yBAAKvM,UAAU,uBACX,4BAAQ6G,IAAKkF,EAAkB5N,KAAK,SAAS6B,UAAU,OAAvD,aCyJT4M,GA5QS,SAAC9O,GAAW,IACzB+O,EAA6I/O,EAA7I+O,MADwB,EACqH/O,EAAtIsK,eADiB,SACA7I,EAAqHzB,EAArHyB,KAAMjB,EAA+GR,EAA/GQ,WAA4BkN,GAAmF1N,EAAnGgP,eAAmGhP,EAAnF0N,QAAQuB,EAA2EjP,EAA3EiP,eAClE3I,GAD6ItG,EAA3DkP,gBAA2DlP,EAA1CmP,mBAA0CnP,EAAtBoP,mBACzG7I,qBAAWC,GAAzBF,YAkFD+I,EAAiB,SAACd,GACpB,OACI,yBAAKrM,UAAU,aACX,yBAAKA,UAAU,uBACX,yBAAKU,QAAS,kBAAMqM,EAAeV,EAAKjC,MAAMpK,UAAU,wBACpD,uBAAGA,UAAU,kBAAkBuM,cAAY,SAD/C,IACyDF,EAAKe,SAASlB,OADvE,cAIJ,yBAAKlM,UAAU,oBACX,yBAAKU,QAAS,kBAzCZ2M,EAyC2BhB,EAAKjC,IAzCxBkD,EAyC6BjB,EAAKiB,aAxCxDhP,EAAWiP,SAAShO,EAAKQ,GAAIsN,EAAQC,GAAS7O,MAAK,SAAAE,GAC/C,GAAIA,EAAIC,KAAKgF,GAAI,CAAC,IACNyI,EAAS1N,EAAIC,KAAbyN,KACRpN,EAAOa,KAAK,WAAY,CACpBuM,OACAxE,OAAQtI,EAAKQ,GACboH,KAAMqE,QAIfzM,OAAM,SAAAa,OAXI,IAACyN,EAAQC,GAyC4CtN,UAAU,qBAEvDqM,EAAKiB,QAGF,uBAAG9I,MAAO,CAAC9B,MAAO,OAAQ1C,UAAU,cAAcuM,cAAY,SAF9D,uBAAGvM,UAAU,gBAAgBuM,cAAY,SAHrD,IAOOF,EAAKmB,WAPZ,aAcVC,EAAkB,SAACpB,GAAuB,IAAjBqB,IAAgB,yDAC3C,OACI,yBAAK1N,UAAU,uBACX,yBAAKwM,IAAG,UAAKpI,GAAL,OAAkBiI,EAAKC,UAAYG,IAAI,KAE3CiB,EAAOP,EAAed,GAAQ,OAMxCsB,EAAgB,SAACC,EAAGvB,GACtB,OACI,yBAAKrM,UAAU,WACX,yBAAKA,UAAU,kBAAkBwE,MAAO,CAACC,gBAAgB,OAAD,OAASL,GAAT,OAAsBwJ,EAAErO,KAAKmF,UAA7B,QAGxD,yBAAK1E,UAAU,oBACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,iBACX,gCAAS4N,EAAErO,KAAKY,OAEpB,yBAAKH,UAAU,iBACV4N,EAAEC,OAGX,yBAAK7N,UAAU,iBACX,yBAAKA,UAAU,iBACV4N,EAAEjL,MAEP,yBAAK3C,UAAU,kBACX,yBAAKU,QAAS,kBAnHjBoN,EAmHmCF,EAAExD,IAnH1BkD,EAmH+BM,EAAEN,QAnHxBD,EAmHiChB,EAAKjC,SAlH3E9L,EAAWyP,YAAYxO,EAAKQ,GAAI+N,EAAWR,GAAS7O,MAAK,SAAAE,GACrD,GAAIA,EAAIC,KAAKgF,GAAI,CAAC,IACNoK,EAAYrP,EAAIC,KAAhBoP,QACR/O,EAAOa,KAAK,cAAe,CACvBkO,UACAnG,OAAQtI,EAAKQ,GACboH,KAAMqE,EACN6B,eAITtO,OAAM,SAAAa,GACLjC,QAAQC,IAAIgC,EAAE6C,YAbF,IAACqL,EAAWR,EAASD,GAmH4CrN,UAAU,gBAE/D4N,EAAEN,QACE,oCACI,uBAAG9I,MAAO,CAAC9B,MAAO,OAAQ1C,UAAU,cAAcuM,cAAY,UAGlE,oCACI,uBAAGvM,UAAU,gBAAgBuM,cAAY,UARzD,OAYWqB,EAAEJ,WAAa,EAAII,EAAEJ,WAAa,WAS/DS,EAAoB,SAAC5B,EAAM6B,GAC7B,IAAIC,EAAU,KAwBd,OArBIA,EADAD,EACUT,EAAgBpB,GAGtB,oCAEQA,EAAKC,SACDmB,EAAgBpB,GAAM,GACtB,KAER,yBAAKrM,UAAU,sBACX,yBAAKA,UAAU,yBACTqM,EAAK1J,OAGf,yBAAK3C,UAAU,sBACTmN,EAAed,KAO7B,oCACM8B,EAEEtB,EAAMuB,QAAQ/B,EAAKjC,KAAKiE,eACpB,yBAAKrO,UAAU,0BACX,yBAAKA,UAAU,gBAEPqM,EAAKe,SAASlB,OACV,yBAAKlM,UAAU,sBACTqM,EAAKe,SAAS/M,KAAI,SAAAuN,GAChB,OACI,yBAAKpN,IAAKoN,EAAExD,IAAKpK,UAAU,sBACrB2N,EAAcC,EAAGvB,QAKnC,KAER,yBAAKrM,UAAU,wBACX,0BAAMuD,SAAU,SAAC3D,GAAD,OAzM1B,SAACA,EAAGyN,GACtBzN,EAAEC,iBACF,IAAM8C,EAAO/C,EAAEwD,OAAOkL,SAAS,GAAGjL,MAC9BV,IACArE,EAAWiQ,cAAchP,EAAKQ,GAAIsN,EAAQ1K,GAAMlE,MAAK,SAACE,GAAS,IACnDyO,EAAazO,EAAIC,KAAjBwO,SAERnO,EAAOa,KAAK,gBAAiB,CACzBsN,WACAC,SACAlG,KAAMqE,OAEXzM,OAAM,SAAAa,OAGTA,EAAEwD,OAAOoL,SA0LsCD,CAAc3O,EAAGyM,EAAKjC,MAAMpK,UAAU,kBACzD,yBAAKA,UAAU,yBACX,8BAAUA,UAAU,iBAAiB0M,KAAK,KAAKC,KAAK,QAExD,yBAAK3M,UAAU,2BACX,yBAAKA,UAAU,0BACX,4BAAQA,UAAU,OAAlB,iBAOxB,OA2CpB,OAFArC,QAAQC,IAAI,oBAGR,yBAAKoC,UAAU,sBArCR6M,EAAM4B,MAAMpO,KAAI,SAACgM,GACpB,IAAM6B,EAAc7B,EAAKC,WAAaD,EAAK1J,KACrC+L,EAAWR,EAAc,UAAY,aAE3C,OACI,yBAAK1N,IAAK6L,EAAKjC,IAAKpK,UAAU,sBAC1B,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,sBACMkO,EAlK7B,yBAAKlO,UAAU,6BACX,uBAAGA,UAAU,kBAAkBuM,cAAY,UAMnD,yBAAKvM,UAAU,8BACX,uBAAGA,UAAU,eAAeuM,cAAY,WA6J5BnE,EACI,yBAAKpI,UAAU,wBACX,yBAAKU,QAAS,kBAtM1BX,EAsM2CsM,EAAKjC,SArMhE9L,EAAWqQ,WAAW5O,GAAItB,MAAK,SAACE,GAC5BM,EAAOa,KAAK,aAAc,CACtBuN,OAAQtN,EACRoH,KAAMqE,OAGXzM,OAAM,SAAAa,OAPM,IAACG,GAsMsDC,UAAU,8BAChD,uBAAGA,UAAU,cAAcuM,cAAY,WAG/C,KAER,yBAAKvM,UAAU,sBACX,yBAAKA,UAAU,2BACX,0BAAMA,UAAU,sBAAsBqM,EAAK9M,KAAKY,MADpD,WACyEuO,GAEzE,yBAAK1O,UAAU,4BACTqM,EAAKwB,OAGbI,EAAkB5B,EAAM6B,UCuKnClM,I,OAAAA,EAAaF,EAAe1C,aAZnB,SAACC,GACrB,MAAO,CACHE,KAAMF,EAAME,SAIO,SAACf,GACxB,OAAOyH,YAAmB,CACtBhI,wBACDO,KAGoCY,EAtZ9B,SAACtB,GAAW,IAEjBQ,EAUAR,EAVAQ,WACAL,EASAH,EATAG,qBACAsB,EAQAzB,EARAyB,KACAqP,EAOA9Q,EAPA8Q,WACAC,EAMA/Q,EANA+Q,WACA1G,EAKArK,EALAqK,gBACA2G,EAIAhR,EAJAgR,sBACApK,EAGA5G,EAHA4G,UACA2D,EAEAvK,EAFAuK,cACA0G,EACAjR,EADAiR,aAGE3G,GAAWwG,EACXpD,EAASoD,EAAaC,EAAatP,EAAKQ,GAf1B,EAiBYa,mBAAS,IAjBrB,mBAiBboO,EAjBa,KAiBHC,EAjBG,OAkBUrO,oBAAS,GAlBnB,mBAkBb4G,EAlBa,KAkBJqD,EAlBI,OAmBkBjK,mBAAS,MAnB3B,mBAmBbsO,EAnBa,KAmBAC,EAnBA,OAqBMvO,mBAAS,CAC/B6N,MAAO,GACPL,QAAS,KAvBO,mBAqBbvB,EArBa,KAqBNuC,EArBM,KA0BdC,EAAoB,SAACC,GACvB,IAAMC,EAAU1C,EAAMuB,QAEtB,OAAOkB,EAASE,QAAO,SAASC,EAAKC,GACjC,IAAMC,EAAYJ,EAAQG,EAAEtF,MAAQmF,EAAQG,EAAEtF,KAAKiE,iBAAmB,EACtE,OAAO,eAAIoB,EAAX,eAAiBC,EAAEtF,IAAM,CACrBiE,eAAgBsB,OAErB,KAGDC,EAAmB,SAACN,GACtB,IAAMO,EAAkBR,EAAkBC,GAC1CF,GAAS,SAAA/P,GACL,MAAO,CACHoP,MAAOa,EACPlB,QAASyB,OAwBfC,EAAuB,SAAC/P,GAC1BqP,GAAS,SAAA/P,GACL,IAAMwN,EAAQxN,EAAMoP,MAEd1D,EAAQ8B,EAAM7B,WAAU,SAAA0E,GAAC,OAAIA,EAAEtF,MAAQrK,KACvCsM,EAAQQ,EAAM9B,GAEdgF,EAAWlD,EAAMmD,QAAO,SAAAN,GAAC,OAAIA,EAAEtF,MAAQrK,KAI7C,OAFAoP,EAAe9C,GAER,CACHoC,MAAOsB,EACP3B,QAASiB,EAAkBU,QAgBvC5O,qBAAU,WAqBN,OApBAlC,EAAOgR,GAAG,cAAc,YAAa,IAAX5D,EAAU,EAAVA,KACtB6D,EAAQ7D,MAGZpN,EAAOgR,GAAG,cAAc,YAAe,IAAb5C,EAAY,EAAZA,OACtByC,EAAqBzC,MAGzBpO,EAAOgR,GAAG,YAAY,YAAqB,IAAnB5D,EAAkB,EAAlBA,KAAMxE,EAAY,EAAZA,OAC1BmF,EAAgBX,EAAMxE,MAG1B5I,EAAOgR,GAAG,iBAAiB,YAAyB,IAAvB7C,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,OACnCJ,EAAmBI,EAAQD,MAG/BnO,EAAOgR,GAAG,eAAe,YAAgC,IAA9BjC,EAA6B,EAA7BA,QAASnG,EAAoB,EAApBA,OAAQwF,EAAY,EAAZA,OACxCH,EAAmBG,EAAQW,EAASnG,MAGjC,WACH5I,EAAOkR,IAAI,cACXlR,EAAOkR,IAAI,cACXlR,EAAOkR,IAAI,YACXlR,EAAOkR,IAAI,iBACXlR,EAAOkR,IAAI,kBAEhB,IAEHhP,qBAAU,WACN,GAAI+N,EAAa,CACb,IAAM5G,EAAaH,EAAgBG,WAAa,EAC1CC,EAAc2G,EAAY5C,SAAWnE,EAAgBI,YAAc,EAAIJ,EAAgBI,YAE7FuG,EAAsB,CAClBxG,aACAC,mBAGT,CAAC2G,IAGJ/N,qBAAU,WACN,IAAMqK,EAASoD,EAAaC,EAAatP,EAAKQ,GAE9C,OADAd,EAAOa,KAAK,kBAAmB,CAAC0L,WACzB,WACHvM,EAAOa,KAAK,qBAAsB,CAAC0L,cAExC,IAEHrK,qBAAU,WACFyN,GAEA/D,GAAW,GACXvM,EAAW8R,YAAYvB,EAAYtP,EAAKQ,IAAItB,MAAK,SAAAE,GAC7C,IAAME,EAAOF,EAAIC,KAAKC,KAGtBkQ,EAAalQ,EAAK6F,WAClBoK,EAAsB,CAClBrG,eAAgB5J,EAAK4J,eACrBD,eAAgB3J,EAAK2J,eACrBF,WAAYzJ,EAAKyJ,WACjBC,YAAa1J,EAAK0J,cAGtB0G,EAAY,CACRvK,UAAW7F,EAAK6F,UAChBwD,SAAUrJ,EAAKsB,KACf0H,OAAQhJ,EAAKkB,GACbsK,YAAaxL,EAAKwL,cAGtBuF,EAAiB/Q,EAAKgO,OACtBhC,GAAW,MAEZ9L,OAAM,SAAAa,SAKTqP,EAAY,eACLD,EADI,CAEPtK,UAAWnF,EAAKmF,UAChBwD,SAAU3I,EAAKY,KACf0H,OAAQtI,EAAKQ,MAhGrB8K,GAAW,GACXvM,EAAW+R,WAAW9Q,EAAKQ,IAAItB,MAAK,SAAAE,GAChCiR,EAAiBjR,EAAIC,KAAKiO,OAC1BhC,GAAW,MACZ9L,OAAM,SAAAa,GAELiL,GAAW,SA+FhB,IAEH,IASML,EAAS,WACXlM,EAAWkM,OAAOjL,EAAKQ,GAAI8O,EAAYxE,GAAa5L,MAAK,SAAAE,GAAQ,IAV7C6B,EAAK6C,EAUuC,EACtB1E,EAAIC,KAAlCyL,EADoD,EACpDA,YAAaI,EADuC,EACvCA,OAAQlL,EAD+B,EAC/BA,KAXbiB,EAYD,cAZM6C,EAYSgH,EAXlC4E,GAAY,SAAA5P,GACR,OAAO,eACAA,EADP,eAEKmB,EAAM6C,OASXyL,EAAsB,CAClBtG,eAAgBjJ,EAAKiJ,eACrBC,eAAgBlJ,EAAKkJ,iBAEzBxK,EAAqB,CACjBuK,eAAgBiC,EAAOjC,eACvBC,eAAgBgC,EAAOhC,iBAE3BxJ,EAAOa,KAAK,SAAU,CAACqH,KAAM0H,EAAYxE,mBAC1CtL,OAAM,SAAAa,QAgBPqN,EAAqB,SAACI,EAAQD,GAChCgC,GAAS,SAAAvC,GACL,IAAMxN,EAAQwN,EAAM4B,MAEd1D,EAAQ1L,EAAM2L,WAAU,SAACzG,GAAD,OAAUA,EAAK6F,MAAQiD,KAC/C9I,EAAOlF,EAAM0L,GACbE,EAAO,eACN1G,EADM,CAET6I,aAGE2C,EAAQ,uBAAO1Q,EAAM6L,MAAM,EAAGH,IAAtB,CAA8BE,GAA9B,aAA0C5L,EAAM6L,MAAMH,EAAQ,KAEtEwE,EAAU1C,EAAMuB,QAChBkC,EAAaP,EAASP,QAAO,SAASC,EAAKC,GAC7C,IAAMC,EAAYJ,EAAQG,EAAEtF,MAAQmF,EAAQG,EAAEtF,KAAKiE,iBAAmB,EACtE,OAAO,eAAIoB,EAAX,eAAiBC,EAAEtF,IAAM,CACjBiE,eAAgBsB,OAEzB,IAEH,MAAO,CACHlB,MAAOsB,EACP3B,QAASkC,OAMfJ,EAAU,SAAC7D,GACb,IAAMkE,EAAalE,EAAKC,SAAW,EAAI,EAEvCwC,GAAsB,SAAC0B,GACnB,MAAO,CACHlI,WAAYkI,EAAalI,WAAa,EACtCC,YAAaiI,EAAajI,YAAcgI,MAtN9B,SAAClE,GACnB+C,GAAS,SAAA/P,GACL,IAAMiQ,EAAQ,CAAIjD,GAAJ,oBAAahN,EAAMoP,QACjC,MAAO,CACHA,MAAOa,EACPlB,QAASiB,EAAkBC,OAqNnCmB,CAAcpE,IAGZW,EAAkB,SAACX,EAAMxE,GAC3BuH,GAAS,SAACvC,GACN,IAAMxN,EAAQwN,EAAM4B,MAEbrE,EAA4BiC,EAA5BjC,IAAKoD,EAAuBnB,EAAvBmB,WAAYF,EAAWjB,EAAXiB,QAClBvC,EAAQ1L,EAAM2L,WAAU,SAACzG,GAAD,OAAUA,EAAK6F,MAAQA,KAC/C7F,EAAOlF,EAAM0L,GAEbE,EAAO,eACN1G,EADM,CAETiJ,aACAF,QAAS/N,EAAKQ,GAAGqC,aAAeyF,EAAOzF,WAAakL,EAAU/I,EAAK+I,UAGjEyC,EAAQ,uBAAO1Q,EAAM6L,MAAM,EAAGH,IAAtB,CAA8BE,GAA9B,aAA0C5L,EAAM6L,MAAMH,EAAQ,KAE5E,MAAO,CACH0D,MAAOsB,EACP3B,QAASiB,EAAkBU,QAKjC7C,EAAqB,SAACG,EAAQW,EAASnG,GACzCuH,GAAS,SAACvC,GACN,IAAMxN,EAAQwN,EAAM4B,MAERnB,GAAuBU,EAA5B5D,IAA4B4D,EAAvBV,SAASE,EAAcQ,EAAdR,WACfkD,EAAYrR,EAAM2L,WAAU,SAACzG,GAAD,OAAUA,EAAK6F,MAAQiD,KACnDhB,EAAOhN,EAAMqR,GACbC,EAAetE,EAAKe,SAASpC,WAAU,SAACzG,GAAD,OAAUA,EAAK6F,MAAQ4D,EAAQ5D,OACtEwD,EAAIvB,EAAKe,SAASuD,GAClBC,EAAU,eACThD,EADS,CAEZJ,aACAF,QAAS/N,EAAKQ,GAAGqC,aAAeyF,EAAOzF,WAAakL,EAAUM,EAAEN,UAE9DrC,EAAO,eACNoB,EADM,CAETe,SAAS,GAAD,oBAAMf,EAAKe,SAASlC,MAAM,EAAGyF,IAA7B,CAA4CC,GAA5C,aAA2DvE,EAAKe,SAASlC,MAAMyF,EAAe,OAGpGZ,EAAQ,uBAAO1Q,EAAM6L,MAAM,EAAGwF,IAAtB,CAAkCzF,GAAlC,aAA8C5L,EAAM6L,MAAMwF,EAAY,KAE9EnB,EAAU1C,EAAMuB,QAChBkC,EAAaP,EAASP,QAAO,SAASC,EAAKC,GAC7C,IAAMC,EAAYJ,EAAQG,EAAEtF,MAAQmF,EAAQG,EAAEtF,KAAKiE,iBAAmB,EACtE,OAAO,eAAIoB,EAAX,eAAiBC,EAAEtF,IAAM,CACjBiE,eAAgBsB,OAEzB,IAEH,MAAO,CACHlB,MAAOsB,EACP3B,QAASkC,OAKdpI,EAAiC8G,EAAjC9G,SAAUL,EAAuBmH,EAAvBnH,OAAQwC,EAAe2E,EAAf3E,YAEzB,OACI,yBAAKrK,UAAU,WACX,yBAAKA,UAAU,gBACX,kBAAC,GAAD,CACImI,gBAAiBA,EACjBC,QAASA,EACTF,SAAUA,EACVxD,UAAWA,EACX2D,cAAeA,KAGvB,yBAAKrI,UAAU,mBACX,yBAAKA,UAAU,aAENoI,EAYG,KAXA,yBAAKpI,UAAU,oBACX,yBAAKA,UAAU,mBAEPqK,EACI,yBAAK3J,QAAS8J,EAAQxK,UAAU,kBAAhC,YAEA,yBAAKU,QAAS8J,EAAQxK,UAAU,OAAhC,YAOxB,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,sBAGf,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,qBACX,yBAAKA,UAAU,wBACX,kBAAC,GAAD,CAAY1B,WAAYA,EAAYiB,KAAMzB,EAAMyB,KAAMiM,OAAQ3D,EAAQqI,QAASA,EAASW,YAAajB,KAGrGpI,EACI,kBAAC,EAAD,MACA,MAGZ,kBAAC,GAAD,CACIY,QAASA,EACTyE,MAAOA,EACPvO,WAAYA,EACZiB,KAAMA,EACNiM,OAAQA,EACRsB,eAAgBgD,EAChB9C,gBAAiBA,EACjBC,mBAAoBA,EACpBF,eAvKT,SAACM,GACpB,IA/JwByD,EA+JlBvB,EAAU1C,EAAMuB,QAEhBoC,EAAejB,EAAQlC,GAAQgB,eAC/B0C,EAAQ,eAAOxB,EAAP,eAAiBlC,EAAS,CAChCgB,gBAAiBmC,KAnKDM,EAsKLC,EArKnB3B,GAAS,SAAA/P,GACL,MAAO,CACHoP,MAAO5B,EAAM4B,MACbL,QAAS0C,OAkUW5D,mBAAoBA,gBCzWzC8D,GApCE,SAAClT,GACd,IAAM+J,EAAS/J,EAAMoE,cAAcC,OAAOpC,GADlB,EAGUa,mBAAS,MAHnB,mBAGjB8D,EAHiB,KAGNqK,EAHM,OAKsBnO,mBAAS,IAL/B,mBAKjBuH,EALiB,KAKA8I,EALA,KA0BxB,OAAO,kBAAC,GAAD,eACHlC,aAAcA,EACdrK,UAAWA,EACXmK,WAAYhH,EACZM,gBAAiBA,EACjB2G,sBAxB0B,SAAC3M,GAEvB8O,EADkB,oBAAX9O,EACY,SAAC9C,GAChB,IAAM6R,EAAY/O,EAAO9C,GACzB,OAAO,eACAA,EADP,GAEO6R,IAIQ,SAAC7R,GAChB,OAAO,eACAA,EADP,GAEO8C,MAYfyM,YAAY,GAAU9Q,KCWfsB,gBAVS,SAACC,GACrB,MAAO,MAGgB,SAACb,GACxB,OAAOyH,YAAmB,CACtB7H,4BACDI,KAGQY,EAxCA,SAACtB,GAAW,IACfM,EAA6BN,EAA7BM,yBACFmB,EAAOyB,aAAY,SAAA3B,GAAK,OAAIA,EAAME,QAClCmF,EAAYnF,EAAKmF,UACjB2D,EAAgB9I,EAAK8I,cAWrBF,EARK,CACHM,eAAgBlJ,EAAKkJ,eACrBD,eAAgBjJ,EAAKiJ,eACrBD,YAAahJ,EAAKgJ,YAClBD,WAAY/I,EAAK+I,YAUzB,OAAO,kBAAC,GAAD,eACH5D,UAAWA,EACX2D,cAAeA,EACfF,gBAAiBA,EACjB2G,sBAR0B,SAAC3M,GAC3B/D,EAAyB+D,KAQrBrE,OCmCGgE,I,OAAAA,EAAe1C,eA1Df,SAACtB,GAAW,IAChBQ,EAAcR,EAAdQ,WACDiB,EAAOyB,aAAY,SAAA3B,GAAK,OAAIA,EAAME,QAEjCkJ,EAA2FlJ,EAA3FkJ,eAAgBD,EAA2EjJ,EAA3EiJ,eAAgBD,EAA2DhJ,EAA3DgJ,YAAaD,EAA8C/I,EAA9C+I,WAAY5D,EAAkCnF,EAAlCmF,UAAW2D,EAAuB9I,EAAvB8I,cAAelI,EAAQZ,EAARY,KAJpE,EAMMS,mBAAS,IANf,mBAMfiJ,EANe,KAMPsH,EANO,OAOIvQ,mBAAS,IAPb,mBAOfwQ,EAPe,KAORC,EAPQ,KAShB3G,EAAYU,uBAAY,WAC1B,OAAO9M,EAAWgT,WAAWzH,KAC9B,CAACA,IAEE1B,EAAkB,CACpBM,iBAAgBD,iBAAgBD,cAAaD,cAYjD,OACI,yBAAKtI,UAAU,WACX,yBAAKA,UAAU,gBACX,kBAAC,GAAD,CACImI,gBAAiBA,EACjBzD,UAAWA,EACX2D,cAAeA,EACfH,SAAU/H,EACViI,SAAS,KAGjB,yBAAKpI,UAAU,mBACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,UACX,0BAAMuD,SAvBR,SAAC3D,GACfA,EAAEC,iBACFsR,EAAUC,IAqBiCpR,UAAU,gBACjC,yBAAKA,UAAU,gBACX,2BAAOqD,MAAO+N,EAAO5N,SApB3B,SAAC5D,GACnByR,EAASzR,EAAEwD,OAAOC,QAmBmDI,YAAY,cAActF,KAAK,UAEhF,yBAAK6B,UAAU,gBACX,4BAAQ7B,KAAK,SAAS6B,UAAU,OAAhC,UAGR,yBAAKA,UAAU,kBACX,kBAAC,GAAD,CAAO0K,UAAWA,cC/BxC6G,G,iLACiBC,EAAWC,EAAWC,GAAW,IACzCpT,EAAcT,KAAKC,MAAnBQ,WACDC,EAAQV,KAAKC,MAAMyB,KAAKhB,MAE1BiT,EAAUjS,KAAKhB,QAAUA,GACzBD,EAAWqT,SAASpT,K,gCAMxB,OADiBV,KAAKC,MAAdyB,O,0CAIS,IAAD,SACiF1B,KAAKC,MAA/FQ,EADS,EACTA,WAAY2G,EADH,EACGA,oBAAqBW,EADxB,EACwBA,eAA6BxH,GADrD,EACwCC,YADxC,EACqDD,0BAOrEa,EAAOgR,GAAG,cAAc,SAACpR,GACrBlB,QAAQC,IAAI,WAAYiB,GAExB,IAAMU,EAAO,EAAKqS,UAHY,EAIL,EAAK9T,MAAMyI,KAA7Bb,EAJuB,EAIvBA,OAAQC,EAJe,EAIfA,OACXkM,EAAOhT,EAAKuI,OAAOhF,aAAe7C,EAAKQ,GAAGqC,WAGxCK,EAAO,eAAO5D,EAAK4D,SAErBoP,IACApP,EAAQtC,KAAOtB,EAAKiH,UAAU3F,KAC9BsC,EAAQiC,UAAY7F,EAAKiH,UAAUpB,UAEnCO,EAAoB,CAAClF,GAAIlB,EAAKsI,KAAMxC,SAAS,EAAOlC,UAAS+C,MAAM,MAGnEE,GAAWC,EAAOvD,aAAevD,EAAKsI,KAAK/E,YAAcuD,EAAOvD,aAAevD,EAAKuI,OAAOhF,WAQtFyP,IACDC,OAAOC,EAAEC,MAAM,CAACC,KAAK,MAAD,OAAQpT,EAAK4D,QAAQtC,KAArB,iBAAkCtB,EAAK4D,QAAQE,QACnEsC,EAAoB,CAAClF,GAAIlB,EAAKuI,OAAQzC,SAAS,EAAMlC,UAAS+C,MAAM,MATxEI,EAAe/G,EAAK4D,SAEfoP,IACDvT,EAAW4T,eAAe3S,EAAKQ,GAAIlB,EAAKuI,OAAQvI,EAAKkH,MACrDd,EAAoB,CAAClF,GAAIlB,EAAKuI,OAAQzC,SAAS,EAAOlC,UAAS+C,MAAM,SAUjFvG,EAAOgR,GAAG,UAAU,SAACpR,GAAU,IAErBsT,EADgBtT,EAAfwL,YACmB,GAAK,EAE/BjM,EAAyB,CACrBqK,eAAgB,EAAKmJ,UAAUnJ,eAAiB0J,OAIxDlT,EAAOgR,GAAG,gBAAgB,SAACpR,GAAU,IAE3BuT,EADavT,EAAKwN,KAAjBC,SACuB,EAAI,EAElClO,EAAyB,CACrBkK,WAAY,EAAKsJ,UAAUtJ,WAAa,EACxCC,YAAa,EAAKqJ,UAAUrJ,YAAc6J,S,+BAMlD,OACI,yBAAKpS,UAAU,OACX,kBAAC,EAAD,MACA,yBAAKA,UAAU,gBACX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOqS,KAAK,IAAInS,OAAK,EAACqB,UAAW+Q,IACjC,kBAAC,EAAD,CAAcpS,OAAK,EAACmS,KAAK,QAAQ9Q,UAAW7D,IAC5C,kBAAC,IAAD,CAAO2U,KAAK,SAAS9Q,UAAWgR,IAChC,kBAAC,EAAD,CAAcrS,OAAK,EAACmS,KAAK,MAAM9Q,UAAWiR,KAC1C,kBAAC,EAAD,CAActS,OAAK,EAACmS,KAAK,aAAa9Q,UAAWkR,KACjD,kBAAC,EAAD,CAAcvS,OAAK,EAACmS,KAAK,aAAa9Q,UAAWmR,KACjD,kBAAC,EAAD,CAAcxS,OAAK,EAACmS,KAAK,aAAa9Q,UAAWoR,KACjD,kBAAC,EAAD,CAAczS,OAAK,EAACmS,KAAK,UAAU9Q,UAAWqR,KAC9C,kBAAC,IAAD,CAAOP,KAAK,SAAS9Q,UAAWc,IAChC,kBAAC,IAAD,CAAOgQ,KAAK,YAAY9Q,UAAWoC,IACnC,kBAAC,IAAD,CAAO0O,KAAK,QAAQQ,OAAQ,WACxB,OAAO,4CAEX,kBAAC,EAAD,CAAcR,KAAK,YAAY9Q,UAAWyP,KAC1C,kBAAC,IAAD,CAAU/Q,GAAG,a,GA/FnBlC,IAAMC,WA2HT8D,KAAe1C,aApBN,SAACC,GACrB,MAAO,CACHyT,cAAezT,EAAM2F,SAAS8N,cAC9BvT,KAAMF,EAAME,KACZgH,KAAMlH,EAAMkH,SAIO,SAAC/H,GACxB,OAAO,aACHH,YAAa,SAAC0U,EAAWxU,GAAZ,OAAsBC,EAASH,EAAY0U,EAAWxU,EAAvBF,MACzC4H,YAAmB,CAClBhB,sBACAG,mBACAQ,iBACAxH,4BACDI,MAImBY,CAA6CmS,KC1IvDyB,QACW,cAA7BlB,OAAO9J,SAASiL,UAEe,UAA7BnB,OAAO9J,SAASiL,UAEhBnB,OAAO9J,SAASiL,SAAS7B,MACvB,2D,aCXS8B,G,kDANX,aAAsB,IAAD,iDAANC,EAAM,yBAANA,EAAM,uBACjB,+BAASA,KACJC,OAAS,IAFG,E,uBADOC,QCuPjBC,G,4DApPXC,IAAM,Q,KACNhV,MAAQ,K,KA4HRF,YAAc,WACV,OAAO,EAAKmV,WAAW,WAAY,CAC/BC,OAAQ,OACRC,QAAS,CACL,eAAgB,mBAChB,cAAiB,EAAKC,e,KAMlC3N,YAAc,SAACV,EAAYsO,EAAUnR,EAASqD,EAAWC,GACrD,OAAO,EAAKyN,WAAW,cAAe,CAClCC,OAAQ,OACRC,QAAS,CACL,eAAgB,mBAChB,cAAiB,EAAKC,YAE1B/U,KAAMiV,KAAKC,UAAU,CAAC/T,GAAIuF,EAAYsO,WAAUnR,UAASqD,YAAWC,Y,KAI5ER,gBAAkB,SAACxF,EAAIuF,GACnB,OAAO,EAAKkO,WAAW,eAAgB,CACnCC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpB9U,KAAMiV,KAAKC,UAAU,CAAC/T,KAAIuF,kB,KAIlCR,gBAAkB,SAAC/E,GACf,OAAO,EAAKyT,WAAW,eAAgB,CACnCC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpB9U,KAAMiV,KAAKC,UAAU,CAAC/T,U,uDAhKnBgU,GAAmB,IAAD,OAAb5R,EAAa,uDAAJ,GACrB,OAAO,IAAI6R,SAAQ,SAACC,EAASC,GACzBC,MAAM,GAAD,OAAI,EAAKZ,KAAT,OAAeQ,GAAO5R,GACtB1D,MAAK,SAAA2V,GAAC,OAAKA,EAAEC,OAAO5V,MAAK,SAAAI,GAAI,MAAK,CAACuU,OAAQgB,EAAEhB,OAAQxU,KAAMC,SAC3DJ,MAAK,SAAAE,GACiB,MAAfA,EAAIyU,QAAgBc,EAAO,IAAIhB,IACnCe,EAAQtV,MACTI,OAAM,SAAAa,GACLsU,EAAOtU,W,4BAKjBf,GACF,OAAOhB,KAAK2V,WAAW,QAAS,CAC5BC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpB9U,KAAMiV,KAAKC,UAAUjV,O,+BAIpBA,GACL,OAAOhB,KAAK2V,WAAW,WAAY,CAC/BC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpB9U,KAAMiV,KAAKC,UAAUjV,O,mCAIhByV,GACT,OAAOzW,KAAK2V,WAAW,eAAgB,CACnCC,OAAQ,OACRC,QAAS,CACL,cAAiB7V,KAAK8V,YAE1B/U,KAAM0V,M,uCAIGA,GACb,OAAOzW,KAAK2V,WAAW,mBAAoB,CACvCC,OAAQ,OACRC,QAAS,CACL,cAAiB7V,KAAK8V,YAE1B/U,KAAM0V,M,iCAKHvU,GACP,OAAOlC,KAAK2V,WAAW,QAAS,CAC5BC,OAAQ,OACRC,QAAS,CACL,eAAgB,mBAChB,cAAiB7V,KAAK8V,YAE1B/U,KAAMiV,KAAKC,UAAU,CAAC/T,W,iCAInBuU,GACP,OAAOzW,KAAK2V,WAAW,aAAc,CACjCC,OAAQ,OACRC,QAAS,CACL,cAAiB7V,KAAK8V,YAE1B/U,KAAM0V,M,iCAIHvU,GACP,OAAOlC,KAAK2V,WAAW,QAAS,CAC5BC,OAAQ,SACRC,QAAS,CACL,eAAgB,mBAChB,cAAiB7V,KAAK8V,YAE1B/U,KAAMiV,KAAKC,UAAU,CAAC/T,W,+BAIrB8H,EAAQwF,EAAQC,GACrB,IAAM/O,EAAQV,KAAK8V,WAEnB,OAAO9V,KAAK2V,WAAW,WAAY,CAC/BC,OAAQ,OACRC,QAAS,CACL,eAAgB,mBAChB,cAAiBnV,GAErBK,KAAMiV,KAAKC,UAAU,CAACjM,SAAQwF,SAAQkH,KAAMjH,Q,oCAKtCzF,EAAQwF,EAAQ1K,GAC1B,OAAO9E,KAAK2V,WAAW,gBAAiB,CACpCC,OAAQ,OACRC,QAAS,CACL,eAAgB,mBAChB,cAAiB7V,KAAK8V,YAE1B/U,KAAMiV,KAAKC,UAAU,CAACjM,SAAQwF,SAAQ1K,a,kCAIlCkF,EAAQiG,EAAWR,GAC3B,OAAOzP,KAAK2V,WAAW,cAAe,CAClCC,OAAQ,OACRC,QAAS,CACL,eAAgB,mBAChB,cAAiB7V,KAAK8V,YAE1B/U,KAAMiV,KAAKC,UAAU,CAACjM,SAAQiG,YAAWyG,KAAMjH,Q,qCA8CxCvN,EAAIuF,EAAYS,GAC3B,OAAOlI,KAAK2V,WAAW,OAAQ,CAC3BC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpB9U,KAAMiV,KAAKC,UAAU,CAAC/T,KAAIuF,aAAYS,a,kCAIlChG,EAAIyU,GACZ,IAAMjW,EAAQV,KAAK8V,WAEnB,OAAO9V,KAAK2V,WAAW,WAAY,CAC/BC,OAAQ,OACRC,QAAS,CACL,eAAgB,mBAChB,cAAiBnV,GAErBK,KAAMiV,KAAKC,UAAU,CAAC/T,KAAIyU,iB,6BAI3B1J,EAAY2J,EAAapK,GAE5B,OADA1M,QAAQC,IAAIkN,EAAY2J,EAAapK,GAC9BxM,KAAK2V,WAAW,SAAU,CAC7BC,OAAQ,OACRC,QAAS,CACL,eAAgB,mBAChB,cAAiB7V,KAAK8V,YAE1B/U,KAAMiV,KAAKC,UAAU,CAAChJ,aAAY2J,cAAapK,oB,qCAIxCxC,GACX,OAAOhK,KAAK2V,WAAW,YAAa,CAChCC,OAAQ,OACRC,QAAS,CACL,eAAgB,mBAChB,cAAiB7V,KAAK8V,YAE1B/U,KAAMiV,KAAKC,UAAU,CAACjM,e,qCAIfA,GACX,OAAOhK,KAAK2V,WAAW,YAAa,CAChCC,OAAQ,OACRC,QAAS,CACL,eAAgB,mBAChB,cAAiB7V,KAAK8V,YAE1B/U,KAAMiV,KAAKC,UAAU,CAACjM,e,iCAInBuJ,GACP,OAAOvT,KAAK2V,WAAW,QAAS,CAC5BC,OAAQ,OACRC,QAAS,CACL,eAAgB,mBAChB,cAAiB7V,KAAK8V,YAE1B/U,KAAMiV,KAAKC,UAAU,CAAC1C,c,+BAIrB7S,GACLV,KAAKU,MAAQA,I,iCAIb,OAAOV,KAAKU,U,KCnPdmW,I,OAAe,CACjBvU,KAAM,KACNrB,MAAM,EACNP,MAAO,KACPwB,GAAI,KACJ2E,UAAW,KACX8D,eAAgB,EAChBC,eAAgB,IA0CLkM,GAvCK,WAAmC,IAAlCtV,EAAiC,uDAAzBqV,GAAcE,EAAW,uCAClD,OAAQA,EAAOzW,MACX,IAAK,mBACL,IAAK,qBACL,IAAK,iBAML,IAAK,mBACD,OAAO,eACAkB,EADP,GAEOuV,EAAO1W,SAGlB,IAAK,uBACD,IAEIgT,EAFE2D,EAAiC,oBAAnBD,EAAO1W,SAAyB0W,EAAO1W,QAS3D,OALIgT,EADA2D,EACYA,EAAKxV,GAELuV,EAAO1W,QAGhB,eACAmB,EADP,GAEO6R,GAGX,IAAK,mBACD,OAAO,eAAIwD,IAEf,QACI,OAAOrV,IC7CbqV,GAAe,CACjBlN,SAAS,EACTxC,SAAU,IAGR8P,GAAgB,SAAC3U,EAAMwC,EAAM5C,EAAI2E,EAAWC,GAA5B,MAAyC,CAACxE,OAAMwC,OAAM5C,KAAI2E,YAAWC,YA8D5EoQ,GA5DS,WAAmC,IAAlC1V,EAAiC,uDAAzBqV,GAAcE,EAAW,uCACtD,OAAQA,EAAOzW,MACX,IAAK,iBACD,MAAO,CACHqJ,SAAS,EACTxC,SAAU,IAGlB,IAAK,yBACD,MAAO,CACHwC,SAAS,EACTxC,SAAU4P,EAAO1W,SAGzB,IAAK,yBACD,MAAO,CACHsJ,SAAS,EACTxC,SAAS,aAAK3F,EAAM2F,WAG5B,IAAK,iBAAmB,IAAD,EACyB4P,EAAO1W,QAA5C6B,EADY,EACZA,GAAI4E,EADQ,EACRA,QAASlC,EADD,EACCA,QADD,IACU+C,YADV,SAGbuF,EAAQ1L,EAAM2F,SAASgG,WAAU,SAAAgK,GAAC,OAAIA,EAAEjV,KAAOA,KACjDkV,EAAe,aAAO5V,EAAM2F,UAEhC,GAAIQ,EAAM,CAEN,IAAIrF,EAAOsC,EAAQtC,KACfwC,EAAOF,EAAQE,KACf+B,EAAYjC,EAAQiC,UAEpBqG,GAAS,IACT5K,EAAO8U,EAAgBlK,GAAO5K,KAC9B8U,EAAkBA,EAAgBjF,QAAO,SAAAgF,GAAC,OAAIA,EAAEjV,KAAOA,MAE3DkV,EAAgBC,QAAQJ,GAAc3U,EAAMwC,EAAM5C,EAAI2E,EAAWC,SAE7DoG,GAAS,IACTkK,EAAgBlK,GAAOpG,QAAUA,GAIzC,OAAO,eACAtF,EADP,CAEI2F,SAAUiQ,IAIlB,IAAK,uBACD,OAAO,eACA5V,EADP,CAEI2F,SAAU4P,EAAO1W,UAGzB,QACI,OAAOmB,IC/DbqV,GAAe,CACjB1P,SAAU,GACVwC,SAAS,EACT9B,QAAQ,EACRC,OAAQ,KACRG,UAAW,IA8CAqP,GA3CK,WAAmC,IAAlC9V,EAAiC,uDAAzBqV,GAAcE,EAAW,uCAClD,OAAQA,EAAOzW,MACX,IAAK,aACD,OAAO,eACAkB,EADP,CAEImI,SAAS,IAGjB,IAAK,qBACD,OAAO,eACAnI,EADP,CAEI2F,SAAU4P,EAAO1W,QAAQ8G,SACzBc,UAAU,eACH8O,EAAO1W,QAAQ4H,WAEtB0B,SAAS,IAGjB,IAAK,qBACD,OAAO,eACAnI,EADP,CAEImI,SAAS,IAGjB,IAAK,qBAAL,MAC4CoN,EAAO1W,QADnD,IACWwH,cADX,aAC2BC,cAD3B,MACoC,KADpC,EAEI,OAAO,eACAtG,EADP,CAEIqG,OAAQA,EACRC,OAAQA,IAGhB,IAAK,mBACD,OAAO,eACAtG,EADP,CAEI2F,SAAS,GAAD,oBAAM3F,EAAM2F,UAAZ,CAAsB4P,EAAO1W,YAG7C,QACI,OAAOmB,ICpCJ+V,GAXQ,WAAwB,IAAvB/V,EAAsB,uDAAd,EAAGuV,EAAW,uCAC1C,OAAQA,EAAOzW,MACX,IAAK,cACD,OAAOkB,EAAQ,EAEnB,QACI,OAAOA,ICOJgW,GAPCC,YAAgB,CAC5B/V,KAAMoV,GACN3P,SAAU+P,GACVxO,KAAM4O,GACNtU,QAASuU,K,8BCPM,IAAI9B,GCGvB,IAAMiC,GAAiBC,eAEjBC,GAAgB3D,OAAO4D,8BAAgC5D,OAAO4D,+BAWrDC,GAJDC,YAAYP,GAASQ,YAAQC,YAAgBC,KAAYR,IALjD,kBAAM,SAACS,GAAD,OAAU,SAACpB,GAEnC,OADAjX,QAAQC,IAAIgX,GACLoB,EAAKpB,QAGuFa,KCEjGnX,GAAa,IAAIgV,GACjB/U,GAAQkB,aAAawW,QAAQ,YAmBnC,SAASC,KACLC,IAAStD,OACL,kBAAC,IAAMuD,WAAP,KACI,kBAAC,IAAD,CAAUT,MAAOA,IACb,kBAACjU,EAAD,CAAoB2B,MAAO/E,IACvB,kBAAC,EAAkBqD,SAAnB,CAA4B0B,MAAO,CAACe,WAAY,oBAC5C,kBAAC,IAAD,KACI,kBAAC,GAAD,WAMpBiS,SAASC,eAAe,SA/BhChY,GAAWqT,SAASpT,IAGpBZ,QAAQC,IAAIuB,gJAAaA,gJAAYoX,oBAGrCtX,EAAOgR,GAAG,WAAW,WACb1R,GACAoX,GAAMnX,SAASH,EAAYC,GAAYC,GAAxBF,IAAkCI,MAAK,SAAAmB,GAClDsW,KACA,IAAMnW,EAAK4V,GAAMa,WAAWjX,KAAKQ,GACjCd,EAAOa,KAAK,YAAa,CAACC,UAG9BmW,QVkGF,kBAAmBO,WACrBA,UAAUC,cAAcC,MACrBlY,MAAK,SAAAmY,GACJA,EAAaC,gBAEd9X,OAAM,SAAA+X,GACLnZ,QAAQmZ,MAAMA,EAAMrU,a","file":"static/js/main.2efe6bb4.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\nclass Cart extends React.Component {\r\n    componentDidMount() {\r\n        console.log(this.props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>cart</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Cart;\r\n","export const actionAuthorize = ({auth, token}) => {\r\n    localStorage.setItem('userData', token);\r\n\r\n    return {type: 'USER_AUTHORIZE', payload: {auth, token}};\r\n};\r\n\r\nexport const actionUnauthorize = () => {\r\n    localStorage.removeItem('userData');\r\n\r\n    return {type: 'USER_UNAUTHORIZE'};\r\n};\r\n\r\nexport const actionGetUserDataSuccess = (payload) => ({type: 'GET_USER_SUCCESS', payload});\r\nexport const actionGetUserDataFailure = () => ({type: 'GET_USER_FAILURE'});\r\nexport const actionGetUserData = () => ({type: 'GET_USER'});\r\nexport const actionUpdateUserData = (payload) => ({type: 'USER_DATA_UPDATE', payload});\r\nexport const actionUpdateUserCounters = (payload) => ({type: 'USER_COUNTERS_UPDATE', payload});\r\n\r\nexport const getUserData = (apiService, token) => () => (dispatch) => {\r\n    dispatch(actionGetUserData());\r\n\r\n    return apiService.getUserData().then(response => {\r\n        const res = response.body.data;\r\n\r\n        const data = {\r\n            auth: true,\r\n            token,\r\n            ...res\r\n        };\r\n\r\n        return dispatch(actionGetUserDataSuccess(data));\r\n    }).catch(err => {\r\n        // console.log(err);\r\n        dispatch(actionGetUserDataFailure());\r\n    })\r\n};\r\n\r\nexport const auth = (isAuth) => ({type: 'AUTH', payload: isAuth});\r\n","import openSocket from 'socket.io-client';\r\nconst socket = openSocket(`http://localhost:${process.env.REACT_APP_SOCKET_PORT}`);\r\n\r\nexport default socket;\r\n","import React from 'react'\r\nimport {Link, NavLink} from 'react-router-dom'\r\nimport {connect} from 'react-redux'\r\nimport {actionUnauthorize} from \"../../store/actions\";\r\nimport './style.css'\r\n\r\nimport socket from \"../../socket\";\r\n\r\nconst Header = ({isAuthenticated, actionUnauthorize, user}) => {\r\n    const logout = (e) => {\r\n        e.preventDefault();\r\n        socket.emit('leaveRoom', {id: user.id});\r\n        actionUnauthorize();\r\n    };\r\n\r\n    const renderRight = () => {\r\n        if (isAuthenticated) {\r\n            return (\r\n                <ul className=\"navbar-nav ml-3 right\">\r\n                    <li className=\"nav-item\">\r\n                        <NavLink onClick={logout} activeClassName='active' className=\"nav-link ml-auto\" to=\"/logout\">Logout</NavLink>\r\n                    </li>\r\n                </ul>\r\n            )\r\n        } else {\r\n            return (\r\n                <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\r\n                    <li className=\"nav-item\">\r\n                        <NavLink activeClassName='active' className=\"nav-link ml-auto\" to=\"/login\">Login</NavLink>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <NavLink activeClassName='active' className=\"nav-link ml-2\" to=\"/register\">Sign up</NavLink>\r\n                    </li>\r\n                </ul>\r\n            )\r\n        }\r\n    };\r\n\r\n    const items = [\r\n        {exact: true, to: '/', name: 'Home', isAuth: false},\r\n        {exact: true, to: '/me', name: 'Me', isAuth: true},\r\n        {exact: true, to: '/followers', name: 'Followers', isAuth: true},\r\n        {exact: true, to: '/following', name: 'Following', isAuth: true},\r\n        // {exact: false, to: '/store', name: 'Store', isAuth: false},\r\n        {exact: false, to: '/messages/', name: 'Messages', isAuth: true},\r\n        {exact: true, to: '/search', name: 'Search', isAuth: true},\r\n    ];\r\n\r\n    return (\r\n        <header className=\"header\">\r\n            <nav>\r\n                <div className=\"nav-wrapper\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col s12\">\r\n                                <Link className=\"navbar-brand left\" to=\"/\">Art's Store</Link>\r\n                                <ul id=\"nav-mobile\" className=\"left hide-on-med-and-down\">\r\n                                    {\r\n                                        items.map((link, idx) => {\r\n                                            if ((!isAuthenticated && link.isAuth) || (isAuthenticated && !link.isAuth)) {\r\n                                                return null;\r\n                                            }\r\n\r\n                                            return (\r\n                                                <li key={idx} className=\"nav-item\">\r\n                                                    <NavLink activeClassName='active' className=\"nav-link\" exact={link.exact} to={link.to}>{link.name}</NavLink>\r\n                                                </li>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </ul>\r\n                                { renderRight() }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </header>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isAuthenticated: state.user.auth,\r\n        user: state.user\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        actionUnauthorize: () => dispatch(actionUnauthorize())\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header)\r\n","import React, {useCallback, useEffect, useState} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nconst Home = ({user}) => {\r\n    const greeting = user.auth ? <p>Hello, <b>{user.name}</b></p> : <p>Hello, Guest!</p>;\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h4 className=\"mb-3\">Home page</h4>\r\n            {greeting}\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n      return {\r\n          user: state.user\r\n      }\r\n};\r\n\r\nexport default connect(mapStateToProps)(Home)\r\n","import React, {useEffect, useState} from 'react'\r\nimport {connect, useSelector} from 'react-redux'\r\n\r\nconst Store = (props) => {\r\n    const {dispatch} = props;\r\n\r\n    const [counter, setCounter] = useState(1);\r\n    const reduxCounter = useSelector(state => state.counter); // counters\r\n    const [cc, setCC] = useState(reduxCounter) // initial\r\n\r\n    useEffect(() => {\r\n       setInterval(() => {\r\n           console.log(counter, reduxCounter, cc);\r\n           counterAdd();\r\n       }, 3000)\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setCC(reduxCounter)\r\n    }, [reduxCounter]);\r\n\r\n    const counterAdd = () => {\r\n        console.log(cc);\r\n        dispatch({type: 'COUNTER_ADD'})\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h3>Store page</h3>\r\n            <div>\r\n                <span>Redux counter: {reduxCounter} {cc}</span>\r\n            </div>\r\n            { counter }\r\n            <button onClick={() => setCounter(counter + 1)}>click</button>\r\n            <button onClick={() => dispatch({type: 'COUNTER_ADD'})}>redux click</button>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default connect()(Store);\r\n","import React from \"react\"\r\nimport {Route, Redirect} from 'react-router-dom'\r\nimport {connect} from 'react-redux'\r\n\r\nconst PrivateRoute = ({component: ChildComponent, auth, ...rest}) => {\r\n    return (\r\n        <Route>\r\n            { auth ? <ChildComponent {...rest} /> : <Redirect to=\"/login\" />}\r\n        </Route>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        auth: state.user.auth\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute);\r\n","import React from \"react\";\r\n\r\nconst {\r\n    Provider: ApiServiceProvider,\r\n    Consumer: ApiServiceConsumer\r\n} = React.createContext();\r\n\r\nexport {\r\n    ApiServiceProvider,\r\n    ApiServiceConsumer\r\n}\r\n","import React from \"react\";\r\nimport {ApiServiceConsumer} from \"../context/apiService\";\r\n\r\nconst withApiService = (Wrapped) => {\r\n    return (props) => {\r\n        return <ApiServiceConsumer>\r\n            {\r\n                (apiService) => {\r\n                    return <Wrapped {...props} apiService={apiService}/>\r\n                }\r\n            }\r\n        </ApiServiceConsumer>\r\n    }\r\n};\r\n\r\nexport default withApiService;\r\n","import React from \"react\";\r\nimport {Redirect} from 'react-router-dom'\r\nimport {useSelector} from \"react-redux\";\r\n\r\nconst withoutOwner = (Wrapped) => {\r\n    return (props) => {\r\n        const user = useSelector(state => state.user);\r\n        const pageId = props.computedMatch.params.id;\r\n\r\n        if (pageId && user.id.toString() === pageId.toString()) {\r\n            return <Redirect to=\"/me\" />\r\n        }\r\n\r\n        return <Wrapped {...props}/>\r\n    }\r\n};\r\n\r\nexport default withoutOwner\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {withApiService} from '../hoc';\r\nimport {actionAuthorize, getUserData} from \"../../store/actions\";\r\n\r\nimport socket from \"../../socket\";\r\n\r\nclass Login extends React.Component {\r\n    state = {\r\n        form: {\r\n            email: '',\r\n            password: ''\r\n        },\r\n        message: {\r\n            color: 'red',\r\n            text: ''\r\n        }\r\n    };\r\n\r\n    login = (e) => {\r\n        e.preventDefault();\r\n        const {apiService, actionAuthorize, actionGetUserData} = this.props;\r\n        apiService.login(this.state.form).then(response => {\r\n            const res = response.body;\r\n\r\n            if (res.errors) {\r\n                this.setState({\r\n                    message: {color: 'red', text: res.message}\r\n                });\r\n            } else {\r\n                const token = res.token;\r\n                if (token) {\r\n                    actionAuthorize({auth: true, token});\r\n                    actionGetUserData(token).then((e) => {\r\n                        socket.emit('connected', {id: e.payload.id});\r\n                        this.props.history.push('/me');\r\n                    });\r\n                }\r\n            }\r\n        }).catch(e => {\r\n\r\n        })\r\n    };\r\n\r\n    onInputChange = (e) => {\r\n        this.setState({\r\n            form: {\r\n                ...this.state.form,\r\n                [e.target.name]: e.target.value\r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const {message} = this.state;\r\n\r\n        const feedback = message.text ? (\r\n            <div className=\"form-feedback\">\r\n                {message.text}\r\n            </div>\r\n        ) : null;\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"signup\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col s4 offset-s4 center\">\r\n                            <form className=\"form\" onSubmit={this.login}>\r\n                                <div className=\"form__title\">\r\n                                    Login\r\n                                </div>\r\n                                <div className=\"form__body\">\r\n                                    <div className=\"form-group\">\r\n                                        <input type=\"text\" onChange={this.onInputChange} name=\"email\" className=\"form-control\" placeholder=\"Email\" />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <input type=\"password\" onChange={this.onInputChange} name=\"password\" className=\"form-control\" placeholder=\"Password\" />\r\n                                    </div>\r\n                                </div>\r\n                                {feedback}\r\n                                <button type=\"submit\" className=\"btn btn-primary\">Sign in</button>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/*<div className=\"row\">*/}\r\n                {/*    <div className=\"col-4\">*/}\r\n                {/*        <div className=\"mb-4\">Login</div>*/}\r\n                {/*        <form onSubmit={this.login}>*/}\r\n                {/*            <div className=\"mb-3\">*/}\r\n                {/*                <div className=\"form-group\">*/}\r\n                {/*                    <input type=\"text\" onChange={this.onInputChange} name=\"email\" className=\"form-control\" placeholder=\"Email\" />*/}\r\n                {/*                </div>*/}\r\n                {/*                <div className=\"form-group\">*/}\r\n                {/*                    <input type=\"password\" onChange={this.onInputChange} name=\"password\" className=\"form-control\" placeholder=\"Password\" />*/}\r\n                {/*                </div>*/}\r\n                {/*            </div>*/}\r\n                {/*            {feedback}*/}\r\n                {/*            <button type=\"submit\" className=\"btn btn-primary\">Sign in</button>*/}\r\n                {/*        </form>*/}\r\n                {/*    </div>*/}\r\n                {/*</div>*/}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        token: state.user.token\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, {apiService, token}) => {\r\n    return {\r\n        actionGetUserData: (token) => dispatch(getUserData(apiService, token)()),\r\n        actionAuthorize: (payload) => dispatch(actionAuthorize(payload))\r\n    }\r\n};\r\n\r\nexport default withApiService(connect(mapStateToProps, mapDispatchToProps)(Login));\r\n","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {withApiService} from '../hoc'\r\nimport cn from 'classnames'\r\n\r\nimport './style.css'\r\n\r\nclass Register extends React.Component {\r\n    state = {\r\n        form: {\r\n            name: '',\r\n            email: '',\r\n            password: ''\r\n        },\r\n        message: {\r\n            ok: false,\r\n            text: ''\r\n        }\r\n    };\r\n\r\n    register = (e) => {\r\n        e.preventDefault();\r\n        const {apiService} = this.props;\r\n        apiService.register(this.state.form).then(response => {\r\n            const res = response.body;\r\n\r\n            if (res.errors) {\r\n                this.setState({\r\n                    message: {ok: false, text: res.message}\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    message: {ok: true, text: res.message},\r\n                    form: {name: '', email: '', password: ''}\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            // console.log(e);\r\n        })\r\n    };\r\n\r\n    onInputChange = (e) => {\r\n        this.setState({\r\n            form: {\r\n                ...this.state.form,\r\n                [e.target.name]: e.target.value\r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const {message} = this.state;\r\n\r\n        const feedbackClasses = cn({\r\n            'form-feedback': true,\r\n            'good': this.state.message.ok\r\n        });\r\n\r\n        const feedback = message.text ? (\r\n            <div className={feedbackClasses}>\r\n                {message.text}\r\n            </div>\r\n        ) : null;\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"signup\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col s4 offset-s4 center\">\r\n                            <form className=\"form\" onSubmit={this.register}>\r\n                                <div className=\"form__title\">\r\n                                    Sign up\r\n                                </div>\r\n                                <div className=\"form__body\">\r\n                                    <div className=\"form-group\">\r\n                                        <input type=\"text\" onChange={this.onInputChange} name=\"name\" className=\"form-control\" placeholder=\"Name\" value={this.state.form.name} />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <input type=\"text\" onChange={this.onInputChange} name=\"email\" className=\"form-control\" placeholder=\"Email\" value={this.state.form.email} />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <input type=\"password\" onChange={this.onInputChange} name=\"password\" className=\"form-control\" placeholder=\"Password\" value={this.state.form.password} />\r\n                                    </div>\r\n                                </div>\r\n                                {feedback}\r\n                                <button type=\"submit\" className=\"btn btn-primary\">Sign up</button>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {}\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        checkAuth: () => {}\r\n    }\r\n};\r\n\r\nexport default withApiService(connect(mapStateToProps, mapDispatchToProps)(Register));\r\n","import React from \"react\";\r\n\r\nexport default React.createContext();\r\n","import React, {useContext} from \"react\";\r\nimport {withRouter} from 'react-router-dom'\r\nimport VariableProvider from \"../context/vars\";\r\n\r\nconst MessagesList = (props) => {\r\n    const {messagesList, openChat} = props;\r\n\r\n    const {publicPath} = useContext(VariableProvider);\r\n\r\n    return (\r\n        <ul className=\"collection with-header\">\r\n            {messagesList.map((item, idx) => {\r\n                return (\r\n                    <li key={idx} className=\"collection-item\">\r\n                        <div className=\"message-item\">\r\n                            <div className=\"message-item__content\">\r\n                                <div className=\"message-item__avatar\">\r\n                                    <div style={{backgroundImage: `url(${publicPath}${item.avatarUrl})`}} className=\"message-item__avatar-icon\">\r\n\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"message-item__info\">\r\n                                    <div className=\"message-item__name\"><strong>{item.name}</strong></div>\r\n                                    <div className=\"message-item__text\">{item.text}</div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"message-item__actions\">\r\n                                {item.updated ? (\r\n                                    <div className=\"message-item__action\">\r\n                                        <button onClick={() => openChat(item.id)} className=\"btn btn-outline btn-danger btn-sm\">\r\n                                            <i className=\"fa fa-envelope-open\" />\r\n                                        </button>\r\n                                    </div>\r\n                                ) : null}\r\n                                <div className=\"message-item__action\">\r\n                                    <button onClick={() => openChat(item.id)} className=\"btn btn-outline btn-success btn-sm\">\r\n                                        <i className=\"fa fa-weixin\" />\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </li>\r\n                )\r\n            })}\r\n        </ul>\r\n    )\r\n};\r\n\r\nexport default withRouter(MessagesList)\r\n\r\n","import React from \"react\";\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <div className=\"preloader-wrapper big active\">\r\n            <div className=\"spinner-layer spinner-blue-only\">\r\n                <div className=\"circle-clipper left\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n                <div className=\"gap-patch\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n                <div className=\"circle-clipper right\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Spinner;\r\n","export const fetchMessagesRequest = (payload) => ({type: 'FETCH_MESSAGES', payload});\r\nexport const fetchMessagesSuccess = (payload) => ({type: 'FETCH_MESSAGES_SUCCESS', payload});\r\nexport const fetchMessagesFailure = () => ({type: 'FETCH_MESSAGES_FAILURE'});\r\n\r\nexport const actionFetchMessages = (apiService) => (id) => (dispatch) => {\r\n    dispatch(fetchMessagesRequest());\r\n\r\n    apiService.getListMessages(id).then(res => {\r\n        dispatch(fetchMessagesSuccess(res.body.messages));\r\n    }).catch(e => {\r\n        dispatch(fetchMessagesFailure());\r\n    })\r\n};\r\n\r\nexport const updateMessageInList = (payload) => ({type: 'MESSAGE_UPDATE', payload});\r\nexport const updateMessagesList = (list) => ({type: 'MESSAGES_LIST_UPDATE', payload: list});\r\nexport const sortMessagesList = ({id}) => ({type: 'MESSAGES_LIST_SORT', payload: id});\r\n","import {updateMessageInList} from \"./messageActions\";\r\n\r\nexport const fetchChatMessagesRequest = () => ({type: 'FETCH_CHAT'});\r\nexport const fetchChatSuccess = (payload) => ({type: 'FETCH_CHAT_SUCCESS', payload});\r\nexport const fetchChatFailure = () => ({type: 'FETCH_CHAT_FAILURE'});\r\nexport const fetchChat = (apiService) => (id, receiverId) => (dispatch) => {\r\n    dispatch(fetchChatMessagesRequest());\r\n\r\n    return apiService.getChatMessages(id, receiverId).then(res => {\r\n        dispatch(fetchChatSuccess(res.body));\r\n        dispatch(updateMessageInList({id: receiverId, updated: false, sort: false}));\r\n    }).catch(e => {\r\n        dispatch(fetchChatFailure());\r\n    })\r\n};\r\n\r\nexport const actionUpdateChatStatus = ({inChat, chatId}) => ({type: 'CHAT_STATUS_UPDATE', payload: {inChat, chatId}});\r\nexport const addChatMessage = ({name, text}) => ({type: 'CHAT_MESSAGE_ADD', payload: {name, text}});\r\n\r\nexport const actionSendMessage = (apiService) => (companion, user, message, date) => (dispatch) => {\r\n    const receiverId = companion.id;\r\n    return apiService.sendMessage(receiverId, user.id, message, companion, date);\r\n};\r\n","import React, {useEffect, useRef, useState} from \"react\";\r\nimport Spinner from \"../spinner\";\r\nimport {connect, useSelector} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {fetchChat, actionUpdateChatStatus, actionSendMessage, addChatMessage} from \"../../store/actions/chatActions\";\r\nimport {withApiService} from \"../hoc\";\r\n\r\nimport socket from \"../../socket\";\r\n\r\nconst Chat = (props) => {\r\n    const {backToMessages, chatLoading, user,\r\n        companionId, fetchChat, actionUpdateChatStatus, actionSendMessage} = props;\r\n\r\n    const [message, setMessage] = useState('');\r\n    const chatMessages = useSelector(state => state.chat.messages);\r\n    const companion = useSelector(state => state.chat.companion);\r\n    const listContainer = useRef(null);\r\n\r\n    useEffect(() => {\r\n        actionUpdateChatStatus({inChat: true, chatId: companionId});\r\n        fetchChat(user.id, companionId);\r\n\r\n        return () => {\r\n            actionUpdateChatStatus({inChat: false, chatId: null});\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (listContainer.current) {\r\n            listContainer.current.scrollTop = listContainer.current.scrollHeight;\r\n        }\r\n    }, [chatMessages]);\r\n\r\n    const sendMessage = (text, companion) => {\r\n        const newMessage = {\r\n            name: user.name,\r\n            text,\r\n            avatarUrl: user.avatarUrl\r\n        };\r\n        const date = Date.now();\r\n        actionSendMessage(companion, user, newMessage, date)\r\n            .then(e => {\r\n                socket.emit('sendMessage', {toId: companionId, fromId: user.id, companion, date, message: newMessage});\r\n            })\r\n            .catch(e => {});\r\n    };\r\n\r\n    const submitForm = (e) => {\r\n        e.preventDefault();\r\n        const companionData = {\r\n            id: companionId,\r\n            name: companion.name,\r\n            avatarUrl: companion.avatarUrl\r\n        };\r\n        sendMessage(message, companionData);\r\n        setMessage('');\r\n    };\r\n\r\n    const renderList = () => {\r\n        return (\r\n            <div ref={listContainer} className=\"chat__list\">\r\n                { chatMessages.map((msg, idx) => {\r\n                    return (\r\n                        <div key={idx} className=\"chat__item\">\r\n                            <strong>{msg.name}</strong>: {msg.text}\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat\">\r\n            <div className=\"chat__back\">\r\n                <button onClick={backToMessages} className=\"btn btn-primary\">Back</button>\r\n            </div>\r\n            <div className=\"chat__block\">\r\n                <div className=\"chat__left\">\r\n                    { chatLoading ? <Spinner /> : renderList() }\r\n                    <div className=\"chat__control\">\r\n                        <form onSubmit={submitForm} className=\"chat-control\">\r\n                            <div className=\"chat-control__left\">\r\n                                <input onChange={(e) => setMessage(e.target.value)} type=\"text\" className=\"form-control\" value={message} />\r\n                            </div>\r\n                            <div className=\"chat-control__right\">\r\n                                <button className=\"btn btn-success\">Send</button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n                <div className=\"chat__right\">\r\n                    <div className=\"chat__companion\">\r\n                        {(companion.name || !chatLoading) || <Spinner /> }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state.user\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, {apiService}) => {\r\n    return bindActionCreators({\r\n        fetchChat: fetchChat(apiService),\r\n        actionUpdateChatStatus,\r\n        addChatMessage,\r\n        actionSendMessage: actionSendMessage(apiService)\r\n    }, dispatch);\r\n};\r\n\r\nexport default withApiService(connect(mapStateToProps, mapDispatchToProps)(Chat))\r\n","import React, {useEffect, useState} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {withApiService} from '../hoc'\r\nimport MessagesList from './MessagesList';\r\nimport Chat from \"./Chat\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nimport './style.css'\r\nimport {actionFetchMessages, updateMessagesList} from \"../../store/actions/messageActions\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport Spinner from \"../spinner\";\r\n\r\nconst Messages = (props) => {\r\n    const {user, actionFetchMessages, queryChatId} = props;\r\n\r\n    let showChat = false;\r\n    if (queryChatId) {\r\n        showChat = true;\r\n    }\r\n\r\n    const [chat, setChat] = useState(showChat);\r\n    const chatLoading = useSelector((state) => state.chat.loading);\r\n    const messagesLoading = useSelector((state) => state.messages.loading);\r\n    const messagesList = useSelector((state) => state.messages.messages);\r\n\r\n    useEffect(() => {\r\n        actionFetchMessages(user.id);\r\n    }, []);\r\n\r\n    const openChat = (receiverId) => {\r\n        setChat({show: true, receiverId});\r\n        props.history.push(`?chat=${receiverId}`);\r\n    };\r\n\r\n    const backToMessages = () => {\r\n        props.history.push(`./`);\r\n        setChat(false);\r\n    };\r\n\r\n    const currentContent = !chat ?\r\n        <MessagesList\r\n            openChat={(id) => openChat(id)}\r\n            messagesList={messagesList}\r\n        />\r\n        : <Chat\r\n            backToMessages={backToMessages}\r\n            companionId={queryChatId}\r\n            chatLoading={chatLoading}\r\n        />;\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"messages\">\r\n                { messagesLoading ? <Spinner/> : (\r\n                    <div className=\"messages__left\">\r\n                        {currentContent}\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state.user,\r\n        messages: state.messages\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, {apiService}) => {\r\n    return bindActionCreators({\r\n        actionFetchMessages: actionFetchMessages(apiService),\r\n        updateMessagesList\r\n    }, dispatch);\r\n};\r\n\r\nexport default withApiService(connect(mapStateToProps, mapDispatchToProps)(withRouter(Messages)))\r\n","import React from 'react'\r\nimport queryString  from 'query-string'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\nimport Messages from './messages'\r\nimport {useSelector} from \"react-redux\";\r\n\r\nconst Wrapper = (props) => {\r\n    const userId = useSelector(state => state.user.id);\r\n    const queryParams = queryString.parse(props.location.search);\r\n\r\n    let queryChatId = queryParams.chat;\r\n\r\n    if (queryChatId) {\r\n        if (queryChatId.toString() === userId.toString()) {\r\n            return <Redirect to=\"/me\" />\r\n        }\r\n    }\r\n\r\n    return <Messages queryChatId={queryChatId} />\r\n};\r\n\r\nexport default Wrapper\r\n","import React, {useContext, useEffect, useRef, useState} from 'react'\r\nimport {connect, useSelector} from \"react-redux\";\r\nimport cn from \"classnames\";\r\n\r\nimport {withApiService} from '../hoc';\r\n\r\nimport VariableProvider from '../context/vars'\r\nimport {bindActionCreators} from \"redux\";\r\nimport {actionUpdateUserData} from \"../../store/actions\";\r\n\r\nconst ProfileMain = (props) => {\r\n    const {\r\n        userName,\r\n        profileCounters,\r\n        isOwner,\r\n        avatarUrl,\r\n        backgroundUrl,\r\n        apiService,\r\n        actionUpdateUserData\r\n    } = props;\r\n\r\n    const {\r\n        postsCount = 0,\r\n        imagesCount = 0,\r\n        followingCount = 0,\r\n        followersCount = 0,\r\n    } = profileCounters;\r\n\r\n    const {publicPath} = useContext(VariableProvider);\r\n\r\n    const avatarFileInput = useRef(null);\r\n    const bgFileInput = useRef(null);\r\n    // const user = useSelector(state => state.user);\r\n\r\n    const [avatarFormActive, setAvatarFormStatus] = useState(false);\r\n    const [avatarPreviewImage, setAvatarPreviewImage] = useState(null);\r\n    const [bgPreview, setBgPreview] = useState(null);\r\n\r\n    const avatarClasses = cn({\r\n        'avatar-form': true,\r\n        'active': avatarFormActive\r\n    });\r\n\r\n    const uploadAvatar = (e) => {\r\n        e.preventDefault();\r\n\r\n        const data = new FormData();\r\n        data.append('avatar', avatarFileInput.current.files[0]);\r\n        // data.append('id', user.id);\r\n\r\n        apiService.uploadAvatar(data).then(e => {\r\n            resetAvatarForm();\r\n            actionUpdateUserData({\r\n                avatarUrl: e.body.avatarUrl\r\n            });\r\n        }).catch(e => {\r\n\r\n        })\r\n    };\r\n\r\n    const onFileUpload = (e) => {\r\n        const file = e.target.files[0];\r\n        if (file) {\r\n            setAvatarFormStatus(true);\r\n\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file);\r\n\r\n            reader.onloadend = function () {\r\n                const previewImage = reader.result;\r\n                setAvatarPreviewImage(previewImage);\r\n            };\r\n\r\n        } else {\r\n            setAvatarFormStatus(false);\r\n        }\r\n    };\r\n\r\n    const resetAvatarForm = () => {\r\n        setAvatarFormStatus(false);\r\n        avatarFileInput.current.value = null;\r\n    };\r\n\r\n    const resetBgForm = () => {\r\n        setBgPreview('');\r\n        bgFileInput.current.value = null;\r\n    };\r\n\r\n    const onUploadBackground = (e) => {\r\n        const file = e.target.files[0];\r\n\r\n        if (file) {\r\n            // setAvatarFormStatus(true);\r\n\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file);\r\n\r\n            reader.onloadend = function () {\r\n                const previewImage = reader.result;\r\n                setBgPreview(previewImage);\r\n            };\r\n\r\n        } else {\r\n            resetBgForm();\r\n        }\r\n    };\r\n\r\n    const onUploadBgClick = () => {\r\n        bgFileInput.current.click();\r\n    };\r\n\r\n    const updateBackground = (e) => {\r\n        e.preventDefault();\r\n\r\n        const data = new FormData();\r\n        data.append('background', bgFileInput.current.files[0]);\r\n\r\n        apiService.uploadBackground(data).then(e => {\r\n            resetBgForm();\r\n            actionUpdateUserData({\r\n                backgroundUrl: e.body.backgroundUrl\r\n            });\r\n        }).catch(e => {\r\n\r\n        })\r\n    };\r\n\r\n    const profileClasses = cn({\r\n        'profile-main': true,\r\n        'upload-bg': !!bgPreview\r\n    });\r\n\r\n    return (\r\n        <div className={profileClasses}>\r\n            <div className=\"profile-main__update-bg\">\r\n                <div className=\"update-bg\">\r\n                    <input onChange={onUploadBackground} ref={bgFileInput} type=\"file\"/>\r\n                    {\r\n                        bgPreview ? (\r\n                            <>\r\n                                <div onClick={updateBackground} className=\"btn update-bg__action\">Update</div>\r\n                                <div onClick={resetBgForm} className=\"btn btn-danger update-bg__action\">Cancel</div>\r\n                            </>\r\n                        ) : <div onClick={onUploadBgClick} className=\"btn update-bg__action\">Upload</div>\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className='profile-main__background'>\r\n                <div className='profile-main__background-current' style={{backgroundImage: `url(${publicPath}${backgroundUrl})`}}>\r\n                </div>\r\n                <div className='profile-main__background-new' style={{backgroundImage: `url(${bgPreview})`}}>\r\n                </div>\r\n            </div>\r\n            <div className=\"profile-main__info\">\r\n                <div className=\"profile-info\">\r\n                    <div className=\"profile-info__top\">\r\n                        <div className=\"container\">\r\n                            <div className=\"profile-info__avatar\">\r\n                                <div className=\"profile-info__avatar-image\" style={{backgroundImage: `url(${publicPath}${avatarUrl})`}}>\r\n                                    {\r\n                                        isOwner ? (\r\n                                            <div className=\"profile-info__form\">\r\n                                                <form onSubmit={uploadAvatar} className={avatarClasses}>\r\n                                                    <label className=\"avatar-form__label\">\r\n                                                        Upload a new photo\r\n                                                        <input ref={avatarFileInput} onChange={onFileUpload} type=\"file\"/>\r\n                                                    </label>\r\n                                                    <div className=\"avatar-form__content\">\r\n                                                        <div className=\"avatar-form__preview\" style={{backgroundImage: `url(${avatarPreviewImage})`}}>\r\n\r\n                                                        </div>\r\n                                                        <div className=\"avatar-form__actions\">\r\n                                                            <div className=\"avatar-form__apply\">\r\n                                                                <button type=\"submit\" className=\"btn\">Apply</button>\r\n                                                            </div>\r\n                                                            <div className=\"avatar-form__cancel\">\r\n                                                                <div onClick={resetAvatarForm} className=\"btn btn-danger\">Cancel</div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </form>\r\n                                            </div>\r\n                                        ) : null\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"profile-info__list\">\r\n                                <div className=\"profile-info__item\">\r\n                                    <div className=\"profile-info__value\">\r\n                                        {followersCount}\r\n                                    </div>\r\n                                    <div className=\"profile-info__key\">\r\n                                        Followers\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"profile-info__item\">\r\n                                    <div className=\"profile-info__value\">\r\n                                        {followingCount}\r\n                                    </div>\r\n                                    <div className=\"profile-info__key\">\r\n                                        Following\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"profile-info__item\">\r\n                                    <div className=\"profile-info__value\">\r\n                                        {imagesCount}\r\n                                    </div>\r\n                                    <div className=\"profile-info__key\">\r\n                                        Photos\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"profile-info__item\">\r\n                                    <div className=\"profile-info__value\">\r\n                                        {postsCount}\r\n                                    </div>\r\n                                    <div className=\"profile-info__key\">\r\n                                        Posts\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"profile-info__bottom\">\r\n                        <div className=\"container\">\r\n                            <div className=\"profile-main__name\">\r\n                                {userName}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {}\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({\r\n        actionUpdateUserData\r\n    }, dispatch)\r\n};\r\n\r\nexport default withApiService(connect(mapStateToProps, mapDispatchToProps)(ProfileMain))\r\n","import {NavLink} from \"react-router-dom\"\r\nimport React, {useContext} from \"react\"\r\n\r\nimport VariableProvider from '../context/vars'\r\nimport {withApiService} from '../hoc'\r\n\r\nimport './style.css'\r\nimport {bindActionCreators} from \"redux\"\r\nimport {actionUpdateUserData} from \"../../store/actions\"\r\nimport {connect} from \"react-redux\"\r\nimport socket from \"../../socket\";\r\n\r\nconst UserCard = (props) => {\r\n    const {\r\n        _cardId,\r\n        _id,\r\n        name,\r\n        followersCount,\r\n        followingCount,\r\n        postsCount,\r\n        avatarUrl,\r\n        isFollowing,\r\n        apiService,\r\n        actionUpdateUserData,\r\n        updateUser\r\n    } = props;\r\n\r\n    const {publicPath} = useContext(VariableProvider);\r\n\r\n    const follow = (cardId) => {\r\n        apiService.follow(_id, cardId, isFollowing).then(res => {\r\n            if (res.body.ok) {\r\n                const { isFollowing, client, user: {followingCount, followersCount} } = res.body;\r\n\r\n                updateUser(cardId, {\r\n                    isFollowing,\r\n                    followingCount,\r\n                    followersCount\r\n                });\r\n\r\n                actionUpdateUserData({\r\n                    followingCount: client.followingCount,\r\n                    followersCount: client.followersCount\r\n                });\r\n                socket.emit('follow', {toId: cardId, isFollowing});\r\n            }\r\n        }).catch(e => {\r\n            console.log(e);\r\n        })\r\n    };\r\n\r\n    return (\r\n        <div className=\"user-card\">\r\n            <div className=\"user-card__body\">\r\n                <div className=\"user-card__head\">\r\n                    <div className=\"user-card__image\" style={{backgroundImage: `url(${publicPath}${avatarUrl})`}}>\r\n\r\n                    </div>\r\n                </div>\r\n                <div className=\"user-card__name\">\r\n                    {name}\r\n                </div>\r\n            </div>\r\n            <div className=\"user-card__actions\">\r\n                {\r\n                    _id !== _cardId ? (\r\n                        <div onClick={() => follow(_cardId)} className=\"user-card__action link-yellow\">\r\n                            {\r\n                                isFollowing ? 'Unfollow' : 'Follow'\r\n                            }\r\n                        </div>\r\n                    ) : null\r\n                }\r\n                <NavLink className=\"user-card__action link-yellow\" to={`/user/${_cardId}`}>Page</NavLink>\r\n                {\r\n                    _id !== _cardId ? (\r\n                        <NavLink className=\"user-card__action link-yellow\" to={`/messages/?chat=${_cardId}`}>Message</NavLink>\r\n                    ) : null\r\n                }\r\n            </div>\r\n            <div className=\"user-card__info\">\r\n                <div className=\"user-card__info-item\">\r\n                    <div className=\"user-card__info-key\">\r\n                        {postsCount}\r\n                    </div>\r\n                    <div className=\"user-card__info-value\">\r\n                        Posts\r\n                    </div>\r\n                </div>\r\n                <div className=\"user-card__info-item\">\r\n                    <div className=\"user-card__info-key\">\r\n                        {followersCount}\r\n                    </div>\r\n                    <div className=\"user-card__info-value\">\r\n                        Followers\r\n                    </div>\r\n                </div>\r\n                <div className=\"user-card__info-item\">\r\n                    <div className=\"user-card__info-key\">\r\n                        {followingCount}\r\n                    </div>\r\n                    <div className=\"user-card__info-value\">\r\n                        Following\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {}\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({\r\n        actionUpdateUserData\r\n    }, dispatch)\r\n};\r\n\r\nexport default withApiService(connect(mapStateToProps, mapDispatchToProps)(UserCard))\r\n","import React, {useEffect, useState} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {useSelector} from \"react-redux\";\r\nimport {withApiService} from '../hoc';\r\nimport UserCard from \"../card\";\r\nimport Spinner from \"../spinner\";\r\n\r\nimport './style.css'\r\n\r\nconst Users = (props) => {\r\n    const {fetchFunc} = props;\r\n    const user = useSelector(state => state.user);\r\n    const {id} = user;\r\n    const [users, setUsers] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const fetchUsers = () => {\r\n        setLoading(true);\r\n\r\n        fetchFunc(user.id).then(res => {\r\n            setUsers(res.body.users);\r\n            setLoading(false);\r\n        }).catch((e) => {\r\n\r\n        })\r\n    };\r\n\r\n    const updateUser = (followerId, params) => {\r\n        setUsers((state) => {\r\n            const index = state.findIndex((item) => item._id === followerId);\r\n            const newItem = {\r\n                ...state[index],\r\n                ...params\r\n            };\r\n\r\n            return [...state.slice(0, index), newItem, ...state.slice(index + 1)];\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchUsers();\r\n    } ,[fetchFunc]);\r\n\r\n    return (\r\n        <div className=\"users\">\r\n            {\r\n                loading ? (\r\n                    <Spinner/>\r\n                ) : (\r\n                    <div className=\"users__list\">\r\n                        {\r\n                            users.map(f => {\r\n                                return (\r\n                                    <div key={f._id} className=\"users__item\">\r\n                                        <UserCard\r\n                                            name={f.name}\r\n                                            followersCount={f.followersCount}\r\n                                            followingCount={f.followingCount}\r\n                                            postsCount={f.postsCount}\r\n                                            avatarUrl={f.avatarUrl}\r\n                                            _id={id}\r\n                                            _cardId={f._id}\r\n                                            isFollowing={f.isFollowing}\r\n                                            updateUser={updateUser}\r\n                                        />\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default withApiService(connect()(Users));\r\n","import React, {useCallback, useEffect, useState} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport ProfileMain from \"../user/profile-main\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {withApiService} from '../hoc';\r\nimport Users from '../users';\r\n\r\nconst Followers = (props) => {\r\n    const {apiService} = props;\r\n    const user = useSelector(state => state.user);\r\n\r\n    const {followersCount, followingCount, imagesCount, postsCount, avatarUrl, backgroundUrl, name, id} = user;\r\n\r\n    const profileCounters = {\r\n        followersCount, followingCount, imagesCount, postsCount\r\n    };\r\n\r\n    const fetchFunc = useCallback((...args) => {\r\n        return apiService.fetchFollowers(...args);\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"profile\">\r\n            <div className=\"profile__top\">\r\n                <ProfileMain\r\n                    profileCounters={profileCounters}\r\n                    avatarUrl={avatarUrl}\r\n                    backgroundUrl={backgroundUrl}\r\n                    userName={name}\r\n                    isOwner={true}\r\n                />\r\n            </div>\r\n            <div className=\"profile__bottom\">\r\n                <div className=\"container\">\r\n                    <Users fetchFunc={fetchFunc} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default withApiService(connect()(Followers));\r\n","import React, {useCallback, useEffect, useState} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport ProfileMain from \"../user/profile-main\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {withApiService} from '../hoc';\r\nimport Users from '../users';\r\n\r\nconst Following = (props) => {\r\n    const {apiService} = props;\r\n    const user = useSelector(state => state.user);\r\n\r\n    const {followersCount, followingCount, imagesCount, postsCount, avatarUrl, backgroundUrl, name} = user;\r\n\r\n    const profileCounters = {\r\n        followersCount, followingCount, imagesCount, postsCount\r\n    };\r\n\r\n    const fetchFunc = useCallback((...args) => {\r\n        return apiService.fetchFollowing(...args);\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"profile\">\r\n            <div className=\"profile__top\">\r\n                <ProfileMain\r\n                    profileCounters={profileCounters}\r\n                    avatarUrl={avatarUrl}\r\n                    backgroundUrl={backgroundUrl}\r\n                    userName={name}\r\n                    isOwner={true}\r\n                />\r\n            </div>\r\n            <div className=\"profile__bottom\">\r\n                <div className=\"container\">\r\n                    <Users fetchFunc={fetchFunc}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default withApiService(connect()(Following));\r\n","import React, {useRef, useState} from \"react\"\r\nimport cn from 'classnames'\r\nimport socket from \"../../socket\";\r\n\r\nconst PostCreate = (props) => {\r\n    const {apiService, user, wallId} = props;\r\n\r\n    const [postText, setPostText] = useState('');\r\n    const [postImageSrc, setPostImageSrc] = useState(null);\r\n\r\n    const postFileInput = useRef(null);\r\n    const postFileButton = useRef(null);\r\n    const postSubmitButton = useRef(null);\r\n    const postImage = useRef(null);\r\n\r\n    const onChangePostText = (e) => {\r\n        setPostText(e.target.value)\r\n    };\r\n\r\n    const onFileUpload = (e) => {\r\n        if (postImageSrc){\r\n            setPostImageSrc(null);\r\n            postFileButton.current.blur();\r\n        } else {\r\n            postFileInput.current.click();\r\n        }\r\n    };\r\n\r\n    const onPostFileChange = (e) => {\r\n        const file = e.target.files[0];\r\n        if (file) {\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file);\r\n\r\n            postFileButton.current.blur();\r\n\r\n            reader.onloadend = function () {\r\n                const previewImage = reader.result;\r\n                setPostImageSrc(previewImage);\r\n            };\r\n        } else {\r\n            setPostImageSrc(null);\r\n        }\r\n    };\r\n\r\n    const resetForm = () => {\r\n        setPostText('');\r\n        setPostImageSrc(null);\r\n        postSubmitButton.current.blur();\r\n        postFileInput.current.value = null;\r\n    };\r\n\r\n    const createPost = (e) => {\r\n        e.preventDefault();\r\n\r\n        const file = postFileInput.current.files[0];\r\n\r\n        if (postText.length > 0 || file) {\r\n            const data = new FormData();\r\n            data.append('text', postText);\r\n            data.append('id', user.id);\r\n            data.append('wallId', wallId);\r\n            data.append('image', file);\r\n\r\n            apiService.createPost(data).then(res => {\r\n                resetForm();\r\n                // updatePosts(res.body.posts);\r\n                // addPost(res.body.post);\r\n\r\n                socket.emit('createPost', {\r\n                    post: res.body.post,\r\n                    toId: wallId\r\n                });\r\n\r\n                if (wallId.toString() !== user.id.toString()) {\r\n                    socket.emit('sendPostData', {\r\n                        post: {\r\n                            imageUrl: res.body.post.imageUrl\r\n                        },\r\n                        toId: wallId\r\n                    });\r\n                }\r\n            }).catch(e => {\r\n\r\n            })\r\n        }\r\n    };\r\n\r\n    const btnImageClasses = cn({\r\n        'btn': true,\r\n        'btn-danger': postImageSrc\r\n    });\r\n\r\n    return (\r\n        <form onSubmit={createPost} className=\"post-create\">\r\n            <input onChange={onPostFileChange} ref={postFileInput} className=\"hidden\" type=\"file\"/>\r\n            <div className=\"post-create__icon\">\r\n                <div className=\"post-icon\">\r\n                    <i className=\"fa fa-comments-o\" aria-hidden=\"true\" />\r\n                </div>\r\n            </div>\r\n            <div className=\"post-create__wrap\">\r\n                { postImageSrc ? (\r\n                    <div className=\"post-create__image\">\r\n                        <img ref={postImage} src={postImageSrc} alt=\"\"/>\r\n                    </div>\r\n                ) : null }\r\n                <div className=\"post-create__input\">\r\n                    <textarea onChange={onChangePostText} placeholder=\"Write a new post...\" className=\"textarea-theme\" value={postText} id=\"\" cols=\"30\" rows=\"10\">\r\n                    </textarea>\r\n                </div>\r\n                <div className=\"post-create__actions\">\r\n                    <div className=\"post-create__action\">\r\n                        <div ref={postFileButton} onClick={onFileUpload} className={btnImageClasses}>\r\n                            <i className=\"fa fa-picture-o\"\r\n                               aria-hidden=\"true\" />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"post-create__action\">\r\n                        <button ref={postSubmitButton} type=\"submit\" className=\"btn\">Post</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nexport default PostCreate;\r\n","import React, {useContext} from \"react\";\r\nimport VariableProvider from '../context/vars'\r\nimport socket from \"../../socket\";\r\n\r\nconst ProfileWallList = (props) => {\r\n    const {posts, isOwner = false, user, apiService, removePostById, wallId, toggleComments, updatePostLikes, updatePostComments, updateCommentLikes} = props;\r\n    const {publicPath} = useContext(VariableProvider);\r\n\r\n    const createComment = (e, postId) => {\r\n        e.preventDefault();\r\n        const text = e.target.elements[0].value;\r\n        if (text) {\r\n            apiService.createComment(user.id, postId, text).then((res) => {\r\n                const { comments } = res.body;\r\n                // updatePostComments(postId, res.body.comments);\r\n                socket.emit('createComment', {\r\n                    comments,\r\n                    postId,\r\n                    toId: wallId,\r\n                });\r\n            }).catch(e => {\r\n                // console.log(e.message)\r\n            });\r\n            e.target.reset();\r\n        }\r\n    };\r\n\r\n    const likeComment = (commentId, isLiked, postId) => {\r\n        apiService.likeComment(user.id, commentId, isLiked).then(res => {\r\n            if (res.body.ok) {\r\n                const { comment } = res.body;\r\n                socket.emit('likeComment', {\r\n                    comment,\r\n                    userId: user.id,\r\n                    toId: wallId,\r\n                    postId\r\n                });\r\n                // updateCommentLikes(postId, comment);\r\n            }\r\n        }).catch(e => {\r\n            console.log(e.message)\r\n        })\r\n    };\r\n\r\n    const removePost = (id) => {\r\n        apiService.removePost(id).then((res) => {\r\n            socket.emit('removePost', {\r\n                postId: id,\r\n                toId: wallId\r\n            });\r\n            // removePostById(id);\r\n        }).catch(e => {\r\n            // console.log(e.message)\r\n        })\r\n    };\r\n\r\n    const likePost = (postId, isLiked) => {\r\n        apiService.likePost(user.id, postId, isLiked).then(res => {\r\n            if (res.body.ok) {\r\n                const { post } = res.body;\r\n                socket.emit('likePost', {\r\n                    post,\r\n                    userId: user.id,\r\n                    toId: wallId,\r\n                });\r\n                // updatePostLikes(post);\r\n            }\r\n        }).catch(e => {\r\n            // console.log(e.message)\r\n        })\r\n    };\r\n\r\n    const renderPostIcon = (isImage) => {\r\n        if (isImage) {\r\n            return (\r\n                <div className=\"post-icon post-icon_green\">\r\n                    <i className=\"fa fa-picture-o\" aria-hidden=\"true\"/>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className=\"post-icon post-icon_tomato\">\r\n                <i className=\"fa fa-pencil\" aria-hidden=\"true\"/>\r\n            </div>\r\n        )\r\n    };\r\n\r\n    const renderPostInfo = (post) => {\r\n        return (\r\n            <div className=\"post-info\">\r\n                <div className=\"post-info__comments\">\r\n                    <div onClick={() => toggleComments(post._id)} className=\"post-comments-button\">\r\n                        <i className=\"fa fa-comment-o\" aria-hidden=\"true\"/> {post.comments.length} Comments\r\n                    </div>\r\n                </div>\r\n                <div className=\"post-info__likes\">\r\n                    <div onClick={() => likePost(post._id, post.isLiked)} className=\"post-likes-button\">\r\n                        {\r\n                            !post.isLiked ? (\r\n                                <i className=\"fa fa-heart-o\" aria-hidden=\"true\"/>\r\n                            ) : (\r\n                                <i style={{color: 'red'}} className=\"fa fa-heart\" aria-hidden=\"true\"/>\r\n                            )\r\n                        } {post.likesCount} Likes\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    };\r\n\r\n    const renderPostImage = (post, info = true) => {\r\n        return (\r\n            <div className=\"profile-post__image\">\r\n                <img src={`${publicPath}${post.imageUrl}`} alt=\"\"/>\r\n                {\r\n                    info ? renderPostInfo(post) : null\r\n                }\r\n            </div>\r\n        )\r\n    };\r\n\r\n    const renderComment = (c, post) => {\r\n        return (\r\n            <div className=\"comment\">\r\n                <div className=\"comment__avatar\" style={{backgroundImage: `url(${publicPath}${c.user.avatarUrl})`}}>\r\n\r\n                </div>\r\n                <div className=\"comment__content\">\r\n                    <div className=\"comment__head\">\r\n                        <div className=\"comment__name\">\r\n                            <strong>{c.user.name}</strong>\r\n                        </div>\r\n                        <div className=\"comment__date\">\r\n                            {c.time}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"comment__body\">\r\n                        <div className=\"comment__text\">\r\n                            {c.text}\r\n                        </div>\r\n                        <div className=\"comment__likes\">\r\n                            <div onClick={() => likeComment(c._id, c.isLiked, post._id)} className=\"comment-like\">\r\n                                {\r\n                                    c.isLiked ? (\r\n                                        <>\r\n                                            <i style={{color: 'red'}} className=\"fa fa-heart\" aria-hidden=\"true\"/>\r\n                                        </>\r\n                                    ) : (\r\n                                        <>\r\n                                            <i className=\"fa fa-heart-o\" aria-hidden=\"true\"/>\r\n                                        </>\r\n                                    )\r\n                                }\r\n                                &nbsp;{c.likesCount > 0 ? c.likesCount : null}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    };\r\n\r\n    const renderPostContent = (post, isPhotoPost) => {\r\n        let topHtml = null;\r\n\r\n        if (isPhotoPost) {\r\n            topHtml = renderPostImage(post);\r\n        } else {\r\n            topHtml = (\r\n                <>\r\n                    {\r\n                        post.imageUrl ? (\r\n                            renderPostImage(post, false)\r\n                        ) : null\r\n                    }\r\n                    <div className=\"profile-post__body\">\r\n                        <div className=\"profile-post__content\">\r\n                            { post.text }\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"profile-post__info\">\r\n                        { renderPostInfo(post) }\r\n                    </div>\r\n                </>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <>\r\n                { topHtml }\r\n                {\r\n                    posts.itemsUI[post._id].commentsOpened ? (\r\n                        <div className=\"profile-post__comments\">\r\n                            <div className=\"post-comment\">\r\n                                {\r\n                                    post.comments.length ? (\r\n                                        <div className=\"post-comment__list\">\r\n                                            { post.comments.map(c => {\r\n                                                return (\r\n                                                    <div key={c._id} className=\"post-comment__item\">\r\n                                                        { renderComment(c, post) }\r\n                                                    </div>\r\n                                                )\r\n                                            }) }\r\n                                        </div>\r\n                                    ) : null\r\n                                }\r\n                                <div className=\"post-comment__create\">\r\n                                    <form onSubmit={(e) => createComment(e, post._id)} className=\"comment-create\">\r\n                                        <div className=\"comment-create__input\">\r\n                                            <textarea className=\"textarea-theme\" cols=\"30\" rows=\"10\" />\r\n                                        </div>\r\n                                        <div className=\"comment-create__actions\">\r\n                                            <div className=\"comment-create__action\">\r\n                                                <button className=\"btn\">Comment</button>\r\n                                            </div>\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    ) : null\r\n                }\r\n            </>\r\n        )\r\n    };\r\n\r\n    const renderPosts = () => {\r\n        return posts.items.map((post) => {\r\n            const isPhotoPost = post.imageUrl && !post.text;\r\n            const typeText = isPhotoPost ? 'a photo' : 'an article';\r\n\r\n            return (\r\n                <div key={post._id} className=\"profile-wall__item\">\r\n                    <div className=\"profile-post\">\r\n                        <div className=\"profile-post__icon\">\r\n                            { renderPostIcon(isPhotoPost) }\r\n                        </div>\r\n                        {\r\n                            isOwner ? (\r\n                                <div className=\"profile-post__remove\">\r\n                                    <div onClick={() => removePost(post._id)} className=\"post-icon post-icon_remove\">\r\n                                        <i className=\"fa fa-times\" aria-hidden=\"true\"/>\r\n                                    </div>\r\n                                </div>\r\n                            ) : null\r\n                        }\r\n                        <div className=\"profile-post__head\">\r\n                            <div className=\"profile-post__head-left\">\r\n                                <span className=\"profile-post__name\">{post.user.name}</span> posted {typeText}\r\n                            </div>\r\n                            <div className=\"profile-post__head-right\">\r\n                                { post.time }\r\n                            </div>\r\n                        </div>\r\n                        { renderPostContent(post, isPhotoPost) }\r\n                    </div>\r\n                </div>\r\n            )\r\n        })\r\n    };\r\n\r\n    console.log('render wall list');\r\n\r\n    return (\r\n        <div className=\"profile-wall__list\">\r\n            { renderPosts() }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ProfileWallList;\r\n","import React, {useEffect, useState} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {withApiService, withoutOwner} from '../hoc'\r\nimport {actionUpdateUserData} from \"../../store/actions\"\r\nimport {bindActionCreators} from \"redux\"\r\n\r\nimport PostCreate from \"./post-create\"\r\nimport ProfileWallList from \"./profile-wall-list\"\r\nimport ProfileMain from \"./profile-main\"\r\n\r\nimport {getUserInfo} from \"../../helpers\"\r\n\r\nimport socket from \"../../socket\";\r\n\r\nimport './style.css'\r\nimport Spinner from \"../spinner\";\r\n\r\nconst User = (props) => {\r\n    const {\r\n        apiService,\r\n        actionUpdateUserData,\r\n        user,\r\n        isUserPage,\r\n        userPageId,\r\n        profileCounters,\r\n        updateProfileCounters,\r\n        avatarUrl,\r\n        backgroundUrl,\r\n        setAvatarUrl\r\n    } = props;\r\n\r\n    const isOwner = !isUserPage;\r\n    const wallId = isUserPage ? userPageId : user.id;\r\n\r\n    const [userData, setUserData] = useState({});\r\n    const [loading, setLoading] = useState(true);\r\n    const [removedPost, setRemovedPost] = useState(null);\r\n\r\n    const [posts, setPosts] = useState({\r\n        items: [],\r\n        itemsUI: {}\r\n    });\r\n\r\n    const getPostsInterface = (newPosts) => {\r\n        const postsUI = posts.itemsUI;\r\n\r\n        return newPosts.reduce(function(acc, p) {\r\n            const isOpened = (postsUI[p._id] && postsUI[p._id].commentsOpened) || false;\r\n            return {...acc, [p._id]: {\r\n                commentsOpened: isOpened\r\n            }}\r\n        }, {});\r\n    };\r\n\r\n    const updateStatePosts = (newPosts) => {\r\n        const postsInterfaces = getPostsInterface(newPosts);\r\n        setPosts(state => {\r\n            return {\r\n                items: newPosts,\r\n                itemsUI: postsInterfaces\r\n            }\r\n        });\r\n    };\r\n\r\n    const addStatePosts = (post) => {\r\n        setPosts(state => {\r\n            const newPosts = [post, ...state.items];\r\n            return {\r\n                items: newPosts,\r\n                itemsUI: getPostsInterface(newPosts)\r\n            }\r\n        });\r\n    };\r\n\r\n    const updateStatePostsUI = (newPostsUI) => {\r\n        setPosts(state => {\r\n            return {\r\n                items: posts.items,\r\n                itemsUI: newPostsUI\r\n            }\r\n        });\r\n    };\r\n\r\n    const removeStatePostsById = (id) => {\r\n        setPosts(state => {\r\n            const posts = state.items;\r\n\r\n            const index = posts.findIndex(p => p._id === id);\r\n            const post =  posts[index];\r\n\r\n            const newItems = posts.filter(p => p._id !== id);\r\n\r\n            setRemovedPost(post);\r\n\r\n            return {\r\n                items: newItems,\r\n                itemsUI: getPostsInterface(newItems)\r\n            }\r\n        });\r\n    };\r\n\r\n    const fetchPosts = () => {\r\n        setLoading(true);\r\n        apiService.fetchPosts(user.id).then(res => {\r\n            updateStatePosts(res.body.posts);\r\n            setLoading(false);\r\n        }).catch(e => {\r\n            // console.log(e.message)\r\n            setLoading(false);\r\n        })\r\n    };\r\n\r\n    useEffect(() => {\r\n        socket.on('createPost', ({post}) => {\r\n            addPost(post);\r\n        });\r\n\r\n        socket.on('removePost', ({postId}) => {\r\n            removeStatePostsById(postId);\r\n        });\r\n\r\n        socket.on('likePost', ({post, userId}) => {\r\n            updatePostLikes(post, userId);\r\n        });\r\n\r\n        socket.on('createComment', ({comments, postId}) => {\r\n            updatePostComments(postId, comments);\r\n        });\r\n\r\n        socket.on('likeComment', ({comment, userId, postId}) => {\r\n            updateCommentLikes(postId, comment, userId);\r\n        });\r\n\r\n        return () => {\r\n            socket.off('createPost');\r\n            socket.off('removePost');\r\n            socket.off('likePost');\r\n            socket.off('createComment');\r\n            socket.off('likeComment');\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (removedPost) {\r\n            const postsCount = profileCounters.postsCount - 1;\r\n            const imagesCount = removedPost.imageUrl ? profileCounters.imagesCount - 1 : profileCounters.imagesCount;\r\n\r\n            updateProfileCounters({\r\n                postsCount,\r\n                imagesCount\r\n            });\r\n        }\r\n    }, [removedPost]);\r\n\r\n    // socket wall\r\n    useEffect(() => {\r\n        const wallId = isUserPage ? userPageId : user.id;\r\n        socket.emit('connectToWallId', {wallId});\r\n        return () => {\r\n            socket.emit('disconnectToWallId', {wallId})\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (isUserPage) {\r\n            // other pages\r\n            setLoading(true);\r\n            apiService.getUserInfo(userPageId, user.id).then(res => {\r\n                const data = res.body.data;\r\n                // const {postsCount, imagesCount} = getUserInfo(data.posts);\r\n\r\n                setAvatarUrl(data.avatarUrl);\r\n                updateProfileCounters({\r\n                    followersCount: data.followersCount,\r\n                    followingCount: data.followingCount,\r\n                    postsCount: data.postsCount,\r\n                    imagesCount: data.imagesCount,\r\n                });\r\n\r\n                setUserData({\r\n                    avatarUrl: data.avatarUrl,\r\n                    userName: data.name,\r\n                    userId: data.id,\r\n                    isFollowing: data.isFollowing\r\n                });\r\n\r\n                updateStatePosts(data.posts);\r\n                setLoading(false);\r\n\r\n            }).catch(e => {\r\n                // console.log(e);\r\n            })\r\n        } else {\r\n            // me\r\n            setUserData({\r\n                ...userData,\r\n                avatarUrl: user.avatarUrl,\r\n                userName: user.name,\r\n                userId: user.id\r\n            });\r\n\r\n            fetchPosts();\r\n        }\r\n    }, []);\r\n\r\n    const updateUserData = (key, value) => {\r\n        setUserData(state => {\r\n            return {\r\n                ...state,\r\n                [key]: value\r\n            }\r\n        });\r\n    };\r\n\r\n    const follow = () => {\r\n        apiService.follow(user.id, userPageId, isFollowing).then(res => {\r\n            const { isFollowing, client, user } = res.body;\r\n            updateUserData('isFollowing', isFollowing);\r\n            updateProfileCounters({\r\n                followingCount: user.followingCount,\r\n                followersCount: user.followersCount\r\n            });\r\n            actionUpdateUserData({\r\n                followingCount: client.followingCount,\r\n                followersCount: client.followersCount\r\n            });\r\n            socket.emit('follow', {toId: userPageId, isFollowing});\r\n        }).catch(e => {\r\n\r\n        })\r\n    };\r\n\r\n    const toggleComments = (postId) => {\r\n        const postsUI = posts.itemsUI;\r\n\r\n        const currentState = postsUI[postId].commentsOpened;\r\n        const newState = {...postsUI, [postId]: {\r\n                commentsOpened: !currentState\r\n        }};\r\n\r\n        updateStatePostsUI(newState);\r\n    };\r\n\r\n    const updatePostComments = (postId, comments) => {\r\n        setPosts(posts => {\r\n            const state = posts.items;\r\n\r\n            const index = state.findIndex((item) => item._id === postId);\r\n            const item = state[index];\r\n            const newItem = {\r\n                ...item,\r\n                comments\r\n            };\r\n\r\n            const newItems = [...state.slice(0, index), newItem, ...state.slice(index + 1)];\r\n\r\n            const postsUI = posts.itemsUI;\r\n            const newItemsUI = newItems.reduce(function(acc, p) {\r\n                const isOpened = (postsUI[p._id] && postsUI[p._id].commentsOpened) || false;\r\n                return {...acc, [p._id]: {\r\n                        commentsOpened: isOpened\r\n                    }}\r\n            }, {});\r\n\r\n            return {\r\n                items: newItems,\r\n                itemsUI: newItemsUI\r\n            }\r\n            // updateStatePosts(newPosts);\r\n        })\r\n    };\r\n\r\n    const addPost = (post) => {\r\n        const imagesDiff = post.imageUrl ? 1 : 0;\r\n\r\n        updateProfileCounters((currentState) => {\r\n            return {\r\n                postsCount: currentState.postsCount + 1,\r\n                imagesCount: currentState.imagesCount + imagesDiff\r\n            }\r\n        });\r\n\r\n        addStatePosts(post);\r\n    };\r\n\r\n    const updatePostLikes = (post, userId) => {\r\n        setPosts((posts) => {\r\n            const state = posts.items;\r\n\r\n            const {_id, likesCount, isLiked} = post;\r\n            const index = state.findIndex((item) => item._id === _id);\r\n            const item = state[index];\r\n\r\n            const newItem = {\r\n                ...item,\r\n                likesCount,\r\n                isLiked: user.id.toString() === userId.toString() ? isLiked : item.isLiked\r\n            };\r\n\r\n            const newItems = [...state.slice(0, index), newItem, ...state.slice(index + 1)];\r\n\r\n            return {\r\n                items: newItems,\r\n                itemsUI: getPostsInterface(newItems)\r\n            }\r\n        });\r\n    };\r\n\r\n    const updateCommentLikes = (postId, comment, userId) => {\r\n        setPosts((posts) => {\r\n            const state = posts.items;\r\n\r\n            const {_id, isLiked, likesCount} = comment;\r\n            const postIndex = state.findIndex((item) => item._id === postId);\r\n            const post = state[postIndex];\r\n            const commentIndex = post.comments.findIndex((item) => item._id === comment._id);\r\n            const c = post.comments[commentIndex];\r\n            const newComment = {\r\n                ...c,\r\n                likesCount,\r\n                isLiked: user.id.toString() === userId.toString() ? isLiked : c.isLiked\r\n            };\r\n            const newItem = {\r\n                ...post,\r\n                comments: [...post.comments.slice(0, commentIndex), newComment, ...post.comments.slice(commentIndex + 1)]\r\n            };\r\n\r\n            const newItems = [...state.slice(0, postIndex), newItem, ...state.slice(postIndex + 1)];\r\n\r\n            const postsUI = posts.itemsUI;\r\n            const newItemsUI = newItems.reduce(function(acc, p) {\r\n                const isOpened = (postsUI[p._id] && postsUI[p._id].commentsOpened) || false;\r\n                return {...acc, [p._id]: {\r\n                        commentsOpened: isOpened\r\n                    }}\r\n            }, {});\r\n\r\n            return {\r\n                items: newItems,\r\n                itemsUI: newItemsUI\r\n            }\r\n        })\r\n    };\r\n\r\n    const {userName, userId, isFollowing} = userData;\r\n\r\n    return (\r\n        <div className=\"profile\">\r\n            <div className=\"profile__top\">\r\n                <ProfileMain\r\n                    profileCounters={profileCounters}\r\n                    isOwner={isOwner}\r\n                    userName={userName}\r\n                    avatarUrl={avatarUrl}\r\n                    backgroundUrl={backgroundUrl}\r\n                />\r\n            </div>\r\n            <div className=\"profile__bottom\">\r\n                <div className=\"container\">\r\n                    {\r\n                        !isOwner ? (\r\n                            <div className=\"profile__actions\">\r\n                                <div className=\"profile__follow\">\r\n                                    {\r\n                                        isFollowing ? (\r\n                                            <div onClick={follow} className=\"btn btn-danger\">Unfollow</div>\r\n                                        ) : (\r\n                                            <div onClick={follow} className=\"btn\">Follow</div>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        ) : null\r\n                    }\r\n                    <div className=\"profile__wall\">\r\n                        <div className=\"profile__wall-bar\">\r\n\r\n                        </div>\r\n                        <div className=\"profile__wall-left\">\r\n                            <div className=\"profile-wall\">\r\n                                <div className=\"profile-wall__top\">\r\n                                    <div className=\"profile-wall__create\">\r\n                                        <PostCreate apiService={apiService} user={props.user} wallId={userId} addPost={addPost} updatePosts={updateStatePosts} />\r\n                                    </div>\r\n                                    {\r\n                                        loading ? (\r\n                                            <Spinner />\r\n                                        ) : null\r\n                                    }\r\n                                </div>\r\n                                <ProfileWallList\r\n                                    isOwner={isOwner}\r\n                                    posts={posts}\r\n                                    apiService={apiService}\r\n                                    user={user}\r\n                                    wallId={wallId}\r\n                                    removePostById={removeStatePostsById}\r\n                                    updatePostLikes={updatePostLikes}\r\n                                    updatePostComments={updatePostComments}\r\n                                    toggleComments={toggleComments}\r\n                                    updateCommentLikes={updateCommentLikes}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state.user\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({\r\n        actionUpdateUserData\r\n    }, dispatch)\r\n};\r\n\r\nexport default withoutOwner(withApiService(connect(mapStateToProps, mapDispatchToProps)(User)))\r\n","import React, {useState} from \"react\";\r\nimport User from '../user';\r\n\r\nconst UserPage = (props) => {\r\n    const userId = props.computedMatch.params.id;\r\n\r\n    const [avatarUrl, setAvatarUrl] = useState(null);\r\n\r\n    const [profileCounters, setProfileCounters] = useState({});\r\n\r\n    const updateProfileCounters = (params) => {\r\n        if (typeof params === 'function') {\r\n            setProfileCounters((state) => {\r\n                const newParams = params(state);\r\n                return {\r\n                    ...state,\r\n                    ...newParams\r\n                }\r\n            });\r\n        } else {\r\n            setProfileCounters((state) => {\r\n                return {\r\n                    ...state,\r\n                    ...params\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    return <User\r\n        setAvatarUrl={setAvatarUrl}\r\n        avatarUrl={avatarUrl}\r\n        userPageId={userId}\r\n        profileCounters={profileCounters}\r\n        updateProfileCounters={updateProfileCounters}\r\n        isUserPage={true} {...props}\r\n    />\r\n};\r\n\r\nexport default UserPage;\r\n","import React, {useState} from \"react\";\r\nimport User from '../user';\r\nimport {connect, useSelector} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {actionUpdateUserCounters} from \"../../store/actions\";\r\n\r\nconst MePage = (props) => {\r\n    const { actionUpdateUserCounters } = props;\r\n    const user = useSelector(state => state.user);\r\n    const avatarUrl = user.avatarUrl;\r\n    const backgroundUrl = user.backgroundUrl;\r\n\r\n    const getCounters = () => {\r\n        return {\r\n            followersCount: user.followersCount,\r\n            followingCount: user.followingCount,\r\n            imagesCount: user.imagesCount,\r\n            postsCount: user.postsCount\r\n        }\r\n    };\r\n\r\n    const profileCounters = getCounters();\r\n\r\n    const updateProfileCounters = (params) => {\r\n        actionUpdateUserCounters(params);\r\n    };\r\n\r\n    return <User\r\n        avatarUrl={avatarUrl}\r\n        backgroundUrl={backgroundUrl}\r\n        profileCounters={profileCounters}\r\n        updateProfileCounters={updateProfileCounters}\r\n        {...props}\r\n    />\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {}\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({\r\n        actionUpdateUserCounters\r\n    }, dispatch)\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MePage)\r\n","import React, {useCallback, useState} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport ProfileMain from \"../user/profile-main\"\r\nimport {useSelector} from \"react-redux\"\r\nimport {withApiService} from '../hoc'\r\nimport Users from '../users'\r\n\r\nimport './style.css'\r\n\r\nconst Search = (props) => {\r\n    const {apiService} = props;\r\n    const user = useSelector(state => state.user);\r\n\r\n    const {followersCount, followingCount, imagesCount, postsCount, avatarUrl, backgroundUrl, name} = user;\r\n\r\n    const [result, setResult] = useState('');\r\n    const [match, setMatch] = useState('');\r\n\r\n    const fetchFunc = useCallback(() => {\r\n        return apiService.fetchUsers(result);\r\n    }, [result]);\r\n\r\n    const profileCounters = {\r\n        followersCount, followingCount, imagesCount, postsCount\r\n    };\r\n\r\n    const findUsers = (e) => {\r\n        e.preventDefault();\r\n        setResult(match);\r\n    };\r\n\r\n    const onTextChange = ((e) => {\r\n        setMatch(e.target.value)\r\n    });\r\n\r\n    return (\r\n        <div className=\"profile\">\r\n            <div className=\"profile__top\">\r\n                <ProfileMain\r\n                    profileCounters={profileCounters}\r\n                    avatarUrl={avatarUrl}\r\n                    backgroundUrl={backgroundUrl}\r\n                    userName={name}\r\n                    isOwner={true}\r\n                />\r\n            </div>\r\n            <div className=\"profile__bottom\">\r\n                <div className=\"container\">\r\n                    <div className=\"search\">\r\n                        <form onSubmit={findUsers} className=\"search__form\">\r\n                            <div className=\"search__text\">\r\n                                <input value={match} onChange={onTextChange} placeholder=\"Type a name\" type=\"text\"/>\r\n                            </div>\r\n                            <div className=\"search__find\">\r\n                                <button type=\"submit\" className=\"btn\">Find</button>\r\n                            </div>\r\n                        </form>\r\n                        <div className=\"search__result\">\r\n                            <Users fetchFunc={fetchFunc}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default withApiService(connect()(Search));\r\n","import React from 'react';\nimport {Route, Switch, Redirect} from \"react-router-dom\";\n\nimport Cart from \"../cart\";\nimport Header from \"../header\";\nimport Home from \"../home\";\nimport Store from \"../store\";\nimport PrivateRoute from \"../private-route\";\nimport Login from \"../login\";\nimport Register from '../register';\nimport Messages from '../messages';\nimport Followers from '../followers';\nimport Following from '../following';\nimport UserPage from \"../hoc/userPage\";\nimport MePage from '../hoc/mePage';\nimport Search from '../search';\n\nimport {withApiService} from \"../hoc\";\nimport {connect} from \"react-redux\";\nimport {sortMessagesList, updateMessageInList} from \"../../store/actions/messageActions\";\nimport {addChatMessage} from \"../../store/actions/chatActions\";\nimport {actionUpdateUserCounters} from '../../store/actions'\nimport {bindActionCreators} from \"redux\";\n\nimport socket from \"../../socket\";\nimport {getUserData} from \"../../store/actions\";\n\nclass App extends React.Component {\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        const {apiService} = this.props;\n        const token = this.props.user.token;\n\n        if (prevProps.user.token !== token) {\n            apiService.setToken(token);\n        }\n    }\n\n    getUser() {\n        const { user } = this.props;\n        return user;\n    }\n\n    componentDidMount() {\n        const {apiService, updateMessageInList, addChatMessage, getUserData, actionUpdateUserCounters} = this.props;\n\n        // setInterval(() => {\n        //     getUserData(apiService, this.getUser().token);\n        // }, 5000);\n\n        // messages from me and others\n        socket.on('getMessage', (data) => {\n            console.log('get data', data);\n\n            const user = this.getUser();\n            const {inChat, chatId} = this.props.chat;\n            let mine = data.fromId.toString() === user.id.toString();\n\n            // update message list\n            const message = {...data.message};\n            // if mine\n            if (mine) {\n                message.name = data.companion.name;\n                message.avatarUrl = data.companion.avatarUrl;\n\n                updateMessageInList({id: data.toId, updated: false, message, sort: true});\n            }\n\n            if (inChat && (chatId.toString() === data.toId.toString() || chatId.toString() === data.fromId.toString())) {\n                addChatMessage(data.message);\n\n                if (!mine) {\n                    apiService.updateChatTime(user.id, data.fromId, data.date);\n                    updateMessageInList({id: data.fromId, updated: false, message, sort: true});\n                }\n            } else {\n                if (!mine) {\n                    window.M.toast({html: `<b>${data.message.name}</b>: ${data.message.text}`});\n                    updateMessageInList({id: data.fromId, updated: true, message, sort: true});\n                }\n            }\n        });\n\n        socket.on('follow', (data) => {\n            const {isFollowing} = data;\n            const num = isFollowing ? 1 : -1;\n\n            actionUpdateUserCounters({\n                followersCount: this.getUser().followersCount + num\n            })\n        });\n\n        socket.on('sendPostData', (data) => {\n            const {imageUrl} = data.post;\n            const imageCount = imageUrl ? 1 : 0;\n\n            actionUpdateUserCounters({\n                postsCount: this.getUser().postsCount + 1,\n                imagesCount: this.getUser().imagesCount + imageCount\n            })\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Header />\n                <div className=\"content pt-3\">\n                    <Switch>\n                        <Route path=\"/\" exact component={Home} />\n                        <PrivateRoute exact path=\"/cart\" component={Cart}/>\n                        <Route path=\"/store\" component={Store} />\n                        <PrivateRoute exact path=\"/me\" component={MePage}/>\n                        <PrivateRoute exact path=\"/followers\" component={Followers}/>\n                        <PrivateRoute exact path=\"/following\" component={Following}/>\n                        <PrivateRoute exact path=\"/messages/\" component={Messages}/>\n                        <PrivateRoute exact path=\"/search\" component={Search}/>\n                        <Route path=\"/login\" component={Login} />\n                        <Route path=\"/register\" component={Register} />\n                        <Route path=\"/test\" render={() => {\n                            return <h2>Test page</h2>\n                        }} />\n                        <PrivateRoute path=\"/user/:id\" component={UserPage}/>\n                        <Redirect to=\"/\" />\n                    </Switch>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        getNewMessage: state.messages.getNewMessage,\n        user: state.user,\n        chat: state.chat\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        getUserData: (apiSevice, token) => dispatch(getUserData(apiSevice, token)()),\n        ...bindActionCreators({\n            updateMessageInList,\n            sortMessagesList,\n            addChatMessage,\n            actionUpdateUserCounters\n        }, dispatch)\n    }\n};\n\nexport default withApiService(connect(mapStateToProps, mapDispatchToProps)(App))\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","class UnauthorizedError extends Error {\r\n    constructor(...args) {\r\n        super(...args);\r\n        this.status = 401;\r\n    }\r\n}\r\n\r\nexport default UnauthorizedError;\r\n","import UnauthorizedError from \"../errors/UnauthorizedError\";\r\n\r\nclass ApiService {\r\n    URL = '/api/';\r\n    token = null;\r\n\r\n    getRequest(url, params = {}) {\r\n        return new Promise((resolve, reject) => {\r\n            fetch(`${this.URL}${url}`, params)\r\n                .then(r =>  r.json().then(data => ({status: r.status, body: data})) )\r\n                .then(res => {\r\n                    if (res.status === 401) reject(new UnauthorizedError());\r\n                    resolve(res);\r\n                }).catch(e => {\r\n                    reject(e);\r\n                })\r\n        });\r\n    }\r\n\r\n    login(data) {\r\n        return this.getRequest('login', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        });\r\n    }\r\n\r\n    register(data) {\r\n        return this.getRequest('register', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        });\r\n    }\r\n\r\n    uploadAvatar(formData) {\r\n        return this.getRequest('uploadAvatar', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Authorization': this.getToken()\r\n            },\r\n            body: formData\r\n        });\r\n    }\r\n\r\n    uploadBackground(formData) {\r\n        return this.getRequest('uploadBackground', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Authorization': this.getToken()\r\n            },\r\n            body: formData\r\n        });\r\n    }\r\n\r\n    // posts\r\n    fetchPosts(id) {\r\n        return this.getRequest('posts', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': this.getToken()\r\n            },\r\n            body: JSON.stringify({id})\r\n        });\r\n    }\r\n\r\n    createPost(formData) {\r\n        return this.getRequest('createPost', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Authorization': this.getToken()\r\n            },\r\n            body: formData\r\n        });\r\n    }\r\n\r\n    removePost(id) {\r\n        return this.getRequest('posts', {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': this.getToken()\r\n            },\r\n            body: JSON.stringify({id})\r\n        });\r\n    }\r\n\r\n    likePost(userId, postId, isLiked) {\r\n        const token = this.getToken();\r\n\r\n        return this.getRequest('postLike', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': token\r\n            },\r\n            body: JSON.stringify({userId, postId, like: isLiked})\r\n        });\r\n    }\r\n\r\n    // comments\r\n    createComment(userId, postId, text) {\r\n        return this.getRequest('createComment', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': this.getToken()\r\n            },\r\n            body: JSON.stringify({userId, postId, text})\r\n        });\r\n    }\r\n\r\n    likeComment(userId, commentId, isLiked) {\r\n        return this.getRequest('likeComment', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': this.getToken()\r\n            },\r\n            body: JSON.stringify({userId, commentId, like: isLiked})\r\n        });\r\n    }\r\n\r\n    getUserData = () => {\r\n        return this.getRequest('userData', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': this.getToken()\r\n            }\r\n        });\r\n    };\r\n\r\n    // messages\r\n    sendMessage = (receiverId, senderId, message, companion, date) => {\r\n        return this.getRequest('sendMessage', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': this.getToken()\r\n            },\r\n            body: JSON.stringify({id: receiverId, senderId, message, companion, date})\r\n        });\r\n    };\r\n\r\n    getChatMessages = (id, receiverId) => {\r\n        return this.getRequest('chatMessages', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({id, receiverId})\r\n        });\r\n    };\r\n\r\n    getListMessages = (id) => {\r\n        return this.getRequest('listMessages', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({id})\r\n        });\r\n    };\r\n\r\n    updateChatTime(id, receiverId, date) {\r\n        return this.getRequest('chat', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({id, receiverId, date})\r\n        });\r\n    }\r\n\r\n    getUserInfo(id, clientId) {\r\n        const token = this.getToken();\r\n\r\n        return this.getRequest('userInfo', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': token\r\n            },\r\n            body: JSON.stringify({id, clientId})\r\n        });\r\n    }\r\n\r\n    follow(followerId, followingId, isFollowing) {\r\n        console.log(followerId, followingId, isFollowing);\r\n        return this.getRequest('follow', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': this.getToken()\r\n            },\r\n            body: JSON.stringify({followerId, followingId, isFollowing})\r\n        });\r\n    }\r\n\r\n    fetchFollowers(userId) {\r\n        return this.getRequest('followers', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': this.getToken()\r\n            },\r\n            body: JSON.stringify({userId})\r\n        });\r\n    }\r\n\r\n    fetchFollowing(userId) {\r\n        return this.getRequest('following', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': this.getToken()\r\n            },\r\n            body: JSON.stringify({userId})\r\n        });\r\n    }\r\n\r\n    fetchUsers(match) {\r\n        return this.getRequest('users', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': this.getToken()\r\n            },\r\n            body: JSON.stringify({match})\r\n        });\r\n    }\r\n\r\n    setToken(token) {\r\n        this.token = token;\r\n    }\r\n\r\n    getToken() {\r\n        return this.token;\r\n    }\r\n}\r\n\r\nexport default ApiService;\r\n","const initialState = {\r\n    name: null,\r\n    auth: false,\r\n    token: null,\r\n    id: null,\r\n    avatarUrl: null,\r\n    followingCount: 0,\r\n    followersCount: 0\r\n};\r\n\r\nconst userReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'GET_USER_SUCCESS':\r\n        case 'AUTH_CHECK_SUCCESS':\r\n        case 'USER_AUTHORIZE':\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            };\r\n\r\n        case 'USER_DATA_UPDATE':\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            };\r\n\r\n        case 'USER_COUNTERS_UPDATE':\r\n            const exec = typeof action.payload === 'function' ? action.payload : false;\r\n\r\n            let newParams;\r\n            if (exec) {\r\n                newParams = exec(state);\r\n            } else {\r\n                newParams = action.payload;\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                ...newParams\r\n            };\r\n\r\n        case 'USER_UNAUTHORIZE':\r\n            return {...initialState};\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default userReducer;\r\n","const initialState = {\r\n    loading: true,\r\n    messages: []\r\n};\r\n\r\nconst createMessage = (name, text, id, avatarUrl, updated) => ({name, text, id, avatarUrl, updated});\r\n\r\nconst messagesReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'FETCH_MESSAGES':\r\n            return {\r\n                loading: true,\r\n                messages: []\r\n            };\r\n\r\n        case 'FETCH_MESSAGES_SUCCESS':\r\n            return {\r\n                loading: false,\r\n                messages: action.payload\r\n            };\r\n\r\n        case 'FETCH_MESSAGES_FAILURE':\r\n            return {\r\n                loading: false,\r\n                messages: [...state.messages]\r\n            };\r\n\r\n        case 'MESSAGE_UPDATE': {\r\n            const {id, updated, message, sort = true} = action.payload;\r\n\r\n            const index = state.messages.findIndex(m => m.id === id);\r\n            let updatedMessages = [...state.messages];\r\n\r\n            if (sort) {\r\n                // отсортировать и создать, если нет собеседника в списке\r\n                let name = message.name;\r\n                let text = message.text;\r\n                let avatarUrl = message.avatarUrl;\r\n\r\n                if (index >= 0) {\r\n                    name = updatedMessages[index].name;\r\n                    updatedMessages = updatedMessages.filter(m => m.id !== id);\r\n                }\r\n                updatedMessages.unshift(createMessage(name, text, id, avatarUrl, updated));\r\n            } else {\r\n                if (index >= 0) {\r\n                    updatedMessages[index].updated = updated;\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                messages: updatedMessages\r\n            };\r\n        }\r\n\r\n        case 'MESSAGES_LIST_UPDATE':\r\n            return {\r\n                ...state,\r\n                messages: action.payload\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default messagesReducer;\r\n","const initialState = {\r\n    messages: [],\r\n    loading: false,\r\n    inChat: false,\r\n    chatId: null,\r\n    companion: {}\r\n};\r\n\r\nconst chatReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'FETCH_CHAT':\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n\r\n        case 'FETCH_CHAT_SUCCESS':\r\n            return {\r\n                ...state,\r\n                messages: action.payload.messages,\r\n                companion: {\r\n                    ...action.payload.companion\r\n                },\r\n                loading: false\r\n            };\r\n\r\n        case 'FETCH_CHAT_FAILURE':\r\n            return {\r\n                ...state,\r\n                loading: false\r\n            };\r\n\r\n        case 'CHAT_STATUS_UPDATE':\r\n            const {inChat = false, chatId = null} = action.payload;\r\n            return {\r\n                ...state,\r\n                inChat: inChat,\r\n                chatId: chatId\r\n            };\r\n\r\n        case 'CHAT_MESSAGE_ADD':\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, action.payload],\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default chatReducer;\r\n","const counterReducer = (state = 3, action) => {\r\n    switch (action.type) {\r\n        case 'COUNTER_ADD': {\r\n            return state + 1\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};\r\n\r\nexport default counterReducer;\r\n","import {combineReducers} from \"redux\";\r\nimport userReducer from \"./userReducer\";\r\nimport messagesReducer from \"./messageReducer\";\r\nimport chatReducer from \"./chatReducer\";\r\nimport counterReducer from \"./counterReducer\";\r\n\r\nconst reducer = combineReducers({\r\n    user: userReducer,\r\n    messages: messagesReducer,\r\n    chat: chatReducer,\r\n    counter: counterReducer\r\n});\r\n\r\nexport default reducer;\r\n","import { call, put, takeEvery, takeLatest, all } from 'redux-saga/effects'\r\nimport {ApiService} from '../../service';\r\n\r\nconst apiService = new ApiService();\r\n\r\n// worker Saga: will be fired on AUTH_CHECK action\r\nfunction* authCheckSaga(action) {\r\n    try {\r\n        const token = null;\r\n        if (token) {\r\n            const payload = {token, auth: true};\r\n            yield put({type: \"AUTH_CHECK_SUCCESS\", payload});\r\n        } else {\r\n\r\n        }\r\n    } catch (e) {\r\n\r\n    }\r\n}\r\n\r\nfunction* getUserDataSaga() {\r\n    const userData = yield apiService.getUserData();\r\n    yield put({type: \"USER_DATA_SUCCESS\", payload: userData});\r\n}\r\n\r\n// function* onAuth(action) {\r\n//     const {token} = action.payload;\r\n//     storageService.setToken(token);\r\n// }\r\n\r\n// function* watchAuthCheck() {\r\n//     yield takeEvery(\"AUTH_CHECK\", authCheckSaga);\r\n// }\r\n\r\n// function* watchGetUserData() {\r\n//     yield takeEvery(\"GET_USER\", getUserDataSaga);\r\n// }\r\n\r\n// function* mySaga2() {\r\n//     yield takeEvery(\"AUTH\", onAuth);\r\n// }\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        // watchAuthCheck(),\r\n        // watchGetUserData()\r\n    ])\r\n}\r\n","import {createStore, compose, applyMiddleware} from 'redux'\r\nimport reducer from \"./reducer\";\r\nimport reduxThunk from 'redux-thunk';\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport mySaga from './sagas'\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst reduxDevTools = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\r\n\r\nconst logMiddleware = () => (next) => (action) => {\r\n    console.log(action);\r\n    return next(action);\r\n};\r\n\r\nconst store = createStore(reducer, compose(applyMiddleware(reduxThunk, sagaMiddleware, logMiddleware), reduxDevTools));\r\n\r\n// sagaMiddleware.run(mySaga);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {BrowserRouter as Router} from \"react-router-dom\";\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\nimport {ApiService} from \"./service\";\nimport './style.css'\n\nimport store from \"./store\";\n\nimport {ApiServiceProvider} from \"./components/context/apiService\";\nimport VariablesProvider from \"./components/context/vars\";\nimport {getUserData} from \"./store/actions\";\n\nimport socket from \"./socket\";\n\nconst apiService = new ApiService();\nconst token = localStorage.getItem('userData');\napiService.setToken(token);\n\n// window.M.toast({html: 'I am a toast!'});\nconsole.log(process.env, process.env.CLIENT_SOCKET_PORT);\n\n// sockets\nsocket.on('connect', function() {\n    if (token) {\n        store.dispatch(getUserData(apiService, token)()).then(e => {\n            renderDOM();\n            const id = store.getState().user.id;\n            socket.emit('connected', {id});\n        })\n    } else {\n        renderDOM();\n    }\n});\n\nfunction renderDOM() {\n    ReactDOM.render(\n        <React.StrictMode>\n            <Provider store={store}>\n                <ApiServiceProvider value={apiService}>\n                    <VariablesProvider.Provider value={{publicPath: '/public/images/'}}>\n                        <Router>\n                            <App/>\n                        </Router>\n                    </VariablesProvider.Provider>\n                </ApiServiceProvider>\n            </Provider>\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}